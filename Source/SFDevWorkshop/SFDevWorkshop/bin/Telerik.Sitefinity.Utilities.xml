<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Sitefinity.Utilities</name>
    </assembly>
    <members>
        <member name="T:Telerik.Sitefinity.Utilities.BaseEnumerable`2">
            <summary>
            Represents enumerable used to convert generic enumerable of one type to subtype. 
            </summary>
            <typeparam name="TBase">The base type.</typeparam>
            <typeparam name="TSub">the sub type.</typeparam>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.BaseEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes new instance.
            </summary>
            <param name="subEnumerable">Generic enumerator which items will be converted to the specified subtype.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.BaseEnumerable`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.BaseEnumerator`2">
            <summary>
            Represents enumerator used to convert generic enumerables of one type to subtype. 
            </summary>
            <typeparam name="TBase">The base type.</typeparam>
            <typeparam name="TSub">The sub type.</typeparam>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.BaseEnumerator`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes new instance.
            </summary>
            <param name="subEnumerable">Generic enumerable which items will be converted to the specified subtype.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.BaseEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`1})">
            <summary>
            Initializes new instance.
            </summary>
            <param name="subEnumerator">Generic enumerator which items will be converted to the specified subtype.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.BaseEnumerator`2.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.BaseEnumerator`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.BaseEnumerator`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.BaseEnumerator`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.ConverterEnumerable`2">
            <summary>
            Represents enumerable used to convert generic enumerables of one type to another. 
            </summary>
            <typeparam name="TBase">The base type.</typeparam>
            <typeparam name="TSub">the sub type.</typeparam>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.ConverterEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`0},Telerik.Sitefinity.Utilities.ConvertItem{`0,`1})">
            <summary>
            Initializes new instance.
            </summary>
            <param name="subEnumerable">
            Generic enumerator which items will be converted to the specified type.
            </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.ConverterEnumerable`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.ConvertItem`2">
            <summary>
            Converts one type to another.
            </summary>
            <typeparam name="TFrom">The type to convert from.</typeparam>
            <typeparam name="TTo">The type to convert to.</typeparam>
            <param name="item">The item to convert.</param>
            <returns>The converted item.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.ConverterEnumerator`2">
            <summary>
            Represents enumerator used to convert generic enumerables of one type to another. 
            </summary>
            <typeparam name="TBase">The base type.</typeparam>
            <typeparam name="TSub">The sub type.</typeparam>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.ConverterEnumerator`2.#ctor(System.Collections.Generic.IEnumerable{`0},Telerik.Sitefinity.Utilities.ConvertItem{`0,`1})">
            <summary>
            Initializes new instance.
            </summary>
            <param name="subEnumerable">Generic enumerable which items will be converted to the specified subtype.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.ConverterEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},Telerik.Sitefinity.Utilities.ConvertItem{`0,`1})">
            <summary>
            Initializes new instance.
            </summary>
            <param name="subEnumerator">Generic enumerator which items will be converted to the specified subtype.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.ConverterEnumerator`2.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.ConverterEnumerator`2.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.ConverterEnumerator`2.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.ConverterEnumerator`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle"/> with the specified property name.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.AddRange(System.Collections.Generic.IEnumerable{Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle})">
            <summary>
            Add an enumerable of styles.
            </summary>
            <param name="styles">The styles.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.Add(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.ContainsProperty(System.String)">
            <summary>
            Determines whether the style collection contains a style with the specified property name.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.Contains(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.CopyTo(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.Count">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.Remove(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssComputedStylesCollection.ToString">
            <inheritdoc />
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssContext">
            <summary>
            This class contains a computed collection of CSS rules.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssContext"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssContext.Rules">
            <summary>
            Gets all the rules.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssContext.AddRule(Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule)">
            <summary>
            Adds a rule.
            </summary>
            <param name="rule">The rule.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule">
            <summary>
            Represents a CSS rule.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule.MediaTypes">
            <summary>
            Gets the media types.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule.Selectors">
            <summary>
            Gets the rule selectors.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule.Styles">
            <summary>
            Gets the styles.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity">
            <summary>
            Represents a specifity of a CSS style definition or a selector.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity.IsFromStyleAttribute">
            <summary>
            Gets or sets a value indicating whether the style is from "style" attribute.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity.NumberOfIdAttributes">
            <summary>
            Gets or sets the number of id attributes in the selector where the style is defined.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity.NumberOfOtherAttributesAndPseudoClass">
            <summary>
            Gets or sets the number of other attributes and pseudo class in the selector where the style is defined.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity.NumberOfElementNamesAndPseudoElements">
            <summary>
            Gets or sets the number of element names (tag identifiers) and pseudo elements in the selector where the style is defined.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity.Equals(Telerik.Sitefinity.Utilities.CssParsing.Composition.CssSpecifity)">
            <summary>
            Determines whether the specified CssSpecifity is equal to the current CssSpecifity.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssMerger.DownloadAndInlineCss(System.String,System.Uri)">
            <summary>
            Downloads the CSS from the link tags and inlines the styles in the html markup.
            </summary>
            <param name="html">The HTML markup.</param>
            <param name="rootUrl">The root URL of the website. It is used for making the URLs in the CSS absolute.</param>
            <returns>The HTML markup with inlined styles.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssMerger.MergeCss(System.String,System.String)">
            <summary>
            Merges the CSS into the HTML markup by inlining the styles into the HTML elements.
            </summary>
            <param name="cssMarkup">The CSS markup.</param>
            <param name="htmlMarkup">The HTML markup.</param>
            <returns>The HTML markup with CSS inlined.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssMerger.MergeCss(System.String,System.String,System.Uri)">
            <summary>
            Merges the CSS into the HTML markup by inlining the styles into the HTML elements.
            </summary>
            <param name="cssMarkup">The CSS markup.</param>
            <param name="htmlMarkup">The HTML markup.</param>
            <param name="rootUrl">The root URL of the website. It is used for making the URLs in the CSS absolute.</param>
            <returns>The HTML markup with CSS inlined.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssMerger.MergeCss(System.Collections.Generic.IList{Telerik.Sitefinity.Utilities.CssParsing.CssResource},System.String,System.Uri)">
            <summary>
            Merges the CSS into the HTML markup by inlining the styles into the HTML elements.
            </summary>
            <param name="cssResources">The CSS resources containing the markup.</param>
            <param name="htmlMarkup">The HTML markup.</param>
            <param name="rootUrl">The root URL of the website. It is used for making the URLs in the CSS absolute.</param>
            <returns>The HTML markup with CSS inlined.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssMerger.GetCssMediaList(System.String)">
            <summary>
            Split a string of media attributes and return a list of strings, that holds all media types.
            </summary>
            <param name="mediaAttribute">string of media attributes, sepparated with ','</param>
            <returns>list of strings, that holds all media types</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.CssParser">
            <summary>
            A class that handles CSS as a strongly typed structure.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.Parse(System.String)">
            <summary>
            Parses the specified CSS markup.
            </summary>
            <param name="markup">The markup.</param>
            <returns>The parsed CSS context.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.Parse(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses the specified CSS markup.
            </summary>
            <param name="markup">The markup.</param>
            <param name="medias">Medias that apply to all rules in the markup.</param>
            <returns>The parsed CSS context.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.Parse(System.Collections.Generic.IList{Telerik.Sitefinity.Utilities.CssParsing.CssResource})">
            <summary>
            Parses the specified CSS markup.
            </summary>
            <param name="cssResources">CSS resources.</param>
            <returns>The parsed CSS context.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.Parse(System.Collections.Generic.IEnumerable{Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule})">
            <summary>
            Parses the specified raw rules into a strongly typed CSS context.
            </summary>
            <param name="rawRules">The raw rules.</param>
            <returns>The parsed CSS context.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.TryParseRule(Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule,Telerik.Sitefinity.Utilities.CssParsing.Composition.CssRule@)">
            <summary>
            Tries to parse a CSS rule from a raw rule. If a selector is invalid it is ignored.
            </summary>
            <param name="rawRule">The raw rule.</param>
            <param name="rule">The rule.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.TryParseSelector(System.String,Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector@)">
            <summary>
            Tries to parse a selector.
            </summary>
            <param name="markup">The markup.</param>
            <param name="selector">The selector.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.TryParseAttributeIdentifier(System.String,Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeIdentifier@)">
            <summary>
            Tries to parse an attribute identifier.
            </summary>
            <param name="markup">The markup.</param>
            <param name="attributeIdentifier">The attribute identifier.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.TryParseAttributeOperator(System.String,Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator@)">
            <summary>
            Tries to parse an attribute operator.
            </summary>
            <param name="markup">The markup.</param>
            <param name="attributeOperator">The attribute operator.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.TryParseSelectorCombinator(System.String,Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorCombinator@)">
            <summary>
            Tries to parse a selector combinator.
            </summary>
            <param name="markup">The markup.</param>
            <param name="combinator">The combinator.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.TryParseMediaType(System.String,Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier@)">
            <summary>
            Tries to parse the media type.
            </summary>
            <param name="markup">The markup.</param>
            <param name="media">The parsed media type.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.ParseStyles(System.String)">
            <summary>
            Parses a semi-colon separated collection of styles.
            </summary>
            <param name="styles">The semi-colon collection of styles.</param>
            <returns>The computed styles.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.CssParser.ParseStyles(System.Collections.Generic.IEnumerable{Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawStyle})">
            <summary>
            Parses a collection of raw styles.
            </summary>
            <param name="styles">The raw styles.</param>
            <returns>The computed styles.</returns>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.CssResource.Markup">
            <summary>
            Gets or sets the markup.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.CssResource.Medias">
            <summary>
            Gets or sets the medias.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ENCODED_QUOTE">
            <summary>
            Matches encoded quotes.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_COMMENT">
            <summary>
            Matches comments.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COMMENT_CHUNK_GROUP">
            <summary>
            The name of the Comment Chunk group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COMMENT_CHUNK">
            <summary>
            Captures comments in a "CommentChunk" group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SPACE_AND_COMMENTS">
            <summary>
            Matches white spaces, new lines, tabs etc and comments. Does not capture groups.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.MEDIA_TYPE_GROUP">
            <summary>
            The name of the Media Type group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_MEDIA_TYPE">
            <summary>
            Captures literals that look like media types. It captures invalid media types also.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SIMPLE_REGION_GROUP">
            <summary>
            The name of the simple region group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SIMPLE_REGION">
            <summary>
            Matches a region surrounded with '{' and '}' without nesting.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.REGION_CONTENT_GROUP">
            <summary>
            The name of the Region Content group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.REGION_CONTENT">
            <summary>
            Captures the content between "{" and "}". Allows one level deep nested region.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.MEDIA_CHUNK_GROUP">
            <summary>
            The name of the Media Chunk group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.MEDIA_REGION">
            <summary>
            Captures a media region.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.IDENT">
            <summary>
            Matches an ident. That is a tag name, id or class.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_PSEUDO_SELECTOR">
            <summary>
            Matches a string that looks like a selector of a pseudo-class.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_SELECTOR_FIRST_IDENTIFIER">
            <summary>
            Matches a the first component of a simple selector.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_SELECTOR_REPEATABLE_IDENTIFIER">
            <summary>
            Matches a component of a selector that can be repeated multiple times.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_SIMPLE_SELECTOR">
            <summary>
            Looks for selectors on one level (without for example "div h1"). First we look for the optional tag identifier.
            Then zero or more instances of class, id, attribute or pseudo-class/element selectors. It can have all these or just a *.
            It does not care very much about validity.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SELECTOR_GROUP">
            <summary>
            The name of the Selector group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_SELECTOR">
            <summary>
            Captures a selector without regard for its validity. It has to have at least one flat selector. It allows for zero or more flat selectors
            in it separated (or not) by spaces and possibly a ">".
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_SELECTORS">
            <summary>
            Looks for selectors without regard for their validity. It has to have at least one selector and zero or more other selectors separated by spaces and ",".
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.RULE_GROUP">
            <summary>
            The name of the Rule group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_RULE">
            <summary>
            Captures a CSS rule with selectors in a "Selector" group and styles (as one string, not separated) in "RegionContent" group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.AT_PAGE_CHUNK_GROUP">
            <summary>
            The name of the @Page group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.AT_PAGE_CHUNK">
            <summary>
            Matches an @Page chunk.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_FACE_CHUNK_GROUP">
            <summary>
            The name of the @font-face group
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_FACE_CHUNK">
            <summary>
            Matches a @font-face chunk.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_CHUNK">
            <summary>
            Matches either a comment, a media chunk or a css rule.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CssChunkRegex">
            <summary>
            Regex for matching and capturing CSS chunks.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.PROPERTY_GROUP">
            <summary>
            The name of the Property group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.VALUE_GROUP">
            <summary>
            The name of the Value group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.TAG_IDENTIFIER_GROUP">
            <summary>
            The name of the Tag identifier group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.TAG_IDENTIFIER">
            <summary>
            Captures a tag identifier.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CLASS_IDENTIFIER_GROUP">
            <summary>
            The name of the Class Identifier group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CLASS_IDENTIFIER">
            <summary>
            Captures a class identifier.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ID_IDENTIFIER_GROUP">
            <summary>
            The name of the Id Identifier group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ID_IDENTIFIER">
            <summary>
            Captures an Id identifier.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.PSEUDO_IDENTIFIER_GROUP">
            <summary>
            The name of the Pseudo Identifier group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.PSEUDO_IDENTIFIER">
            <summary>
            Captures an identifier of pseudo-element or pseudo-class.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_STRING_VALUE_GROUP">
            <summary>
            The name of the string value group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_STRING">
            <summary>
            Matches strings.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_NAME_GROUP">
            <summary>
            The name of the Attribute name group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_NAME">
            <summary>
            Captures an Attribute name.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_OPERATOR_GROUP">
            <summary>
            The name of the Attribute operator group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_OPERATOR">
            <summary>
            Captures an Attribute operator.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_VALUE_GROUP">
            <summary>
            The name of the Attribute value group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_VALUE">
            <summary>
            Captures an Attribute value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_IDENTIFIER_GROUP">
            <summary>
            The name of the Attribute identifier group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ATTRIBUTE_IDENTIFIER">
            <summary>
            Captures an attribute identifier.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.AttributeIdentifierRegex">
            <summary>
            Regex that matches and parses attribute identifiers.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SIMPLE_SELECTOR_GROUP">
            <summary>
            The name of the Simple selector group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.REPEATABLE_IDENTIFIERS">
            <summary>
            Matches identifiers that may appear more than once in a selector. Matches also comments.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SIMPLE_SELECTOR">
            <summary>
            Captures a Simple selector (selectors without combinators).
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SimpleSelectorRegex">
            <summary>
            Regex for matching and parsing simple selectors.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SELECTOR_COMBINATOR_GROUP">
            <summary>
            The name of the Selector combinator group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SELECTOR_COMBINATOR">
            <summary>
            Captures a selector combinator. "+", ">" or a white space.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SELECTOR">
            <summary>
            Matches a selector.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SelectorRegex">
            <summary>
            Regex for matching selectors. Captures simple selectors and their combinators.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_STYLE_GROUP">
            <summary>
            The name of the weak style group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_STYLE">
            <summary>
            Matches ";" separated items. In this context, these should be styles.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WEAK_STYLES">
            <summary>
            Matches a collection of ";" separated items and captures them in "Style" group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WeakStylesRegex">
            <summary>
            Matches a collection of ";" separated items and captures them in "Style" group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.STYLE_KEY_GROUP">
            <summary>
            The name of the style key group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.STYLE_VALUE_GROUP">
            <summary>
            The name of the style value group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.STYLE_VALUE_WORD">
            <summary>
            Matches a different literals that may appear in a style value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.IS_IMPORTANT_GROUP">
            <summary>
            The name of the group that captures the "!important" statement.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.STYLE_VALUE">
            <summary>
            Matches a CSS style value. Knows if it is an !important value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.STYLE_KEY_VALUE">
            <summary>
            Matches style key and value in separate groups.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.StyleKeyValueRegex">
            <summary>
            Matches style key and value in separate groups.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CommentsOrStringsRegex">
            <summary>
            Matches comments and string literals. Used for removing comments.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.EncodedElementsRegex">
            <summary>
            Matches encoded elements. Used for removing encoded elements.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LENGTH_UNIT">
            <summary>
            Matches a measurement unit of length.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.DECIMAL_LITERAL">
            <summary>
            Matches a decimal number.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LENGTH_LITERAL_GROUP">
            <summary>
            The name of the Length literal group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LENGTH_LITERAL">
            <summary>
            Matches a length literal.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LengthLiteralRegex">
            <summary>
            Matches a length literal.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WIDTH_LITERAL_GROUP">
            <summary>
            The name of the width literal group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WIDTH_LITERAL">
            <summary>
            Matches a width literal.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.WidthLiteralRegex">
            <summary>
            Matches a width literal.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COLOR_LITERAL_GROUP">
            <summary>
            The name of the color literal group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COLOR_LITERAL">
            <summary>
            Matches a color literal. If the color is not in hex, rgb, rgba, hsl or hsla form then it will match any word.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ColorLiteralRegex">
            <summary>
            Matches a color literal. If the color is not in the form of #F0F0F0 or rgb(0, 0, 0) then it will match any word.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LINE_STYLE_LITERAL_GROUP">
            <summary>
            The name of the line style literal group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LINE_STYLE_LITERAL">
            <summary>
            Matches a line style literal.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.SimpleLineStyleRegex">
            <summary>
            Matches a line style literal.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LineStyleRegex">
            <summary>
            Matches a line style literal. It may have width, style or color.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COMMA_SEPARATED_ITEM_GROUP">
            <summary>
            The name of the comma-separated item group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COMMA_SEPARATED_ITEM">
            <summary>
            Matches comma-separated items.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CommaSeparatedItemsRegex">
            <summary>
            Matches comma-separated items.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.POSITION_X">
            <summary>
            Matches a position value for the X axis.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.POSITION_Y">
            <summary>
            Matches a position value for the Y axis.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_POSITION_GROUP">
            <summary>
            The name of the background position group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_POSITION">
            <summary>
            Matches a background position value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_REPEAT_GROUP">
            <summary>
            The name of the background repeat group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_REPEAT">
            <summary>
            Matches a background repeat value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_BOX_GROUP">
            <summary>
            The name of the background box group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_BOX">
            <summary>
            Matches a background origin or a background clip value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_ATTACHMENT_GROUP">
            <summary>
            The name of the background attachment group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_ATTACHMENT">
            <summary>
            Matches a background attachment value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_URL_GROUP">
            <summary>
            The name of the css url group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_URL">
            <summary>
            Matches a URL.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CssUrlRegex">
            <summary>
            Matches a URL.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_IMAGE_GROUP">
            <summary>
            The name of the background image group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.CSS_IMAGE">
            <summary>
            Matches a background image value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BACKGROUND_PROPERTY">
            <summary>
            Matches any of the background properties.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.BackgroundPropertyRegex">
            <summary>
            Matches any of the background properties.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LIST_STYLE_POSTITION_GROUP">
            <summary>
            The name of the list style position group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LIST_STYLE_POSITION">
            <summary>
            Matches a list-style-position value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LIST_STYLE_TYPE_GROUP">
            <summary>
            The name of the list style type group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LIST_STYLE_TYPE">
            <summary>
            Matches a list-style-type value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LIST_STYLE_PROPERTY">
            <summary>
            Matches one of the list-style properties.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ListStylePropertyRegex">
            <summary>
            Matches one of the list-style properties.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_STYLE_GROUP">
            <summary>
            The name of the font style group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_STYLE">
            <summary>
            Matches a font style value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_VARIANT_GROUP">
            <summary>
            The name of the font variant group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_VARIANT">
            <summary>
            Matches a font variant value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_WEIGHT_GROUP">
            <summary>
            The name of the font weight group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_WEIGHT">
            <summary>
            Matches a font weight value.
            Note: The values 100, 200... 900 are predefined values, not numbers. 250 will not be a valid value for font weight.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_SIZE_GROUP">
            <summary>
            The name of the font size group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_SIZE">
            <summary>
            Matches a font size.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LINE_HEIGHT_GROUP">
            <summary>
            The name of the line height group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.LINE_HEIGHT">
            <summary>
            Matches a line height value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_FAMILY_GROUP">
            <summary>
            The name of he font family group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_FAMILY">
            <summary>
            Matches a font family.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT_GROUP">
            <summary>
            The name of the font group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FONT">
            <summary>
            Matches a font style.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.FontRegex">
            <summary>
            Matches a font style.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COLUMN_WIDTH_GROUP">
            <summary>
            The name of the column width group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COLUMN_WIDTH">
            <summary>
            Matches a column width value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COLUMN_COUNT_GROUP">
            <summary>
            The name of the column count group.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.COLUMN_COUNT">
            <summary>
            Matches a column count value.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssGrammar.ColumnStyleValueRegex">
            <summary>
            Matches a column width or column count value.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawParser">
            <summary>
            Parses a CSS string to rules consisted only of strings.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawParser.Parse(System.String)">
            <summary>
            Adds the rules parsed in the markup.
            </summary>
            <param name="markup">The markup.</param>
            <returns>The raw rules parsed from the markup.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawParser.Parse(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the rules parsed in the markup.
            </summary>
            <param name="markup">The markup.</param>
            <param name="medias">Specific medias to which to add the rules.</param>
            <returns>The raw rules parsed from the markup.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawParser.ParseStyles(System.String)">
            <summary>
            Parses a semi-colon separated collection of styles.
            </summary>
            <param name="styles">The semi-colon collection of styles.</param>
            <returns>The styles.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawParser.RemoveComments(System.String)">
            <summary>
            Removes comments form a given markup.
            </summary>
            <param name="markup">The markup.</param>
            <returns>The markup without the comments.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule">
            <summary>
            Represents a CSS styling rule in a raw form.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule.MediaTypes">
            <summary>
            Gets an enumeration of media types to which this rule applies.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule.Selectors">
            <summary>
            Gets the selectors of this rule.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawRule.Styles">
            <summary>
            Gets the styles defined in this rule.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawStyle">
            <summary>
            Represents a CSS style in a raw form.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawStyle.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawStyle.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Raw.CssRawStyle.IsImportant">
            <summary>
            Gets or sets a value indicating whether this style is marked as !important.
            </summary>
            <value>
            	<c>true</c> if this style is marked as !important; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector">
            <summary>
            Represents a CSS selector.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.Specifity">
            <summary>
            Gets the specifity of this selector.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.Dependency">
            <summary>
            Gets or sets the dependency with another selector.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.TagIdentifier">
            <summary>
            Gets or sets the tag identifier.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.ClassIdentifiers">
            <summary>
            Gets the class identifiers.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.IdIdentifiers">
            <summary>
            Gets the id identifiers.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.PseudoIdentifiers">
            <summary>
            Gets the identifiers of pseudo-elements and pseudo-classes.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelector.AttributeIdentifiers">
            <summary>
            Gets the attribute identifiers.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorCombinator.Descendant">
            <summary>
            Matches any F element that is a descendant of an E element.
            </summary>
            <example>
            E F
            </example>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorCombinator.Child">
            <summary>
            Matches any F element that is a child of an element E.
            </summary>
            <example>
            E > F
            </example>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorCombinator.Adjacent">
            <summary>
            Matches any F element immediately preceded by a sibling element E.
            </summary>
            <example>
            E + F
            </example>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorCombinator.Preceded">
            <summary>
            Matches any F element preceded by a sibling element E.
            </summary>
            <example>
            E ~ F
            </example>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorDependency">
            <summary>
            Represents a dependency with a selector used for nesting.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorDependency.Operand">
            <summary>
            Gets or sets the operand selector.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.CssSelectorDependency.Operator">
            <summary>
            Gets or sets the operator, the type of connection.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeIdentifier">
            <summary>
            Represents an attribute identifier.
            [att=val]
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeIdentifier.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeIdentifier.Operator">
            <summary>
            Gets or sets the matching operator.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeIdentifier.Value">
            <summary>
            Gets or sets the value that needs to be matched.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator.NoOperator">
            <summary>
            [attr]
            Match when the element sets the "att" attribute, whatever the value of the attribute.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator.Exact">
            <summary>
            [att=val]
            Match when the element's "att" attribute value is exactly "val".
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator.ContainsWord">
            <summary>
            [att~=val]
            Represents an element with the att attribute whose value is a white space-separated list of 
            words, one of which is exactly "val". If "val" contains white space, it will never represent 
            anything (since the words are separated by spaces). If "val" is the empty string, it 
            will never represent anything either.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator.ExactOrFallowedByDash">
            <summary>
            [att|=val]
            Represents an element with the att attribute, its value either being exactly "val" or beginning 
            with "val" immediately followed by "-" (U+002D). This is primarily intended to allow language 
            subcode matches (e.g., the hreflang attribute on the a element in HTML) as described in BCP 47 
            or its successor.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator.BeginsWith">
            <summary>
            [att^=val]
            Match when the element's "att" attribute value begins with "val".
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator.EndsWith">
            <summary>
            [att$=val]
            Match when the element's "att" attribute value ends with "val".
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssAttributeOperator.Contains">
            <summary>
            [att*=val]
            Match when the element's "att" attribute value contains "val".
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier"/> class.
            </summary>
            <param name="identifier">The identifier value.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier.Value">
            <summary>
            Gets the value of the identifier.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier.Equals(Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier)">
            <summary>
            Determines whether the specified <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier"/> is equal to the current <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier"/>.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssCaseInsensitiveIdentifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssClassIdentifier">
            <summary>
            Represents an immutable class identifier of a CSS selector.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssClassIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssClassIdentifier"/> class.
            </summary>
            <param name="identifier">The identifier value.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssIdIdentifier">
            <summary>
            Represents an immutable class identifier of a CSS selector.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssIdIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssIdIdentifier"/> class.
            </summary>
            <param name="identifier">The identifier value.</param>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.All">
            <summary>
            Used for all media type devices.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Aural">
            <summary>
            Used for speech and sound synthesizers.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Braille">
            <summary>
            Used for braille tactile feedback devices.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Embossed">
            <summary>
            Used for paged braille printers.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Handheld">
            <summary>
            Used for small or handheld devices.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Print">
            <summary>
            Used for printers.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Projection">
            <summary>
            Used for projected presentations, like slides.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Screen">
            <summary>
            Used for computer screens.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.Tty">
            <summary>
            Used for media using a fixed-pitch character grid, like teletypes and terminals.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssMediaIdentifier.TV">
            <summary>
            Used for television-type devices.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssPseudoIdentifier">
            <summary>
            Represents an immutable pseudo-element or pseudo-class identifier of a CSS selector.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssPseudoIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssPseudoIdentifier"/> class.
            </summary>
            <param name="identifier">The identifier value.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssTagIdentifier">
            <summary>
            Represents an immutable tag identifier of a CSS selector.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssTagIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Selectors.Identifiers.CssTagIdentifier"/> class.
            </summary>
            <param name="identifier">The identifier value.</param>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.DefaultBackgroundColor">
            <summary>
            Specifies the default background color.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.DefaultBackgroundPosition">
            <summary>
            Specifies the default background position.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.DefaultBackgroundRepeat">
            <summary>
            Specifies the default background repeat.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.DefaultBackgroundOrigin">
            <summary>
            Specifies the default background origin.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.DefaultBackgroundClip">
            <summary>
            Specifies the default background clip.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.DefaultBackgroundImage">
            <summary>
            Specifies the default background image.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.DefaultBackgroundAttachment">
            <summary>
            Specifies the default background attachment.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.BackgroundColor">
            <summary>
            Gets or sets the color of the background. Note: In a collection of background properties 
            the color can be present only in the last properties instance.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.BackgroundPosition">
            <summary>
            Gets or sets the background position.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.BackgroundRepeat">
            <summary>
            Gets or sets the background repeat.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.BackgroundOrigin">
            <summary>
            Gets or sets the background origin.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.BackgroundClip">
            <summary>
            Gets or sets the background clip.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.BackgroundAttachment">
            <summary>
            Gets or sets the background attachment.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundProperties.ToString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.Backgrounds">
            <summary>
            Gets the properties of the background.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.BackgroundPosition">
            <summary>
            Gets or sets the background position.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.BackgroundRepeat">
            <summary>
            Gets or sets the background repeat.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.BackgroundOrigin">
            <summary>
            Gets or sets the background origin.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.BackgroundClip">
            <summary>
            Gets or sets the background clip.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.BackgroundAttachment">
            <summary>
            Gets or sets the background attachment.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBackgroundStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderColorStyle.Top">
            <summary>
            Gets or sets the top.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderColorStyle.Right">
            <summary>
            Gets or sets the right.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderColorStyle.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderColorStyle.Left">
            <summary>
            Gets or sets the left.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderColorStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderColorStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderColorStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderLineStyle.Top">
            <summary>
            Gets or sets the top.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderLineStyle.Right">
            <summary>
            Gets or sets the right.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderLineStyle.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderLineStyle.Left">
            <summary>
            Gets or sets the left.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderLineStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderLineStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderLineStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderStyle.LineColor">
            <summary>
            Gets or sets the string representation of the border color.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderStyle.LineStyle">
            <summary>
            Gets or sets the string representation of the border line style (dotted, solid etc.).
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderStyle.LineWidth">
            <summary>
            Gets or sets the string representation of the border width (5 px, thin, thick, etc.).
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderWidthStyle.Top">
            <summary>
            Gets or sets the top.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderWidthStyle.Right">
            <summary>
            Gets or sets the right.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderWidthStyle.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderWidthStyle.Left">
            <summary>
            Gets or sets the left.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderWidthStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderWidthStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssBorderWidthStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssColumnsStyle.ColumnWidth">
            <summary>
            Gets or sets the width of the column.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssColumnsStyle.ColumnCount">
            <summary>
            Gets or sets the height of the column.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssColumnsStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssColumnsStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssColumnsStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.FontVariant">
            <summary>
            Gets or sets the font variant.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.LineHeight">
            <summary>
            Gets or sets the height of the line.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.FontFamily">
            <summary>
            Gets or sets the font family. It is taken literally. 
            You should add quotes if needed, they will not be added automatically.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.Extension">
            <summary>
            Gets the extension portion of the property name ("-moz-", "-webkit-" etc.).
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFontStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFourSidedLengthStyle.Top">
            <summary>
            Gets or sets the top.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFourSidedLengthStyle.Right">
            <summary>
            Gets or sets the right.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFourSidedLengthStyle.Bottom">
            <summary>
            Gets or sets the bottom.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFourSidedLengthStyle.Left">
            <summary>
            Gets or sets the left.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFourSidedLengthStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFourSidedLengthStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssFourSidedLengthStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle">
            <summary>
            A base class for all CSS styles.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.PropertyName">
            <summary>
            Gets or sets the name of the style property.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.ValueAsString">
            <summary>
            Gets or sets the value as string.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.IsImportant">
            <summary>
            Gets or sets a value indicating whether this style is marked as important.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.Specifity">
            <summary>
            Gets or sets the specifity of with which this style was defined.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.CoveredStyles">
            <summary>
            Returns the names of the styles that are covered by this one. Usually it just covers itself but, 
            for example, "outline" covers also "outline-width", "outline-color" and "outline-style".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <summary>
            Returns an enumerable of styles to be added that have the specified style and current instance merged.
            </summary>
            <param name="style">The specified style.</param>
            <param name="overrideExistingStyles">Indicated whether the specified style is of higher priority than the current instance.</param>
            <returns>An enumerable of styles to be added or NULL if the computed collection should remain unchanged.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle.ToString">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssLineStyle.LineColor">
            <summary>
            Gets or sets the string representation of the line color.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssLineStyle.LineStyle">
            <summary>
            Gets or sets the string representation of the line style (dotted, solid etc.).
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssLineStyle.LineWidth">
            <summary>
            Gets or sets the string representation of the line width (5 px, thin, thick, etc.).
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssLineStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssLineStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssLineStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssListStyle.ListStyleImage">
            <summary>
            Gets or sets the list style image.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssListStyle.ListStylePosition">
            <summary>
            Gets or sets the list style position.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssListStyle.ListStyleType">
            <summary>
            Gets or sets the type of the list style.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssListStyle.ValueAsString">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssListStyle.CoveredStyles">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssListStyle.MergeWith(Telerik.Sitefinity.Utilities.CssParsing.Styles.CssGenericStyle,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.CssParsing.Styles.CssStyleFactory.CreateCssStyle(System.String,System.String,System.Boolean)">
            <summary>
            Creates the CSS style. Will not initialize "Specifity". You should set it when the style is in context of a specific selector.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="isImportant">Whether the style is marked as important.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.DateTimeUtil">
            <summary>
            Contains helper methods for DateTime operations.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.DateTimeUtil.AddTimeSpanSafe(System.DateTime,System.TimeSpan)">
            <summary>
            Adds a time span value to a date time in a safe from overflow manner.
            </summary>
            <param name="time">The date time to add to.</param>
            <param name="timespan">The time span to add.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.DateTimeUtil.GetMaxValue(System.DateTimeKind)">
            <summary>
            Gets the maximum DateTime value of the specified kind.
            </summary>
            <param name="kind">The DateTime kind.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.DateTimeUtil.GetMinValue(System.DateTimeKind)">
            <summary>
            Gets the minimum DateTime value of the specified kind.
            </summary>
            <param name="kind">The DateTime kind.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Dummy">
            <summary>
            Dummy class for temporary consuming parameters to avoid Code Analysis warnings.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Extensions">
            <summary>
            Extension Methods
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value corresponding to the given <paramref name="key"/> in an <see cref="T:System.Collections.IDictionary"/>,
            or returns the default value for the <typeparamref name="TValue"/> type, if the <paramref name="key"/>
            is not found or even when the <paramref name="dictionary"/> is <c>null</c>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="dictionary">The dictionary to look in.</param>
            <param name="key">The key to look up.</param>
            <returns>The value corresponding to <paramref name="key"/> or the default value for the <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value corresponding to the given <paramref name="key"/> in an <see cref="T:System.Collections.IDictionary"/>,
            or the <param name="defaultValue"/>, if the <paramref name="key"/>
            is not found or even when the <paramref name="dictionary"/> is <c>null</c>.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="dictionary">The dictionary to look in.</param>
            <param name="key">The key to look up.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value corresponding to <paramref name="key"/> or the <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a <see cref="!:NameValueColleciton"/> to an <see cref="!:IDictionary&lt;string,string&gt;"/>.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts an <see cref="!:IDictionary&lt;string,string&gt;"/> to a <see cref="!:NameValueColleciton"/>.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.Lookup``1(System.Exception)">
            <summary>
            Tries to find an exception of type <typeparamref name="TException"/> in the <c>InnerException</c> chain of an exception <paramref name="ex"/>.
            </summary>
            <typeparam name="TException">The type of the exception that is expected.</typeparam>
            <param name="ex">The exception to be examined.</param>
            <returns>The found exception of type <typeparamref name="TException"/>, if any; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.OnBatchesOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns an enumerator of batches of given size <c>IEnumerable&lt;T[]&gt;</c> over an underlying <see cref="!:IEnumerable[T]"/>.
            </summary>
            <typeparam name="T">The underlying type of the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">An <see cref="!:IEnumerable[T]"/> to iterate over.</param>
            <param name="batchSize">Objects count, included in a batch.</param>
            <returns>An enumerator of batches.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.SliceArray(System.Guid[],System.Int32)">
            <summary>
            Slices the array.
            </summary>
            <param name="inArray">The array to slice</param>
            <param name="sliceSize">Size of the slice.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.OrderByDependency``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Performs a dependency sorting (topological sort - http://en.wikipedia.org/wiki/Topological_sorting),
            returning the an enumerable of the keys in such order, that no key precedes the keys that it depends on.
            </summary>
            <typeparam name="TSource">The type of the items which have dependencies on each other.</typeparam>
            <typeparam name="TKey">The type of item's key.</typeparam>
            <param name="source">An enumerable of interdependent items.</param>
            <param name="keySelector">A function which returns the key of an item.</param>
            <param name="dependencyKeysSelector">A function which returns the keys of the items on which a given item depends.</param>
            <returns>The keys in such order, that no key precedes the keys that it depends on</returns>
            <exception cref="T:System.ArgumentException">
            If the count of the returned items is not equal to the count of the input items,
            which most probably is an indication that the dependency graph contains cycles.
            </exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.IsCollection(System.Object)">
            <summary>
            Determines whether the specified object is collection.
            </summary>
            <param name="object">The object.</param>
            <returns>
            	<c>true</c> if the specified o is collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.IsCollection(System.Type)">
            <summary>
            Determines whether the specified type is collection.
            </summary>
            <param name="type">The type to be checked.</param>
            <returns>
            	<c>true</c> if the specified o is collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.IsList(System.Type)">
            <summary>
            Determines whether an instance of the current <see cref="T:System.Collections.IList"/>
            can be assigned from an instance of the <see cref="T:System.Type"/>
            </summary>
            <param name="type">The type to be checked.</param>
            <returns>
            	<c>true</c> if the specified o is list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.IsDictionary(System.Type)">
            <summary>
            Determines whether an instance of the current <see cref="T:System.Collections.IDictionary"/>
            can be assigned from an instance of the <see cref="T:System.Type"/>
            </summary>
            <param name="type">The type to be checked.</param>
            <returns>
            	<c>true</c> if the specified o is list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.Convert``2(System.Collections.Generic.IEnumerable{``0},Telerik.Sitefinity.Utilities.ConvertItem{``0,``1})">
            <summary>
            Converts the items in an enumeration from one type to another.
            </summary>
            <typeparam name="TFrom">The type to convert from.</typeparam>
            <typeparam name="TTo">The type to convert to.</typeparam>
            <param name="item">The item to convert.</param>
            <param name="enumerable">The enumerable to convert.</param>
            <param name="convert">A delegate that performs the conversion.</param>
            <returns>An enumeration with converted items.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.StripHtmlTags(System.String)">
            <summary>
            Removes all html tags from a string of html
            </summary>
            <param name="sourceHtml">A string of html that has correctly closed html tags.</param>
            <returns>Text from html with all of the html tags removed.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.Yield``1(``0)">
            <summary>
            Creates a new sequence from a single value.
            </summary>
            <typeparam name="TResult">The type of the item.</typeparam>
            <param name="item">The item.</param>
            <returns>The result sequence.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Extensions.MoveNextWithTimeout(System.Collections.IEnumerator,System.Int32)">
            <summary>
            Advances the enumerator to the next element of the collection. Throws exception if it can't advance before timeout.
            </summary>
            <param name="enumerator">The enumerator.</param>
            <param name="timeoutMs">The timeout in milliseconds. Default is 20000ms (20s).</param>
            <returns>Returns false if there is no next element.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.FileExtensionList">
            <summary>
            Handles a comma separated list of file extensions.
            Leading dots, if any, are handled correctly.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.FileExtensionList.ToArray(System.String,System.Boolean)">
            <summary>
            Parses the list and returns an array.
            </summary>
            <param name="extensions">The string to be parsed.</param>
            <param name="includeLeadingDots">Whether to include leading dots in the result list.</param>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.FileExtensionList.RegexPattern">
            <summary>
            A regular expression pattern, which can be used, among other things, for validation.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.FileExtensionList.Regex">
            <summary>
            A compiled regular expression, which can be used, among other things, for validation.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Guard.SitefinityGuard">
            <summary>
            Argument guard methods
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Guard.SitefinityGuard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the given argument is null.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if argument value is null.</exception>
            <param name="argumentValue">Argument value to test.</param>
            <param name="argumentName">Name of the argument being tested.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Guard.SitefinityGuard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the tested string argument is null or the empty string.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if argument value is null or empty</exception>
            <param name="argumentValue">Argument value to check.</param>
            <param name="argumentName">Name of argument being checked.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Guard.SitefinityGuard.ArgumentNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the tested string argument is null, empty string or white space.
            </summary>s
            <exception cref="T:System.ArgumentException">Thrown if argument value is null, empty string or white space.</exception>
            <param name="argumentValue">Argument value to check.</param>
            <param name="argumentName">Name of argument being checked.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Guard.SitefinityGuard.ArgumentNotEmpty(System.Guid,System.String)">
            <summary>
            Throws an exception if the tested guid argument is empty guid.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if argument value is empty guid.</exception>
            <param name="argumentValue">Argument value to check.</param>
            <param name="argumentName">Name of argument being checked.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString">
            <summary>
            Class for fast dynamic string building - it is faster than StringBuilder
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.Text">
            <summary>
            Finalized text will be available in this string
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.TEXT_CAPACITY">
            <summary>
            CRITICAL: that much capacity will be allocated (once) for this object -- for performance reasons
            we do NOT have range checks because we make reasonably safe assumption that accumulated string will
            fit into the buffer. If you have very abnormal strings then you should increase buffer accordingly.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="str">Initial string</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.Clear">
            <summary>
            Resets object to zero length string
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.SetEncoding(System.Text.Encoding)">
            <summary>
            Sets encoding to be used for conversion of binary data into string
            </summary>
            <param name="p_oEnc">Encoding object</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.Append(System.Char)">
            <summary>
            Appends proper char with smart handling of Unicode chars
            </summary>
            <param name="ch">Char to append</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.SetToString">
            <summary>
            Creates string from buffer using set encoder
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.DynaString.SetToStringASCII">
            <summary>
            Creates string from buffer using default encoder
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash">
            <summary>
            FastHash: class provides fast look ups at the expense of memory (at least 128k per object).
            Its designed primarily for those hashes where majority of lookups are unsuccessful 
            (ie object is not present)
            
            Status of this work is EXPERIMENTAL, do not make any untested assumptions.
            
            History:	15/12/06 Added range check in GetXY
            			sometime in 2005: initial imlpementation
            
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.MAX_CHARS">
            <summary>
            Maximum number of chars to be taken into account
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.MAX_KEYS">
            <summary>
            Maximum number of keys to be stored
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.MULTIPLE_KEYS">
            <summary>
            Value indicating there are multiple keys stored in a given position
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.oHash">
            <summary>
            Hash that will contain keys and will be used at the last resort as looksup are too slow
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.iMinLen">
            <summary>
            Minimum key length 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.iMaxLen">
            <summary>
            Maximum key length
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.usChars">
            <summary>
            Array in which we will keep char hints
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.sKeys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.iValues">
            <summary>
            Values of keys
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.usCount">
            <summary>
            Number of keys stored
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.Keys">
            <summary>
            Gets keys in this hash
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.Add(System.String)">
            <summary>
            Adds key to the fast hash
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.Add(System.String,System.Object)">
            <summary>
            Adds key and its value to the fast hash
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.GetXY(System.String,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.Contains(System.String)">
            <summary>
            Checks if given key is present in the hash
            </summary>
            <param name="key">Key</param>
            <returns>True if key is present</returns>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.Item(System.String)">
            <summary>
            Access to values via indexer
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.GetValue(System.String)">
            <summary>
            Returns value associated with the key or null if key not present
            </summary>
            <param name="key">Key</param>
            <returns>Null or object convertable to integer as value</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.GetLikelyPresentValue(System.String)">
            <summary>
            Returns value of a key that is VERY likely to be present - this avoids doing some checks that
            are most likely to be pointless thus making overall faster function
            </summary>
            <param name="key">Key</param>
            <returns>Null if no value or value itself</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.GetLikelyPresentValue(System.Byte,System.Byte)">
            <summary>
            Returns value for likely present keys using first chars (byte)
            </summary>
            <param name="x">Byte 1 denoting char 1</param>
            <param name="y">Byte 2 denoting char 2 (0 if not present)</param>
            <returns>Non-null value if it was found, or null if full search for key is required</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.PossiblyContains(System.Char,System.Char)">
            <summary>
            Quickly checks if given chars POSSIBLY refer to a stored key.
            </summary>
            <param name="char1">Char 1</param>
            <param name="char2">Char 2</param>
            <returns>False is string is DEFINATELY NOT present, or true if it MAY be present</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.FastHash.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize">
            <summary>
            Font sizes as described by W3C: http://www.w3.org/TR/REC-CSS2/fonts.html#propdef-font-size
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.SmallXX">
            <summary>
            Extra extra small size
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.SmallX">
            <summary>
            Extra small size
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.Small">
            <summary>
            Small size
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.Medium">
            <summary>
            Medium size
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.Large">
            <summary>
            Large size
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.LargeX">
            <summary>
            Extra large size
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.LargeXX">
            <summary>
            Extra extra large size
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.FontSize.Unknown">
            <summary>
            Unknown size
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunkType">
            <summary>
            Type of parsed HTML chunk (token), each non-null returned chunk from HTMLparser will have oType set to 
            one of these values
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunkType.Text">
            <summary>
            Text data from HTML
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunkType.OpenTag">
            <summary>
            Open tag, possibly with attributes
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunkType.CloseTag">
            <summary>
            Closed tag (it may still have attributes)
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunkType.Comment">
            <summary>
            Comment tag (<!-- -->)depending on HTMLparser boolean flags you may have:
            a) nothing to oHTML variable - for faster performance, call SetRawHTML function in parser
            b) data BETWEEN tags (but not including comment tags themselves) - DEFAULT
            c) complete RAW HTML representing data between tags and tags themselves (same as you get in a) when
            you call SetRawHTML function)
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunkType.Script">
            <summary>
            Script tag (<!-- -->) depending on HTMLparser boolean flags
            a) nothing to oHTML variable - for faster performance, call SetRawHTML function in parser
            b) data BETWEEN tags (but not including comment tags themselves) - DEFAULT
            c) complete RAW HTML representing data between tags and tags themselves (same as you get in a) when
            you call SetRawHTML function)
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk">
            <summary>
            Parsed HTML token that is either text, comment, script, open or closed tag as indicated by the oType variable.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.TEXT_CAPACITY">
            <summary>
            Maximum default capacity of buffer that will keep data
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.MAX_PARAMS">
            <summary>
            Maximum number of parameters in a tag - should be high enough to fit most sensible cases
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.Type">
            <summary>
            Chunk type showing whether its text, open or close tag, comments or script.
            WARNING: if type is comments or script then you have to manually call Finalise(); method
            in order to have actual text of comments/scripts in oHTML variable
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.HashMode">
            <summary>
            If true then tag params will be kept in a hash rather than in a fixed size arrays. 
            This will be slow down parsing, but make it easier to use.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.Html">
            <summary>
            For TAGS: it stores raw HTML that was parsed to generate thus chunk will be here UNLESS
            HTMLparser was configured not to store it there as it can improve performance
            <p>
            For TEXT or COMMENTS: actual text or comments - you MUST call Finalise(); first.
            </p>
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.ChunkOffset">
            <summary>
            Offset in bHTML data array at which this chunk starts
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.ChunkLength">
            <summary>
            Length of the chunk in bHTML data array
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.TagName">
            <summary>
            If its open/close tag type then this is where lowercased Tag will be kept
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.IsClosure">
            <summary>
            If true then it must be closed tag
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.IsEndClosure">
            <summary>
            If true then it must be closed tag and closure sign / was at the END of tag, ie this is a SOLO
            tag 
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.IsComment">
            <summary>
            If true then it must be comments tag
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.HasEntities">
            <summary>
            True if entities were present (and transformed) in the original HTML
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.IsLtEntity">
            <summary>
            Set to true if &lt; entity (tag start) was found 
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.AttributesMap">
            <summary>
            Hashtable with tag parameters: keys are param names and values are param values.
            ONLY used if bHashMode is set to TRUE.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.ParamsCount">
            <summary>
            Number of parameters and values stored in sParams array, OR in oParams hashtable if
            bHashMode is true
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.Attributes">
            <summary>
            Param names will be stored here - actual number is in iParams.
            ONLY used if bHashMode is set to FALSE.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.Values">
            <summary>
            Param values will be stored here - actual number is in iParams.
            ONLY used if bHashMode is set to FALSE.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.ParamChars">
            <summary>
            Character used to quote param's value: it is taken actually from parsed HTML
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.Encoding">
            <summary>
            Encoder to be used for conversion of binary data into strings, Encoding.Default is used by default,
            but it can be changed if top level user of the parser detects that encoding was different
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.ConvertParamsToHash">
            <summary>
            This function will convert parameters stored in sParams/sValues arrays into oParams hash
            Useful if generally parsing is done when bHashMode is FALSE. Hash operations are not the fastest, so
            its best not to use this function.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.SetEncoding(System.Text.Encoding)">
            <summary>
            Sets encoding to be used for conversion of binary data into string
            </summary>
            <param name="encoding">Encoding object</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.GenerateHtml">
            <summary>
            Generates HTML based on current chunk's data 
            Note: this is not a high performance method and if you want ORIGINAL HTML that was parsed to create
            this chunk then use relevant HTMLparser method to obtain such HTML
            </summary>
            <returns>HTML equivalent of this chunk</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.GetParamValue(System.String)">
            <summary>
            Returns value of a parameter
            </summary>
            <param name="param">Parameter</param>
            <returns>Parameter value or empty string</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.HasAttribute(System.String)">
            <summary>
            Returns true if the current chuck has attribute with the specified name, otherwise returns false.
            </summary>
            <param name="name">The name of the attribute to check.</param>
            <returns>A Boolean value indicating if the current chuck has attribute with the specified name.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.SetAttribute(System.String,System.String)">
            <summary>
            Sets the specified attribute with the provided value.
            </summary>
            <param name="name">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.RemoveAttribute(System.String)">
            <summary>
            Remove an attribute with the specified name from the current chunk if the attribute exists.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.GenerateParamsHtml">
            <summary>
            Generates HTML for params in this chunk
            </summary>
            <returns>String with HTML corresponding to params</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.Dispose">
            <summary>
            Desposes the instance.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.GenerateParamHtml(System.String,System.String,System.Char)">
            <summary>
            Generates HTML for param/value pair
            </summary>
            <param name="param">Param</param>
            <param name="value">Value (empty if not specified)</param>
            <param name="paramChar">The character for enclosing the value.</param>
            <returns>String with HTML</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.MakeSafeParamValue(System.String,System.Char)">
            <summary>
            Makes parameter value safe to be used in param - this will check for any conflicting quote chars,
            but not full entity-encoding
            </summary>
            <param name="line">Line of text</param>
            <param name="quoteChar">Quote char used in param - any such chars in text will be entity-encoded</param>
            <returns>Safe text to be used as param's value</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.AddAttribute(System.String,System.String)">
            <summary>
            Add attribute to open tag.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.AddParameter(System.String,System.String,System.Byte)">
            <summary>
            Adds tag parameter to the chunk
            </summary>
            <param name="param">Parameter name (ie color)</param>
            <param name="value">Value of the parameter (ie white)</param>
            <param name="paramChar">Specifies the character for enclosing the value.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.Clear">
            <summary>
            Clears chunk preparing it for 
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk.#ctor(System.Boolean)">
            <summary>
            Initialises new HTMLchunk
            </summary>
            <param name="hashMode">Sets</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities">
            <summary>
            Implements parsing of entities
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.EntityReverseLookup">
            <summary>
            Array to provide reverse lookup for entities
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.IsMiniEntities">
            <summary>
            If true then only minimal set of entities will be parsed, everything else including numbers based
            entities will be returned as is. This is useful for when HTML content needs to be extracted with subsequent parsing, in this case resolution of entities will be a problem
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.IsDecodeEntities">
            <summary>
            If false then HTML entities (like "nbsp") will not be decoded
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.CheckForEntity(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            This function will be called when ampersand is found, and it will
            peek forward to check if its entity, should there be a success
            indicated by non-zero returned, the pointer will be left at the new byte
            after entity
            </summary>
            <returns>Char (not byte) that corresponds to the entity or 0 if it was not entity</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.DecodeEntities(System.String)">
            <summary>
            This function will decode any entities found in a string - not fast!
            </summary>
            <returns>Possibly decoded string</returns>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.iDecMultipliers">
            <summary>
            Multipliers for base 10 
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.ParseUInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses an unsigned integer number from byte buffer
            </summary>
            <param name="bBuf">Buffer to parse from</param>
            <param name="iFrom">Start parsing from this point</param>
            <param name="iLength">Length of data to parse</param>
            <returns>Unsigned integer number</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.InitEntities(System.Int32@,System.Int32@,System.String[]@)">
            <summary>
            Initializes list of entities
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.ChangeToEntities(System.String,System.Int32)">
            <summary>
            Parses line and changes known entiry characters into proper HTML entiries
            </summary>
            <param name="sLine">Line of text</param>
            <param name="iFrom">Char from which scanning should start</param>
            <returns>Line of text with proper HTML entities</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities.InitMiniEntities">
            <summary>
            Inits mini-entities mode: only "nbsp" will be converted into space, all other entities 
            will be left as is
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics">
             <summary>
             This class will control HTML tag heuristics that will allow faster matching of tags
             to avoid long cycles as well as creation of same strings over and over again.
             
             This is effectively a fancy hash lookup table with attributes being hashed in context of tag
             </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.MAX_STRINGS">
            <summary>
            Maximum number of strings allowed to be set (all lower-cased)
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.MAX_CHARS">
            <summary>
            Maximum number of chars to be taken into account
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.chars">
            <summary>
            Array in which we will keep char hints to quickly match	ID (if non-zero) of tag
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.strings">
            <summary>
            Strings used, once matched they will be returned to avoid creation of a brand new string
            and all associated costs with it
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.tagData">
            <summary>
            Binary data representing tag strings is here: case sensitive: lower case for even even value, and odd for each odd
            for the same string
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.addedTags">
            <summary>
            List of added tags to avoid dups
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.attributes">
            <summary>
            Hash that will contain single char mapping hash
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.attrData">
            <summary>
            Binary data representing attribute strings is here: case sensitive: lower case for even even value, and odd for each odd
            for the same string
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.addedAttributes">
            <summary>
            List of added attributes to avoid dups.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.allTwoCharStrings">
            <summary>
            This array will contain all double char strings 
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.AddTag(System.String,System.String)">
            <summary>
            Adds tag to list of tracked tags (don't add too many, if you have got multiple same first
            2 chars then duplicates won't be added, so make sure the first added tags are the MOST LIKELY to be found)
            </summary>
            <param name="tag">Tag: strictly ASCII only</param>
            <param name="attributeNames">Comma delimited list of attributed</param>
            <returns>True if tag was added, false otherwise (it may already be added, or leads to hash clash)</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.GetString(System.Int32)">
            <summary>
            Returns string for ID returned by GetMatch
            </summary>
            <param name="id">ID</param>
            <returns>string</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.GetTwoCharString(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="char1"></param>
            <param name="char2"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.GetStringData(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.MatchTag(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="char1"></param>
            <param name="char2"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.MatchAttribute(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="tagId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.GetAttributeData(System.Int32)">
            <summary>
            
            </summary>
            <param name="attributeId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.GetAttribute(System.Int32)">
            <summary>
            
            </summary>
            <param name="attributeId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics.Dispose">
            <summary>
            Disposes of resources
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser">
            <summary>
            Allows to parse HTML by splitting it into small token (HTMLchunks) such as tags, text, comments etc.
            
            Do NOT create multiple instances of this class - REUSE single instance
            Do NOT call same instance from multiple threads - it is NOT thread safe
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.#cctor">
            <summary>
            Entities manager
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser"/> class.
            </summary>
            <param name="html">The HTML.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.IsDecodeEntities">
            <summary>
            If false (default) then HTML entities (like none breaking space) will not be decoded, otherwise they will
            be decoded: this should be set if you deal with unicode data that takes advantage of entities
            and in cases when you need to deal with final string representation
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.EnableHeuristics">
            <summary>
            If true (default) then heuristics engine will be used to match tags and attributes quicker, it is
            possible to add new tags to it.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.ThrowExceptionOnEncodingSetFailure">
            <summary>
            If true then exception will be thrown in case of inability to set encoding taken
            from HTML - this is possible if encoding was incorrect or not supported, this would lead
            to abort in processing. Default behavior is to use Default encoding that should keep symbols as
            is - most likely garbage looking things if encoding was not supported.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.KeepRawHTML">
            <summary>
            If true (default: false) then parsed tag chunks will contain raw HTML, otherwise only comments will have it set
            <p>
            Performance hint: keep it as false, you can always get to original HTML as each chunk contains
            offset from which parsing started and finished, thus allowing to set exact HTML that was parsed
            </p>
            </summary>
            <exclude/>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.AutoKeepComments">
            <summary>
            If true (default) then HTML for comments tags themselves AND between them will be set to oHTML variable, otherwise it will be empty
            but you can always set it later 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.AutoKeepScripts">
            <summary>
            If true (default: false) then HTML for script tags themselves AND between them will be set to oHTML variable, otherwise it will be empty
            but you can always set it later
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.AutoExtractBetweenTagsOnly">
            <summary>
            If true (and either bAutoKeepComments or bAutoKeepScripts is true), then oHTML will be set
            to data BETWEEN tags excluding those tags themselves, as otherwise FULL HTML will be set, ie:
            '<!-- comments -->' but if this is set to true then only ' comments ' will be returned
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.AutoMarkClosedTagsWithParamsAsOpen">
            <summary>
            Long winded name... by default if tag is closed BUT it has got parameters then we will consider it
            open tag, this is not right for proper XML parsing
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.CompressWhiteSpaceBeforeTag">
            <summary>
            If true (default), then all whitespace before TAG starts will be compressed to single space char (32 or 0x20)
            this makes parser run a bit faster, if you need exact whitespace before tags then change this flag to FALSE
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.CharEncoding">
            <summary>
            Encoding used to convert binary data into string
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.SetChunkHashMode(System.Boolean)">
            <summary>
            Sets chunk param hash mode
            </summary>
            <param name="hashMode">If true then tag's params will be kept in Chunk's hashtable (slower), otherwise kept in arrays (sParams/sValues)</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.Dispose">
            <summary>
            Desposes the parser.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.SetRawHtml(Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk)">
            <summary>
            Sets oHTML variable in a chunk to the raw HTML that was parsed for that chunk.
            </summary>
            <param name="htmlChunk">Chunk returned by ParseNext function, it must belong to the same HTMLparser that
            was initiated with the same HTML data that this chunk belongs to</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.Close">
            <summary>
            Closes object and releases all allocated resources
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.SetEncoding(System.Text.Encoding)">
            <summary>
            Sets encoding 
            </summary>
            <param name="encoding">Encoding object</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.SetEncoding(System.String)">
            <summary>
            Sets current encoding in format used in HTTP headers and HTML META tags
            </summary>
            <param name="charSet">charSet as </param>
            <returns>True if encoding was set, false otherwise (in which case Default encoding will be used)</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.GetCharSet(System.String)">
            <summary>
            Retrieves charSet information from format used in HTTP headers and META descriptions
            </summary>
            <param name="sData">Data to find charSet info from</param>
            <returns>charSet</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.ChangeToEntities(System.String)">
            <summary>
            Parses line and changes known entity characters into proper HTML entities
            </summary>
            <param name="line">Line of text</param>
            <returns>Line of text with proper HTML entities</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.Init(System.String)">
            <summary>
            Initializes parses with HTML to be parsed from provided string
            </summary>
            <param name="html">String with HTML in it</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.Init(System.Byte[])">
            <summary>
            Initializes the parser with the provided HTML.
            </summary>
            <param name="html">Encoded HTML data</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.Init(System.Byte[],System.Text.Encoding)">
            <summary>
            Initializes parses with HTML to be parsed from provided data buffer: this is best in terms of
            correctness of parsing of various encodings that can be used in HTML
            </summary>
            <param name="html">Data buffer with HTML in it</param>
            <param name="encoding">Character encoding</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.CleanUp">
            <summary>
            Cleans up parser in preparation for next parsing
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.Reset">
            <summary>
            Resets current parsed data to start
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.IsBiggerFont(Telerik.Sitefinity.Utilities.HtmlParsing.FontSize,Telerik.Sitefinity.Utilities.HtmlParsing.FontSize)">
            <summary>
            Checks if first font is bigger than the second
            </summary>
            <param name="font1">Font #1</param>
            <param name="font2">Font #2</param>
            <returns>True if Font #1 bigger than the second, false otherwise</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.IsEqualOrBiggerFont(Telerik.Sitefinity.Utilities.HtmlParsing.FontSize,Telerik.Sitefinity.Utilities.HtmlParsing.FontSize)">
            <summary>
            Checks if first font is equal or bigger than the second
            </summary>
            <param name="font1">Font #1</param>
            <param name="font2">Font #2</param>
            <returns>True if Font #1 equal or bigger than the second, false otherwise</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.ParseFontSize(System.String,Telerik.Sitefinity.Utilities.HtmlParsing.FontSize)">
            <summary>
            Parses font's tag size param 
            </summary>
            <param name="size">String value of the size param</param>
            <param name="curSize"></param>
            <returns>Relative size of the font size or Unknown if it was not determined</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.ParseNextTag">
            <summary>
            Returns next tag or null if end of document, text will be ignored completely
            </summary>
            <returns>Tag chunk or null</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.ParseNext">
            <summary>
            Parses next chunk and returns it with 
            </summary>
            <returns>HTMLchunk or null if end of data reached</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.GetNextTag">
            <summary>
            Internally parses tag and returns it from point when open symbol was found
            </summary>
            <returns>Chunk</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.CalculateWidth(System.String,System.Int32,System.Boolean@)">
            <summary>
            Parses WIDTH param and calculates width
            </summary>
            <param name="width">WIDTH param from tag</param>
            <param name="availWidth">Currently available width for relative calculations, if negative width will be returned as is</param>
            <param name="relative">Flag that will be set to true if width was relative</param>
            <returns>Width in pixels</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.DecodeEntities(System.String)">
            <summary>
            This function will decode any entities found in a string - not fast!
            </summary>
            <param name="data"></param>
            <returns>Possibly decoded string</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.LoadFromFile(System.String)">
            <summary>
            Loads HTML from file
            </summary>
            <param name="fileName">Full filename</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser.HandleMetaEncoding(Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser,Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk,System.Boolean@)">
            <summary>
            Handles META tags that set page encoding
            </summary>
            <param name="htmlParser">HTML parser object that is used for parsing</param>
            <param name="chunk">Parsed chunk that should contain tag META</param>
            <param name="encodingSet">Your own flag that shows whether encoding was already set or not, if set
            once then it should not be changed - this is the logic applied by major browsers</param>
            <returns>True if this was META tag setting Encoding, false otherwise</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser">
            <summary>
            Internal class used to parse tag itself from the point it was found in HTML
            The main reason for this class is to split very long HTMLparser file into parts that are reasonably
            self-contained
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.MIN_DATA_SIZE_FOR_HEURISTICS">
            <summary>
            Minimum data size for heuristics engine to kick in
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.maxHeuDataLength">
            <summary>
            Max data length for heuristical checks
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.tagCharTypes">
            <summary>
            Tag char types lookup table: allows one off lookup to determine if char used in tag is acceptable
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.enableHeuristics">
            <summary>
            If true then heuristics engine will be used to match tags quicker
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.Init(Telerik.Sitefinity.Utilities.HtmlParsing.HtmlParser,Telerik.Sitefinity.Utilities.HtmlParsing.HtmlChunk,Telerik.Sitefinity.Utilities.HtmlParsing.DynaString,System.Byte[],System.Int32,Telerik.Sitefinity.Utilities.HtmlParsing.HtmlEntities,Telerik.Sitefinity.Utilities.HtmlParsing.HtmlHeuristics)">
            <summary>
            Inits tag parser
            </summary>
            <param name="parser">Html parser.</param>
            <param name="chunk">Html chunk.</param>
            <param name="text"></param>
            <param name="html"></param>
            <param name="length"></param>
            <param name="entities"></param>
            <param name="heuristics"></param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.CleanUp">
            <summary>
            Cleans up tag parser
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.ParseTag(System.Int32@)">
            <summary>
            Internal: parses tag that started from current position
            </summary>
            <returns>HTMLchunk with tag information</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.ParseComments(System.Int32@,System.Boolean@)">
            <summary>
            Finishes parsing of comments tag
            </summary>
            <returns>HTMLchunk object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.ParseServerComments(System.Int32@,System.Boolean@)">
            <summary>
            Finishes parsing of comments tag
            </summary>
            <returns>HTMLchunk object</returns>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.bClosedScriptTag">
            <summary>
            /script sequence indicating end of script tag
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HtmlParsing.TagParser.ParseScript(System.Int32@)">
            <summary>
            Finishes parsing of data after scripts tag - makes extra checks to avoid being broken
            with >'s used to denote comparison
            </summary>
            <returns>HTMLchunk object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.HttpRequestUtility">
            <summary>
            Utility class for HttpRequestBase
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HttpRequestUtility.GetIpAddress(System.Web.HttpRequestBase)">
            <summary>
            Gets the public client IP from HttpRequestBase
            </summary>
            <param name="request">The request</param>
            <returns>The public client IP</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.HttpRequestUtility.GetUserPlatform(System.Web.HttpRequestBase)">
            <summary>
            Gets the client platform such as device name and device version.
            </summary>
            <param name="request">The request</param>
            <returns>The user's platform</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.IPAddressRange">
            <summary>
            Helper class for checking IP range
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.IPAddressRange.TryParse(System.String,Telerik.Sitefinity.Utilities.IPAddressRange@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="ipRangeString">The ip range string.</param>
            <param name="ipRange">The ip range.</param>
            <returns>Whether input string can be parsed to ip range</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.IPAddressRange.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.IPAddressRange"/> class.
            </summary>
            <param name="lowerInclusive">The lower inclusive.</param>
            <param name="upperInclusive">The upper inclusive.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.IPAddressRange.IsInRange(System.Net.IPAddress)">
            <summary>
            Determines whether [is in range] [the specified address].
            </summary>
            <param name="address">The address.</param>
            <returns>Whether the given IP is in the range</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Json.JsonUtility">
            <summary>
            (Extension) methods to facilitate JSON serialization.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Json.JsonUtility.ToJson``1(``0,System.Text.Encoding)">
            <summary>
            Serializes <paramref name="obj"/> using a <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="obj"/>.</typeparam>
            <param name="obj">The CLR object to serialize.</param>
            <param name="encoding">Optional encoding of the JSON text. When <c>null</c> UTF8 is used.</param>
            <returns>The JSON representation of <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Json.JsonUtility.ToJson(System.Object,System.Type,System.Text.Encoding)">
            <summary>
            Serializes <paramref name="obj"/> using a <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>.
            </summary>
            <param name="obj">The CLR object to serialize.</param>
            <param name="type">The type of <paramref name="obj"/>.</param>
            <param name="encoding">Optional encoding of the JSON text. When <c>null</c> UTF8 is used.</param>
            <returns>The JSON representation of <paramref name="obj"/>.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Json.JsonUtility.FromJson``1(System.String,System.Text.Encoding)">
            <summary>
            Deserializes <paramref name="json"/> using a <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>.
            </summary>
            <typeparam name="T">The type of the serialized object.</typeparam>
            <param name="json">The JSON representation of a serialized object.</param>
            <param name="encoding">Optional encoding of the JSON text. When <c>null</c> UTF8 is used.</param>
            <returns>The deserialized CLR object.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Json.JsonUtility.FromJson(System.String,System.Type,System.Text.Encoding)">
            <summary>
            Deserializes <paramref name="json"/> using a <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>.
            </summary>
            <param name="json">The JSON representation of a serialized object.</param>
            <param name="type">The type of the serialized object.</param>
            <param name="encoding">Optional encoding of the JSON text. When <c>null</c> UTF8 is used.</param>
            <returns>The deserialized CLR object.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Json.JsonUtility.EnumToJson(System.Type)">
            <summary>
            Converts an enumeration to JSON string
            </summary>
            <param name="enumType">The Enum</param>
            <returns>A JSON string representing the Enum</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Json.JsonUtility.EnumToJsonValues(System.Type)">
            <summary>
            Converts an enumeration to JSON string containing the values
            </summary>
            <param name="enumType">The Enum</param>
            <returns>A JSON string representing the Enum values</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.AllEntriesTemplate" -->
        <!-- Badly formed XML comment ignored for member "F:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.PagedEntriesTemplate" -->
        <!-- Badly formed XML comment ignored for member "F:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.EntryTemplate" -->
        <!-- Badly formed XML comment ignored for member "F:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.MediaItemTemplate" -->
        <!-- Badly formed XML comment ignored for member "F:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.DocumentTemplate" -->
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.GetMaximumEntriesInFeed(System.String)">
            <summary>
            Specifies the maximum number of entries that are returned in the feed at a single time. If this is less than int.MaxValue, then the feed will
            contain a link to the next set of entries.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.GetEntries(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns the items in the collection in the specified range. 
            </summary>
            <param name="collection">collection name</param>
            <param name="id">id of the entry</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.GetEntry(System.String,System.String)">
            <summary>
            Gets the SyndicationItem corresponding to the id. Return null if it does not exist
            </summary>
            <param name="collection">collection name</param>
            <param name="id">id of the entry</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.GetMedia(System.String,System.String,System.String@)">
            <summary>
            Gets the SyndicationItem corresponding to the id. Return null if it does not exist.
            Set the contentType of the media item.
            </summary>
            <param name="collection">collection name</param> 
            <param name="id">id of the entry</param>
            <param name="contentType">content type of the item</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.AddMedia(System.String,System.IO.Stream,System.String,System.String,System.Uri@)">
            <summary>
            Add the media item (represented by the stream, contentType and description) to the collection
            Return the id of the media item and the Atom entry representing it. If the item could not be added return null.
            </summary>
            <param name="collection">collection name</param>
            <param name="stream">request entity body</param>
            <param name="contentType">content type of request</param>
            <param name="description">description, as provided in the Slug header</param>
            <param name="location">Uri for the media entry</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.AddEntry(System.String,System.ServiceModel.Syndication.SyndicationItem,System.Uri@)">
            <summary>
            Add the Atom entry to the collection. Return its id and the actual entry that was added to the collection. 
            If the item could not be added return null.
            </summary>
            <param name="collection">collection name</param>
            <param name="entry">entry to be added</param>
            <param name="location">URI for the added entry</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.PutEntry(System.String,System.String,System.ServiceModel.Syndication.SyndicationItem)">
            <summary>
            Update the Atom entry specified by the id. If none exists, return null. Return the updated Atom entry. Return null if the entry does not exist.
            This method must be idempotent.
            </summary>
            <param name="collection">collection name</param>
            <param name="id">id of the entry</param>
            <param name="entry">Entry to put</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.PutMedia(System.String,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Update the media item specified by the id. Return false if no such item exists.
            This method must be idempotent.
            </summary>
            <param name="collection">collection name</param>
            <param name="id">id of the item</param>
            <param name="stream">new value for the media item</param>
            <param name="contentType">content type of the new value</param>
            <param name="description">description, as specifued in the Slug header</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.DeleteEntry(System.String,System.String)">
            <summary>
            Delete the Atom entry with the specified id. Return false if no such entry exists.
            This method should be idempotent.
            </summary>
            <param name="collection">collection name</param>
            <param name="id">id of the entry</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.DeleteMedia(System.String,System.String)">
            <summary>
            Delete the media item with the specified id. Return false if no such item exists.
            This method should be idempotent.
            </summary>
            <param name="collection">collection name</param>
            <param name="id">id of the entry</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.CreateFeed(System.String)">
            <summary>
            Create a feed container object (containing no entries) for the input collection
            </summary>
            <param name="collection">collection name</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.IsValidCollection(System.String)">
            <summary>
            Return true if the collection name is a valid collection, false otherwise
            </summary>
            <param name="collection">collection name</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.GetServiceDocument">
            <summary>
            Return the service document describing the collections hosted by the service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.GetAllowedContentTypes(System.String)">
            <summary>
            Return the content types of items that can be added to the collection
            </summary>
            <param name="collection">collection name</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.MS.ServiceModel.Web.SpecializedServices.AtomPubServiceBase.IsContentTypeAllowed(System.String,System.String)">
            <summary>
            Return true if an item of the specified content type can be added to the collection
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.Headers">
            <summary>
            Headers for this Attachment
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.ContentFileName">
            <summary>
            Content File Name
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.RawContent">
            <summary>
            Raw Content
            Full Attachment, with headers and everything.
            The raw string used to create this attachment
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.RawAttachment">
            <summary>
            Raw Attachment Content (headers removed if was specified at creation)
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.#ctor(System.String)">
            <summary>
            Used to create a new attachment internally to avoid any
            duplicate code for setting up an attachment
            </summary>
            <param name="strFileName">file name</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Create an Attachment from byte contents. These are NOT parsed in any way, but assumed to be correct.
            This is used for MS-TNEF attachments
            </summary>
            <param name="bytAttachment">attachment bytes content</param>
            <param name="strFileName">file name</param>
            <param name="strContentType">content type</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.#ctor(System.String,Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader)">
            <summary>
            Create an attachment from a string, with some headers use from the message it is inside
            </summary>
            <param name="strAttachment">attachment content</param>
            <param name="headersFromMessage">The attachments headers defaults to some of the message headers, this is the headers from the message</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.FigureOutFilename(Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader)">
            <summary>
            This method is responsible for picking a good name for an Attachment
            based on the headers of it
            </summary>
            <param name="headers">The headers that can be used to give a reasonable name</param>
            <returns>A name to use for an Attachment with the headers given</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.DecodeAsText">
            <summary>
            Decode the attachment to text
            </summary>
            <returns>Decoded attachment text</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.DecodeAsMessage(System.Boolean,System.Boolean)">
            <summary>
            Decode attachment to be a message object
            </summary>
            <param name="blnRemoveHeaderBlankLine"></param>
            <param name="blnUseRawContent"></param>
            <returns>new message object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.DecodedAsBytes">
            <summary>
            Decode the attachment to bytes
            </summary>
            <returns>Decoded attachment bytes</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.SaveToFile(System.String)">
            <summary>
            Save this Attachment to a file
            </summary>
            <param name="strFileName">File to write Attachment to</param>
            <returns>true if save was successfull, false if save failed</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Attachment.IsMIMEMailFile">
            <summary>
            Verify if the attachment is an RFC822 message.
            </summary>
            <returns>true if Attachment is a RFC822 message, false otherwise</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Decode.Base64.Decode(System.String)">
            <summary>
            Decoded a Base64 encoded string using the Default encoding of the system
            </summary>
            <param name="base64Encoded">Source string to decode</param>
            <returns>A decoded string</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Decode.Base64.Decode(System.String,System.String)">
            <summary>
            Decoded a Base64 encoded string using a specified encoding
            </summary>
            <param name="base64Encoded">Source string to decode</param>
            <param name="nameOfEncoding">The name of the encoding to use</param>
            <returns>A decoded string</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Decode.EncodedWord.Decode(System.String)">
            <summary>
            Decode text that is encoded. See BNF below.
            This will decode any encoded-word found in the string.
            All unencoded parts will not be touched.
            
            From http://tools.ietf.org/html/rfc2047:
            Generally, an "encoded-word" is a sequence of printable ASCII
            characters that begins with "=?", ends with "?=", and has two "?"s in
            between.  It specifies a character set and an encoding method, and
            also includes the original text encoded as graphic ASCII characters,
            according to the rules for that encoding method.
            
            BNF:
            encoded-word = "=?" charset "?" encoding "?" encoded-text "?="
            
            Example:
            =?iso-8859-1?q?this=20is=20some=20text?= other text here
            </summary>
            <see cref="!:http://tools.ietf.org/html/rfc2047#section-2">RFC Part 2 "Syntax of encoded-words" for more detail</see>
            <param name="encodedWords">Source text</param>
            <returns>Decoded text</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Decode.QuotedPrintable">
            <summary>
            Used for decoding Quoted-Printable text
            </summary>
            <see cref="!:http://tools.ietf.org/html/rfc2045#section-6.7">For more details on this encoding</see>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Decode.QuotedPrintable.ConvertHexToString(System.String,System.Text.Encoding)">
            <summary>
            Decode a Quoted-Printable string
            </summary>
            <param name="Hexstring">Quoted-Printable encoded string</param>
            <param name="encode">encoding method</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Decode.QuotedPrintable.Decode(System.String,System.Text.Encoding,System.Int64)">
            <summary>
            Decoding Quoted-Printable string at a position
            </summary>
            <see cref="!:http://tools.ietf.org/html/rfc2045#section-6.7">For details</see>
            <param name="Hexstring">Quoted-Printable encoded string</param>
            <param name="encode">encoding method, "Default" is suggested</param>
            <param name="nStart">position to start, normally 0</param>
            <returns>decoded string</returns>
            TODO: This method does not cope with every QuotedPrintable string that is thrown at it therefore it should be looked more into
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Decode.QuotedPrintable.Decode(System.String)">
            <summary>
            Decode a Quoted-Printable string using default encoding
            </summary>
            <param name="Hexstring">Quoted-Printable encoded string</param>
            <returns>decoded string</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.ContentTransferEncoding">
            <summary>
            Enum that describes the ContentTransferEncoding header field
            </summary>
            <see cref="!:http://www.ietf.org/rfc/rfc2045.txt">Section 6 or Section 2 for more details</see>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderExtractor.ExtractHeaders(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            Method that takes a full message and extract the headers from it.
            </summary>
            <param name="message">The message to extract headers from</param>
            <param name="rawHeaders">The portion of the message that was headers</param>
            <param name="headers">A collection of Name and Value pairs of headers</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderExtractor.IsMoreLinesInHeaderValue(System.IO.TextReader)">
            <summary>
            Check if the next line is part of the current header value we are parsing by
            peeking on the next character of the TextReader.
            This should only be called while parsing headers
            </summary>
            <param name="reader">The reader from which the header is read from</param>
            <returns>true if multi-line header. False otherwise</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderFieldParser">
            <summary>
            Class that can parse different fields in the header sections of a MIME message
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderFieldParser.ParseMailAddress(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderFieldParser.ParseMailAddresses(System.String)" -->
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderFieldParser.ParseContentTransferEncoding(System.String)">
            <summary>
            Parses the Content-Transfer-Encoding header
            </summary>
            <param name="headerValue">The value for the header to be parsed</param>
            <returns>A ContentTransferEncoding</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderFieldParser.ParseImportance(System.String)">
            <summary>
            Parses an ImportanceType from a given Importance header value
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A valid importancetype. If the headerValue is not recognized, Normal is returned.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderFieldParser.ParseContentType(System.String)">
            <summary>
            Parses a the value for the header Content-Type to 
            a ContentType object
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A valid ContentType object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.HeaderFieldParser.ParseContentDisposition(System.String)">
            <summary>
            Parses a the value for the header Content-Disposition to 
            a ContentDisposition object
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A valid ContentDisposition object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader">
            <summary>
            Class that holds all headers for a message
            </summary>
            <see cref="!:http://www.rfc-editor.org/rfc/rfc4021.txt">For a large list of headers</see>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.UnknownHeaders">
            <summary>
            All headers which were not recognized and explicitly dealt with.
            This should mostly be custom headers, which are marked as X-[name].
            Empty list if no unknown headers
            </summary>
            <remarks>
            If you as a user, feels that a header in this collection should
            be parsed, feel free to notify the developers.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ContentDescription">
            <summary>
            A human readable description of the body
            Null if not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ContentID">
            <summary>
            ID of the content part (like an attached image). Used with multipart messages.
            Null if not set
            </summary>
            <see cref="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.MessageID">For an ID of the message</see>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.Keywords">
            <summary>
            Message keywords
            Empty list if no keywords
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.DispositionNotificationTo">
            <summary>
            Tells to where a Disposition Notification should be sent to.
            These notifications can be deletion, printing, ...
            Empty list of not set
            </summary>
            <see cref="!:http://tools.ietf.org/html/rfc3798">For details</see>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.Received">
            <summary>
            This is the Received headers. This tells the path that the email went.
            Empty list of not used
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.Importance">
            <summary>
            Importance level type
            
            The importance level is set to normal, if no such header field was mentioned or it contained
            unknown information. This is the expected behavior according to the RFC.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ContentTransferEncoding">
            <summary>
            The CONTENT-TRANSFER-ENCODING header field
            
            If the header was not found when this object was created, it is set
            to the default of 7BIT
            </summary>
            <see cref="!:http://www.ietf.org/rfc/rfc2045.txt">Part 6 for details</see>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.CC">
            <summary>
            Carbon Copy. This specifies who got a copy of the message.
            Empty list of not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.BCC">
            <summary>
            Blind Carbon Copy. This specifies who got a copy of the message, but others
            cannot see who these persons are.
            Empty list of not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.To">
            <summary>
            Specifies to who this mail was for.
            Empty list if not used
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.From">
            <summary>
            Specifies who sent the email
            Null if not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ReplyTo">
            <summary>
            Specifies to who a reply to the message should be sent
            Null if not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ContentType">
            <summary>
            The ContentType header field.
            If not set, the ContentType is created by the default string
            defined in http://www.ietf.org/rfc/rfc2045.txt Section 5.2
            which is "text/plain; charset=us-ascii"
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ContentDisposition">
            <summary>
            The ContentDisposition header field
            Null if not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.Date">
            <summary>
            The Date headers raw value.
            </summary>
            <remarks>If you can parse this into a DateTime, please get in touch with developers</remarks>
            <see cref="!:http://tools.ietf.org/html/rfc5322#section-3.6.1">For more details</see>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.MessageID">
            <summary>
            An ID of the message that is SUPPOSED to be in every message according to the RFC.
            The ID is unique
            Null if not set (which should be rare)
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.MimeVersion">
            <summary>
            The Mime Version.
            This field will almost always show 1.0
            Null if not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ReturnPath">
            <summary>
            A single MailAddress with no username inside
            This is a trace header field, that should be in all messages
            Null if not set
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.Subject">
            <summary>
            The subject line of the message in decoded, one line state.
            This should be in alle messages.
            Null if not set
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.#ctor">
            <summary>
            Used to set up default values
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses a NameValueCollection to a MessageHeader
            </summary>
            <param name="headers">The collection that should be traversed and parsed</param>
            <returns>A valid MessageHeader object</returns>
            <exception cref="T:System.ArgumentNullException">If headers is null</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.#ctor(System.Collections.Specialized.NameValueCollection,System.Net.Mime.ContentType,Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.ContentTransferEncoding)">
            <summary>
            Parses a NameValueCollection to a MessageHeader, but with some other default values
            </summary>
            <param name="headers">The collection that should be traversed and parsed</param>
            <param name="contentType">A ContentType to use as default, which might get overwitten</param>
            <param name="contentTransferEncoding">A ContentTransferEncoding to use as default, which might get overwitten</param>
            <returns>A valid MessageHeader object</returns>
            <exception cref="T:System.ArgumentNullException">If headers is null</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.#ctor(System.Net.Mime.ContentType)">
            <summary>
            Very simply header object.
            It uses all defaults but sets the contentType
            </summary>
            <param name="contentType">The ContentType to use</param>
            <exception cref="T:System.ArgumentNullException">If contentType was null</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ParseHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses a NameValueCollection to a MessageHeader
            </summary>
            <param name="headers">The collection that should be traversed and parsed</param>
            <returns>A valid MessageHeader object</returns>
            <exception cref="T:System.ArgumentNullException">If headers is null</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageHeader.ParseHeader(System.String,System.String)">
            <summary>
            Parses a single header and sets member variables according to it.
            </summary>
            <param name="headerName">The name of the header</param>
            <param name="headerValue">The value of the header in unfolded state (only one line)</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Header.MessageImportance">
            <summary>
            3 message importance types defined by RFC
            </summary>
            <see cref="!:http://tools.ietf.org/html/rfc1911#page-8">Under "Importance" for more info.</see>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message">
            <summary>
            The class represents a MIME Message
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.AutoDecodeMSTNEF">
            <summary>
            Whether to auto decode MS-TNEF attachment files
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.Headers">
            <summary>
            Headers of the Message.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.MessageBody">
            <summary>
            These are the text/plain and text/html bodies that could be found in the message
            The last message should be the message most faithfull to what the user sent
            Commonly the last message is HTML and the first is plain text
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.Attachments">
            <summary>
            Attachments for the Message
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.RawMessageBody">
            <summary>
            The raw message body part of the RawMessage that this message was constructed with.
            The Raw message is simply the message body part of the message, but the message body has NOT
            been decoded or converted in any way.
            You properly want to <see cref="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.MessageBody"/> instead.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.RawHeader">
            <summary>
            The header part from the RawMessage that this message was constructed with
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.RawMessage">
            <summary>
            The raw content from which this message has been constructed
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.#ctor">
            <summary>
            Sets up a default new message
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            New Message
            </summary>
            <param name="blnAutoDecodeMSTNEF">whether auto decoding MS-TNEF attachments</param>
            <param name="blnOnlyHeader">whether only decode the header without body</param>
            <param name="strEMLFile">file of email content to load from</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            New Message
            </summary>
            <param name="blnAutoDecodeMSTNEF">whether auto decoding MS-TNEF attachments</param>
            <param name="strMessage">raw message content</param>
            <param name="blnOnlyHeader">whether only decode the header without body</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.IsReport">
            <summary>
            Verify if the message is a report
            </summary>
            <returns>true if message is a report message, false otherwise</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.TranslateHTMLPictureFiles(System.String,System.Collections.Hashtable)">
            <summary>
            translate pictures url within the body
            </summary>
            <param name="strBody">message body</param>
            <param name="hsbFiles">pictures collection</param>
            <returns>translated message body</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.TranslateHTMLPictureFiles(System.String,System.String)">
            <summary>
            Translate inline pictures within the body to a path where the images are saved
            under their ContentFileName.
            </summary>
            <param name="strBody">The body to be changedy</param>
            <param name="strPath">Path to the location of the pictures</param>
            <returns>A Translated message body</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.SaveAttachments(System.String)">
            <summary>
            Save all Attachments included in this message to a defined path.
            The attachments name will be appended to the path, and saved under that name.
            </summary>
            <param name="strPath">Path to place the attachments</param>
            <returns>true if all attachments was saved successfully, false if just one failed</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.SaveToMIMEEmailFile(System.String,System.Boolean)">
            <summary>
            Save message content to an eml file
            </summary>
            <param name="strFile">The File location to save the message to</param>
            <param name="blnReplaceExists">Should the file be replaced if it exists?</param>
            <returns>True on success, false otherwsie</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.InitializeMessage(System.String,System.Boolean)">
            <summary>
            Initializes a new message from raw MIME content.
            This method parses headers, messagebody and attachments.
            </summary>
            <param name="input">Raw message content from which parsing will begin</param>
            <param name="onlyParseHeaders">Whether only to parse and decode headers</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.ParseMultipartMessageBody">
            <summary>
            Parses the MessageBody as a Multipart message.
            This method will add these parts as Attachments
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Message.GetMessageBody(System.String)">
            <summary>
            Parses message body of a MIME message
            </summary>
            <param name="strBuffer">Raw message body</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.MIMETypes.GetMimeType(System.String)">
            <summary>Returns the MIME content-type for the supplied file extension</summary>
            <returns>string MIME type (Example: \"text/plain\")</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFAttachment">
            <summary>
            TNEFAttachment
            
            Based on tnef.c from Thomas Boll 
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFAttachment.Subject">
            <summary>
            attachment subject
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFAttachment.FileLength">
            <summary>
            attachment file length
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFAttachment.FileName">
            <summary>
            attachment file name
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFAttachment.FileContent">
            <summary>
            attachment file content
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser">
             <summary>
             Used to parse attachments that have the MIME-type Application/MS-TNEF
             TNEF stands for Transport Neutral Encapsulation Format, and is proprietary Microsoft attachment format.
            
             Based on tnef.c from Thomas Boll.
             </summary>
             <see cref="!:http://en.wikipedia.org/wiki/Transport_Neutral_Encapsulation_Format">For more details</see>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.#ctor">
            <summary>
            Used the set up default values
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.#ctor(System.String)">
            <summary>
            Create a TNEFParser which loads its content from a file
            </summary>
            <param name="strFile">MS-TNEF file</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.#ctor(System.Byte[])">
            <summary>
            Create a TNEFParser which loads its content from a byte array
            </summary>
            <param name="bytContents">MS-TNEF bytes</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.OpenTNEFStream(System.String)">
            <summary>
            Open the MS-TNEF stream from file
            </summary>
            <param name="strFile">MS-TNEF file</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.OpenTNEFStream(System.Byte[])">
            <summary>
            Open the MS-TNEF stream from bytes
            </summary>
            <param name="bytContents">MS-TNEF bytes</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.FindSignature">
            <summary>
            Find the MS-TNEF signature
            </summary>
            <returns>true if found, vice versa</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.Attachments">
            <summary>
            decoded attachments
            </summary>
            <returns>attachment array</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.SaveAttachments(System.String)">
            <summary>
            save all decoded attachments to files
            </summary>
            <returns>true is succeded, vice versa</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.SaveAttachment(Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFAttachment,System.String)">
            <summary>
            save a decoded attachment to file
            </summary>
            <param name="attachment">decoded attachment</param>
            <param name="pathToSaveTo">Where to save the attachment to</param>
            <returns>true is succeded, vice versa</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.TNEFParser.Parse">
            <summary>
            parse MS-TNEF stream
            </summary>
            <returns>true is succeded, vice versa</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility">
            <summary>
            foens: This class should be reworked.
            Right now it is just like "The blob" - which
            is lots of code that is totally unrelated to eachother
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.Log">
            <summary>
            Turns file logging on and off.
            </summary>
            <remarks>Comming soon.</remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.IsPictureFile(System.String)">
            <summary>
            Verifies whether the filename is of picture type or not by
            checking what the extension is
            </summary>
            <param name="filename">Filename to be checked</param>
            <returns>True if filename is of picture type, false if not</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.SaveByteContentToFile(System.String,System.Byte[])">
            <summary>
            Save byte content to a file.
            If file exists it is deleted!
            </summary>
            <param name="strFile">File to be saved to</param>
            <param name="bytContent">Byte array content</param>
            <returns>True if saving succeeded, false if failed</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.SavePlainTextToFile(System.String,System.String,System.Boolean)">
            <summary>
            Save text content to a file
            </summary>
            <param name="strFile">File to be saved to</param>
            <param name="strText">Text content</param>
            <param name="blnReplaceExists">Replace file if exists</param>
            <returns>True if saving succeeded, false if failed</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.ReadPlainTextFromFile(System.String,System.String@)">
            <summary>
            Read text content from a file
            </summary>
            <param name="strFile">File to be read from</param>
            <param name="strText">This is where the content of the file is placed</param>
            <returns>True if reading succeeded, false if failed</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.GetHeadersValue(System.String)">
            <summary>
            Seperate header name and header value
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.RemoveQuotes(System.String)">
            <summary>
            Remove quotes
            </summary>
            <param name="strText">Text with quotes</param>
            <returns>Text without quotes</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.ChangeEncoding(System.String,System.String)">
            <summary>
            Change text encoding
            </summary>
            <param name="strText">Source encoded text</param>
            <param name="strCharset">New charset</param>
            <returns>Encoded text with new charset</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.MIME.Utility.ReplaceFirstOccurrance(System.String,System.String,System.String)">
            <summary>
            Replace the first occurence of a string in a string
            </summary>
            <param name="original">The original string to replace in</param>
            <param name="toReplace">The string that is to be replaced</param>
            <param name="toReplaceWith">The string that is to be placed instead of the replaced string</param>
            <returns>
            The original string with the first occurrance of toReplace replaced with toReplaceWith.
            The original is returned if toReplace was not found.
            </returns>
            <see cref="!:http://fortycal.blogspot.com/2007/07/replace-first-occurrence-of-string-in-c.html">For author</see>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.AuthenticationMethod">
            <summary>
            Authentication method to use
            </summary>
            <remarks>
            TRYBOTH means code will first attempt by using APOP method as its more secure.
            In case of failure the code will fall back to USERPASS method.
            </remarks>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.OpenPOP.POP3.AuthenticationMethod.USERPASS">
            <summary>
            Authenticate using the USER/PASS method.
            APOP is more secure but might not be supported on a server.
            Recomended AuthenticationMethod is APOP, but it does not matter
            if SSL is used.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.OpenPOP.POP3.AuthenticationMethod.APOP">
            <summary>
            Authenticate using the APOP method, which is more secure.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.OpenPOP.POP3.AuthenticationMethod.TRYBOTH">
            <summary>
            Authenticate using APOP first, which is more secure.
            If APOP is not supported on the server, authenticate
            using USER/PASS.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.PopServerNotAvailableException">
            <summary>
            Thrown when the POP3 Server sends an error (-ERR) during intial handshake (HELO)
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.PopServerNotFoundException">
            <summary>
            Thrown when the specified POP3 Server can not be found or connected with
            </summary>	
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.InvalidLoginException">
            <summary>
            Thrown when the supplied login doesn't exist on the server
            </summary>
            <remarks>Should be used only when using USER/PASS Authentication Method</remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.InvalidPasswordException">
            <summary>
            Thrown when the password supplied for the login is invalid
            </summary>	
            <remarks>Should be used only when using USER/PASS Authentication Method</remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.InvalidLoginOrPasswordException">
            <summary>
            Thrown when either the login or the password is invalid on the POP3 Server
            </summary>
            /// <remarks>Should be used only when using APOP Authentication Method</remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.PopServerLockException">
            <summary>
            Thrown when the user mailbox is in a locked state
            </summary>
            <remarks>The mail boxes are locked when an existing session is open on the mail server. Lock conditions are also met in case of aborted sessions</remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.Logger">
            <summary>
            Logger which can be used for debugging purposes
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.OpenPOP.POP3.Logger.logFile">
            <summary>
            The file to which logging will be done
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.POP3.Logger.Log">
            <summary>
            Turns file logging on and off.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.Logger.LogError(System.String)">
            <summary>
            Log an error to the log file
            </summary>
            <param name="toLog">The error text to log</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.MD5.ComputeHashHex(System.String)">
            <summary>
            Computes the MD5 hash function on a string
            </summary>
            <param name="input">The input string to be hashed</param>
            <returns>The MD5 hash of the input string</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient">
            <summary>
            POP3 complient POPClient
            
            This implementation does not support threads at all.
            
            Here is an example how the POPClient could be used:
            POPClient client = new POPClient();
            client.Connect(serverHostName, serverPort, useSsl);
            client.Authenticate(username, password);
            Message messageNumber1 = client.GetMessage(1, false);
            client.Disconnect();
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.POPClientEvent">
            <summary>
            Basic delegate which is used for alle events
            </summary>
            <param name="client">The client from which the event happened</param>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.CommunicationBegan">
            <summary>
            Event that fires when begin to connect with target POP3 server.
            </summary>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.CommunicationOccured">
            <summary>
            Event that fires when connected with target POP3 server.
            </summary>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.CommunicationLost">
            <summary>
            Event that fires when disconnected with target POP3 server.
            </summary>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.AuthenticationBegan">
            <summary>
            Event that fires when authentication began with target POP3 server.
            </summary>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.AuthenticationFinished">
            <summary>
            Event that fires when authentication finished with target POP3 server.
            </summary>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.MessageTransferBegan">
            <summary>
            Event that fires when message transfer has begun.
            </summary>		
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.MessageTransferFinished">
            <summary>
            Event that fires when message transfer has finished.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.APOPTimestamp">
            <summary>
            The APOP timestamp sent by the server in it's welcome
            message if APOP is supported.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.Connected">
            <summary>
            Tells whether the POPClient is connected to a POP server or not
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.APOPSupported">
            <summary>
            Allows you to check if the server supports APOP.
            This value is filled when the connect method has been used,
            as the server tells in its welcome message if APOP is supported.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.AutoDecodeMSTNEF">
            <summary>
            whether auto decoding MS-TNEF attachment files
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.ReceiveTimeOut">
            <summary>
            Receive timeout for the connection to the SMTP server in milliseconds.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.SendTimeOut">
            <summary>
            Send timeout for the connection to the SMTP server in milliseconds.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.#ctor">
            <summary>
            Constructs a new POPClient with default settings.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new POPClient with special settings for socket timeouts.
            </summary>
            <param name="receiveTimeout">Timeout in milliseconds before a socket should time out from reading</param>
            <param name="sendTimeout">Timeout in milliseconds before a socket should time out from sending</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.ExtractApopTimestamp(System.String)">
            <summary>
            Examines string to see if it contains a timestamp to use with the APOP command
            If it does, sets the ApopTimestamp property to this value
            </summary>
            <param name="response">The string to examine</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.IsOkResponse(System.String)">
            <summary>
            Tests a string to see if it is a "+OK" string.
            An "+OK" string should be returned by a compliant POP3
            server if the request could be served.
            
            The method does only check if it starts with an "+OK"
            </summary>
            <param name="strResponse">The string to examine</param>
            <returns>true if response is an "+OK" string</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends a command to the POP server.
            </summary>
            <param name="strCommand">command to send to server</param>
            <param name="blnSilent">Do not give error</param>
            <returns>true if server responded "+OK"</returns>
            TODO: Should this really use catch(Exception e)?
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.SendCommand(System.String)">
            <summary>
            Sends a command to the POP server.
            </summary>
            <param name="strCommand">command to send to server</param>
            <returns>true if server responded "+OK"</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.SendCommandIntResponse(System.String,System.Int32)">
            <summary>
            Sends a command to the POP server, expects an integer reply in the response
            </summary>
            <param name="strCommand">command to send to server</param>
            <param name="intLocation">
            The location of the int to return.
            Example:
            S: +OK 2 200
            Set intLocation=1 to get 2
            Set intLocation=2 to get 200
            </param>
            <returns>integer value in the reply or -1 if server did not accept the command</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.Connect(System.Net.Sockets.TcpClient,System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to a remote POP3 server
            </summary>
            <param name="hostname">The hostname of the POP3 server</param>
            <param name="port">The port of the POP3 server</param>
            <param name="useSsl">True if SSL should be used. False if plain TCP should be used.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.Disconnect">
            <summary>
            Disconnects from POP3 server
            Sends the QUIT command before closing the connection.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.Finalize">
            <summary>
            Releases any resources that this POPClient has.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates a user towards the POP server using AuthenticationMethod.TRYBOTH
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.Authenticate(System.String,System.String,Telerik.Sitefinity.Utilities.OpenPOP.POP3.AuthenticationMethod)">
            <summary>
            Authenticates a user towards the POP server using some AuthenticationMethod.
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
            <param name="authenticationMethod">The way that the client should authenticate towards the server</param>
            <exception cref="T:System.NotSupportedException">If AuthenticationMethod.APOP is used, but not supported by the server</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.AuthenticateUsingUSER(System.String,System.String)">
            <summary>
            Authenticates a user towards the POP server using the USER, PASSWORD commands
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.AuthenticateUsingAPOP(System.String,System.String)">
            <summary>
            Authenticates a user towards the POP server using APOP
            </summary>
            <param name="username">The username</param>
            <param name="password">The user password</param>
            <exception cref="T:System.NotSupportedException">Thrown when the server does not support APOP</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.GetMessageCount">
            <summary>
            Get the number of messages on the server using a STAT command
            </summary>
            <returns>The message count or -1 if the server did not respond with an OK message</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.DeleteMessage(System.Int32)">
            <summary>
            Marks the message with the given message number as deleted.
            The message will not be deleted until a QUIT command is sent to the server.
            This is done on disconnect.
            </summary>
            <param name="messageNumber">The number of the message to be deleted. This message may not already have been deleted</param>
            <returns>True on success, false on failure of deletion</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.DeleteAllMessages">
            <summary>
            Marks all messages as deleted.
            The messages will not be deleted until a QUIT command is sent to the server.
            This is done on disconnect.
            </summary>
            <returns>True if all messages was marked as deleted successfully, false if one message could not be marked. Messages following that message will not be tried to be deleted</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.QUIT">
            <summary>
            Sends the POP3 server the QUIT command.
            You should use disconnect instead, which also sends the QUIT command.
            
            According to RFC the server should then:
            If there is an error, such as a resource shortage, encountered while removing messages, the maildrop may result in having some or none of the messages marked as deleted be removed.
            The POP3 server removes all messages marked as deleted from the maildrop and replies as to the status of this operation.
            The server is required to release any exclusive-access locks on the mailbox and close the TCP connection
            </summary>
            <returns>True on OK message from server. False otherwise.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.NOOP">
            <summary>
            Keep server active
            
            RFC:
            The POP3 server does nothing, it merely replies with a positive response
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.RSET">
            <summary>
            Send a reset command to the server.
            
            RFC:
            If any messages have been marked as deleted by the POP3
            server, they are unmarked.  The POP3 server then replies
            with a positive response.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.GetMessageUID(System.Int32)">
            <summary>
            Get a unique ID for a single message
            </summary>
            <param name="messageNumber">Message number, which may not be marked as deleted</param>
            <returns>The unique ID for the message, or null if the message does not exist</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.GetMessageUIDs">
            <summary>
            Gets a list of unique ID's for all messages.
            Messages marked as deleted are not listed.
            </summary>
            <returns>
            A list containing the unique ID's in sorted order from message number 1 and upwards.
            Returns null if the server did not accept the UIDL command.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.GetMessageSize(System.Int32)">
            <summary>
            Gets the size of a single message
            </summary>
            <param name="messageNumber">The number of a message which may not be a message marked as deleted</param>
            <returns>Size of the message or -1 if the server did not respond with an OK message</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.GetMessageSizes">
            <summary>
            Get the sizes of all the messages.
            Messages marked as deleted are not listed
            </summary>
            <returns>
            Size of each message excluding deleted ones.
            If the server did not accept the LIST command, null is returned.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.ReceiveRETRMessage">
            <summary>
            Reads a mail message that is sent from the server, when the server
            was handed a RETR [num] command which it accepted.
            </summary>
            <returns>The message read from the server stream</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.GetMessage(System.Int32)">
            <summary>
            Fetches a message from the server and parses it
            </summary>
            <param name="messageNumber">Message number on server, which may not be marked as deleted</param>
            <returns>The message or null if server did not accept the command</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.GetMessageHeaders(System.Int32)">
            <summary>
            Get all the headers for a message
            </summary>
            <param name="messageNumber">Message number, which may not be marked as deleted</param>
            <returns>MessageHeaders object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.OpenPOP.POP3.POPClient.FetchMessage(System.String,System.Boolean)">
            <summary>
            Fetches a message or a message header
            </summary>
            <param name="command">Command to send to POP server</param>
            <param name="headersOnly">Only return message header?</param>
            <returns>Message object or null if the server did not accept the command</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Reflection.IPropertyAccessor">
            <summary>
            The IPropertyAccessor interface defines a property
            accessor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.IPropertyAccessor.GetValue(System.Object)">
            <summary>
            Gets the value stored in the property for 
            the specified target.
            </summary>
            <param name="target">Object to retrieve
            the property from.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.IPropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value for the property of
            the specified target.
            </summary>
            <param name="target">Object to set the
            property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor">
            <summary>
            The PropertyAccessor class provides fast dynamic access
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.#ctor(System.Type,System.String)">
            <summary>
            Creates a new property accessor.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="property">Property name.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.GetValue(System.Object)">
            <summary>
            Gets the property value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.CanRead">
            <summary>
            Whether or not the Property supports read access.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.CanWrite">
            <summary>
            Whether or not the Property supports write access.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.TargetType">
            <summary>
            The Type of object this property accessor was
            created for.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.PropertyType">
            <summary>
            The Type of the Property being accessed.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.Init">
            <summary>
            This method generates creates a new assembly containing
            the Type that will provide dynamic access.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.InitTypes">
            <summary>
            Thanks to Ben Ratzlaff for this snippet of code
            http://www.codeproject.com/cs/miscctrl/CustomPropGrid.asp
            
            "Initialize a private hashtable with type-opCode pairs 
            so i dont have to write a long if/else statement when outputting msil"
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessor.EmitAssembly">
            <summary>
            Create an assembly that will provide the get and set methods.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException">
            <summary>
            PropertyAccessorException class.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException" /> class.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException.#ctor(System.String)">
            <summary>
            Represents PropertyAccessor exception.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.Reflection.PropertyAccessorException" /> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. 
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Security.HashExtensions">
            <summary>
            Contains helper methods for hashing.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Security.HashExtensions.ComputeSha256Hash(System.String)">
            <summary>
            Computes a url friendly hash of a string, using SHA256.
            </summary>
            <param name="text">The text to hash.</param>
            <returns>SHA256 hash.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.HtmlSanitizedStringArrayConverter">
            <summary>
            This class implements methods that convert html sanitized string representation of semicolon delimited strings to string array
            and vice versa
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.HtmlSanitizedStringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.TimeSpanDaysConverter">
            <summary>
            Converts a time span expressed in days.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeSpanDaysConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.TypeConverters.TimeSpanDaysConverter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeSpanDaysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the specified <paramref name="data"/> to a <see cref="T:System.TimeSpan" /> value expecting
            it to be <see cref="T:System.String" /> in days.</summary>
            <returns>The <see cref="T:System.TimeSpan" /> representing the <paramref name="data" /> parameter in days.</returns>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
            <param name="data">The <see cref="T:System.String" /> object to convert.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeSpanDaysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts a <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />. </summary>
            <returns>The <see cref="T:System.String" /> representing the <paramref name="value" /> parameter in days.</returns>
            <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
            <param name="value">The value to convert to.</param>
            <param name="type">The type to convert to.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1">
            <summary>
            Class for converting <see cref="T:System.Collections.Generic.ICollection`1"/> instances to <see cref="T:System.String"/> and vice versa.
            </summary>
            <typeparam name="T">The type parameter of the collection, which itself must have the appropriate type converter.</typeparam>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1"/>.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionTypeConverter`1.ConstructData(System.String,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter">
            <summary>
            Type converter for converting enums marked with a "Flags" attribute to string and vise versa. Separates active flags with comma (",").
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter" /> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A recursive function that checks if its source is of type string
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="sourceType">the type of the source</param>
            <returns>a boolean of whether conversion is possible</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A recursive function that checks if its destination is of type Instance descriptor
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="destinationType">the type of the destination</param>
            <returns>a boolean of whether conversion is possible</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            A recursive method that returns an object if its elements are strings or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <returns>an object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            A recursive method that returns an object if the destination type is string or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <param name="destinationType">destination type</param>
            <returns>an object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringFlagsEnumTypeConverter.ConstructData(System.String,System.Type)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <param name="targetType">The target enum type</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.StringGuidConverter">
            <summary>
            A helper class that converts string to a Guid.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringGuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A recusrive function that checks if its source is of type string
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="sourceType">the type of the source</param>
            <returns>a boolean of whether conversion is possible</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringGuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            A recursive method that returns an object if its elements are strings or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <returns>an object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringGuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            A recursive method that returns an object if the destination type is string or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <param name="destinationType">destination type</param>
            <returns>an object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.StringListConverter">
            <summary>
            This class implements methods that convert string representation of semicolon delimited strings to string array
            and vice versa
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.StringListConverter`1">
            <summary>
            This class implements methods that convert string representation of semicolon delimited strings to generic collection
            and vice versa
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringListConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A recusrive function that checks if its source is of type string
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="sourceType">the type of the source</param>
            <returns>a boolean of whether conversion is possible</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringListConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A recusrive function that checks if its destination is of type Instance descriptor
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="destinationType">the type of the destination</param>
            <returns>a boolean of whether conversion is possible</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringListConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            A recursive method that returns an object if its elements are strings or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <returns>an object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringListConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            A recursive method that returns an object if the destination type is string or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <param name="destinationType">destination type</param>
            <returns>an object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringListConverter`1.ConstructData(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.ObjectStringConverter">
            <summary>
            Represents object to string converter.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.ObjectStringConverter.#ctor(System.Type)">
            <summary>
            Crates new instace of ObjectStringConverter for the provided type.
            </summary>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.ObjectStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.ObjectStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.ObjectStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.ObjectStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.ObjectStringConverter.ConstructData(System.String)">
            <summary>
            Dummy method that returns given string
            </summary>
            <param name="value">The string value</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.StringVersionConverter">
            <summary>
            Represents type converter for converting types to string and vice versa.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringVersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter.
            </summary>
            <param name="context">A System.Type that represents the type you want to convert from.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringVersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringVersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter.
            </summary>
            <param name="context">A System.Type that represents the type you want to convert from.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringVersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringVersionConverter.ConstructData(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.GenericDictionaryJsonTypeConverter">
            <summary>
            Class for converting generic dircionaries to json strings and vice versa
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.GenericDictionaryJsonTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.GenericDictionaryJsonTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.GenericDictionaryJsonTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.GenericDictionaryJsonTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.GenericDictionaryJsonTypeConverter.ConstructData(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.CollectionJsonTypeConverter`1">
            <summary>
            Class for converting collections to JSON and vice versa.
            </summary>
            <typeparam name="T">The type of the elements contained in the collection.</typeparam>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionJsonTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionJsonTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionJsonTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionJsonTypeConverter`1.CreateCollection(`0[])">
            <summary>
            Creates and returns a generic collection instance from the given array.
            </summary>
            <remarks>
            This method is used for converting a collection instance to an InstanceDescriptor instance.
            </remarks>
            <param name="values">The array of values.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.CollectionJsonTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.NonQualifiedTypeResolver">
            <summary>
            A type resolver that uses FullName instead of AssemblyQualifiedName. Works only for Telerik.Sitefinity assembly.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.NonQualifiedTypeResolver.ResolveType(System.String)">
            <summary>
            Returns the <see cref="T:System.Type"/> of the specified name.
            </summary>
            <param name="id">The full name of the managed type.</param>
            <returns>
            A <see cref="T:System.Type"/> object that has the specified name, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.NonQualifiedTypeResolver.ResolveTypeId(System.Type)">
            <summary>
            Returns the full name of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to be resolved.</param>
            <returns>
            A string that contains the full name of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="type"/> is null.</exception>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1">
            <summary>
            Class for converting objects to JSON and vice versa.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1.SetValue(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="value">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.JsonTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.SimpleObjectConverter">
            <summary>
            Represents simple object converter. Basically it creates instance descriptor for the provided value. 
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.SimpleObjectConverter.#ctor(System.Type)">
            <summary>
            Crates new instace of SimpleObjectConverter for the provided type.
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.SimpleObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.SimpleObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.StringArrayConverter">
            <summary>
            This class implements methods that convert string representation of semicolon delimited strings to string array
            and vice versa
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A recusrive function that checks if its source is of type string
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="sourceType">the type of the source</param>
            <returns>a boolean of whether conversion is possible</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringArrayConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A recusrive function that checks if its destination is of type Instance descriptor
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="destinationType">the type of the destination</param>
            <returns>a boolean of whether conversion is possible</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            A recursive method that returns an object if its elements are strings or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <returns>an object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            A recursive method that returns an object if the destination type is string or calls itself again
            </summary>
            <param name="context">context of type TypeDescriptorContext</param>
            <param name="culture">of type Culture Info</param>
            <param name="value">value of type object</param>
            <param name="destinationType">destination type</param>
            <returns>an object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringArrayConverter.ConstructData(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="value">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.StringTypeConverter">
            <summary>
            Represents type converter for converting types to string and vice versa.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter.
            </summary>
            <param name="context">A System.Type that represents the type you want to convert from.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter.
            </summary>
            <param name="context">A System.Type that represents the type you want to convert from.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.StringTypeConverter.ConstructData(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.TimeZoneInfoTypeConverter">
            <summary>
            Represents type converter for converting TimeZoneInfo to string and vice versa.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeZoneInfoTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeZoneInfoTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeZoneInfoTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeZoneInfoTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TimeZoneInfoTypeConverter.ConstructData(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeConverterExtensions.GetCustomTypeConverter(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets a custom property <see cref="T:System.ComponentModel.TypeConverter"/> specified by a <see cref="T:System.ComponentModel.TypeConverterAttribute"/>.
            </summary>
            <returns>An instance of the specified <see cref="T:System.ComponentModel.TypeConverter"/> type, if any and <c>null</c> otherwise.</returns>
            <remarks>
            Note that the <see cref="P:System.ComponentModel.PropertyDescriptor.Converter"/> property,
            when fails to find a <see cref="T:System.ComponentModel.TypeConverter"/> specified by the attribute, falls back
            to the one of the property's type, like this: <c>TypeDescriptor.GetConverter(this.PropertyType)</c>.
            </remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService">
            <summary>
            Represents service for resolving strings representations of types to actual types.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName})">
            <summary>
            Creates an instance of TypeResolutionService for the specified assemblies.
            </summary>
            <param name="names">
            A collection of assembly names. 
            The service will resolve types against these assemblies.
            </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
            <summary>
            Gets the requested assembly.
            </summary>
            <param name="name">
            The name of the assembly to retrieve. 
            </param>
            <param name="throwOnError">
            true if this method should throw an exception if the assembly cannot be located; 
            otherwise, false, and this method returns null if the assembly cannot be located. 
            </param>
            <returns>
            An instance of the requested assembly, or null if no assembly can be located.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
            <summary>
            Gets the requested assembly.
            </summary>
            <param name="name">
            The name of the assembly to retrieve. 
            </param>
            <returns>
            An instance of the requested assembly, or null if no assembly can be located.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.RunWithService(Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService,System.Action)">
            <summary>
            Executes the specified <paramref name="delegateToExecute"/> with a replaced <see cref="T:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService"/> instance.
            </summary>
            <param name="service">The service to use.</param>
            <param name="delegateToExecute">The delegate to execute.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
            <summary>
            Gets the path to the file from which the assembly was loaded.
            </summary>
            <param name="name">
            The name of the assembly. 
            </param>
            <returns>
            The path to the file from which the assembly was loaded.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.RegisterType(System.Type)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.UnregisterType(System.Type)">
            <summary>
            Unregisters the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a type with the specified name.
            </summary>
            <param name="name">
            The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies. 
            </param>
            <param name="throwOnError">
            true if this method should throw an exception if the assembly cannot be located; otherwise, false, and this method returns null if the assembly cannot be located. 
            </param>
            <param name="ignoreCase">
            true to ignore case when searching for types; otherwise, false. 
            </param>
            <returns>
            An instance of <see cref="T:System.Type" /> that corresponds to the specified name, or <c>null</c> if no type can be found.
            </returns>        
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.GetType(System.String,System.Boolean)">
            <summary>
            Loads a type with the specified name.
            </summary>
            <param name="name">
            The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies. 
            </param>
            <param name="throwOnError">
            true if this method should throw an exception if the assembly cannot be located; otherwise, false, and this method returns null if the assembly cannot be located. 
            </param>
            <returns>
            An instance of <see cref="T:System.Type" /> that corresponds to the specified name, or null if no type can be found.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.GetType(System.String)">
            <summary>
            Loads a type with the specified name.
            </summary>
            <param name="name">
            The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies. 
            </param>
            <returns>
            An instance of <see cref="T:System.Type" /> that corresponds to the specified name, or null if no type can be found.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
            <summary>
            Adds a reference to the specified assembly.
            </summary>
            <param name="name">
            An <see cref="T:System.Reflection.AssemblyName" /> that indicates the assembly to reference. 
            </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.ClearCache">
            <summary>
            Clears the cache of registered types.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.RegisterAssembly(System.Reflection.AssemblyName)">
            <summary>
            Adds a reference to the specified assembly.
            </summary>
            <param name="name">
            An <see cref="T:System.Reflection.AssemblyName" /> that indicates the assembly to reference. 
            </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.ResolveType(System.String)">
            <summary>
            Loads a type with the specified name.
            </summary>
            <param name="name">
            The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies. 
            </param>
            <returns>
            An instance of <see cref="T:System.Type" /> that corresponds to the specified name, or null if no type can be found.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.ResolveType(System.String,System.Boolean)">
            <summary>
            Loads a type with the specified name.
            </summary>
            <param name="name">
            The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies. 
            </param>
            <param name="throwOnError">
            true if this method should throw an exception if the assembly cannot be located; otherwise, false, and this method returns null if the assembly cannot be located. 
            </param>
            <returns>
            An instance of <see cref="T:System.Type" /> that corresponds to the specified name, or null if no type can be found.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.ResolveType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads a type with the specified name.
            </summary>
            <param name="name">
            The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies. 
            </param>
            <param name="throwOnError">
            true if this method should throw an exception if the assembly cannot be located; otherwise, false, and this method returns null if the assembly cannot be located. 
            </param>
            <param name="ignoreCase">
            true to ignore case when searching for types; otherwise, false. 
            </param>
            <returns>
            An instance of <see cref="T:System.Type" /> that corresponds to the specified name, or null if no type can be found.
            </returns>        
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.TypeConverters.TypeResolutionService.Clear">
            <summary>
            Clears the registered types.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.IsGuid(System.String)">
            <summary>
            Determines whether the specified value is GUID.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is GUID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.StringToGuid(System.String)">
            <summary>
            Converts a string to a GUID.
            </summary>
            <param name="strId">String representing a GUID</param>
            <returns>A valid GUID, or Guid.Empty if the string does not represent a valid GUID.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.BytesToHex(System.Byte[])">
            <summary>
            Converts a byte array to a string, in which each byte is respresented by a pair of hexadecimal digits.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.HexToBytes(System.String)">
            <summary>
            Converts a string, in which each byte is respresented by a pair of hexadecimal digits, to a byte array.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.GuidToBase64String(System.Guid)">
            <summary>
            Represents the 16 bytes of a GUID as a (URL adapted) Base64 encoded 22 character string.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.GuidFromBase64String(System.String,System.Boolean)">
            <summary>
            Parses the 16 bytes of a GUID from a (URL adapted) Base64 encoded 22 character string.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.GetDefaultValue(System.Type)">
            <summary>
            Get the default value for a type
            </summary>
            <param name="type">Type to get the default value of</param>
            <returns>Default value for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.IsNullOrDefaultValue(System.Object,System.Type)">
            <summary>
            Test for a <paramref name="value"/> of <paramref name="type"/> if it is null or default value
            </summary>
            <param name="value">Value (instance) to test.</param>
            <param name="type">Type to use for retrieving the default value.</param>
            <returns>True if null or default value for the specified <paramref name="type"/></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.IsDateLikeNullValue(System.Nullable{System.DateTime})">
            <summary>
            Returns true if the specified nullable DateTime is null or contains a value that generally may be used to indicate a missing date, like DateTime.MinValue.
            </summary>
            <param name="dateTime">The DateTime value to test.</param>
            <returns>True if the date may be treated as null.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Utility.CheckDirectoryHasWriteAccess(System.String)">
            <summary>
            Checks if a folder has Write and Modify permissions
            </summary>
            <param name="directoryPath">The specified folder's path.</param>
            <returns>A value indicating whether a user has Write and Modify permissions for specified folder.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip. This type is used internally by DotNetZip; it is generally not used directly
            by applications wishing to create, read, or manipulate zip archive files.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CRC32.TotalBytesRead">
            <summary>
            indicates the total number of bytes read on the CRC stream.
            This is used when writing the ZipDirEntry when compressing files.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
            Get the CRC32 for the given (word,byte) combo. 
            This is a computation defined by PKzip.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read, 
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when reading from a stream, 
             or to calculate a CRC when writing to a stream.  The stream should be used to either 
             read, or write, but not both.  If you intermix reads and writes, the results are
             not defined. 
             </para>
             <para>This class is intended primarily for use internally by the DotNetZip library.</para>
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
             Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
             This is either the total number of bytes read, or the total number
             of bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.Crc32">
            <summary>
            Provides the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream. 
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading. 
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.CanSeek">
            <summary>
            Indicates whether the stream supports seeking. 
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing. 
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.Length">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.Position">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented.
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ReReadApprovalCallback">
            <summary>
            Delegate for the callback by which the application gives approval for multiple
            reads of the file stream. This callback is called only when the initial 
            compression operation inflates the size of the file data. 
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.WantCompressionCallback">
            <summary>
            Delegate for the callback by which the application tells the libraary whether
            to use compression on the file or not.  
            </summary>
            <remarks>
            <para>
            Using this callback, the application can 
            specify that previously-compressed files (.mp3, .png, .docx, etc) should 
            not be compressed, for example, or can turn on or off compression based on any 
            other factor.
            </para>
            </remarks>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WantCompression"/>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType">
            <summary>
            In an EventArgs type, indicates which sort of progress event is being reported.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Reading_Started">
            <summary>
            Indicates that a Read() operation has started.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Reading_BeforeReadEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be read.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Reading_AfterReadEntry">
            <summary>
            Indicates that an individual entry in the archive has just been read.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Reading_Completed">
            <summary>
            Indicates that a Read() operation has completed.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Reading_ArchiveBytesRead">
            <summary>
            The given event reports the number of bytes read so far
            during a Read() operation.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_Started">
            <summary>
            Indicates that a Save() operation has started.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_BeforeWriteEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be written.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_AfterWriteEntry">
            <summary>
            Indicates that an individual entry in the archive has just been saved.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_Completed">
            <summary>
            Indicates that a Save() operation has completed.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_AfterSaveTempArchive">
            <summary>
            Indicates that the zip archive has been created in a
            temporary location during a Save() operation.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_BeforeRenameTempArchive">
            <summary>
            Indicates that the temporary file is about to be renamed to the final archive 
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_AfterRenameTempArchive">
            <summary>
            Indicates that the temporary file is has just been renamed to the final archive 
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_AfterCompileSelfExtractor">
            <summary>
            Indicates that the self-extracting archive has been compiled
            during a Save() operation.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Saving_EntryBytesRead">
            <summary>
            The given event is reporting the number of source bytes that have run through the compressor so far
            during a Save() operation.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Extracting_BeforeExtractEntry">
            <summary>
            Indicates that an entry is about to be extracted. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Extracting_AfterExtractEntry">
            <summary>
            Indicates that an entry has just been extracted. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Extracting_EntryBytesWritten">
            <summary>
            The given event is reporting the number of bytes written so far for the current entry
            during an Extract() operation.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Extracting_BeforeExtractAll">
            <summary>
            Indicates that an ExtractAll operation is about to begin.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventType.Extracting_AfterExtractAll">
            <summary>
            Indicates that an ExtractAll operation has completed.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs">
            <summary>
            Provides information about the progress of a save, read, or extract operation. 
            This is a base class; you will probably use one of the classes derived from this one.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs.EntriesTotal">
            <summary>
            The total number of entries to be saved or extracted.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs.CurrentEntry">
            <summary>
            The name of the last entry saved or extracted.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs.Cancel">
            <summary>
            In an event handler, set this to cancel the save or extract 
            operation that is in progress.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs.EventType">
            <summary>
            The type of event being reported.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs.ArchiveName">
            <summary>
            Returns the archive name associated to this event.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes read or written so far for this entry.  
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Total number of bytes that will be read or written for this entry.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs">
            <summary>
            Provides information about the progress of a Read operation.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.SaveProgressEventArgs">
            <summary>
            Provides information about the progress of a save operation.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SaveProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,Telerik.Sitefinity.Utilities.Zip.ZipEntry)">
            <summary>
            Constructor for the SaveProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesSaved">Number of entries that have been saved.</param>
            <param name="entry">The entry involved in the event.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.SaveProgressEventArgs.EntriesSaved">
            <summary>
            Number of entries saved so far.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ExtractProgressEventArgs">
            <summary>
            Provides information about the progress of the extract operation.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ExtractProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,Telerik.Sitefinity.Utilities.Zip.ZipEntry,System.String,System.Boolean)">
            <summary>
            Constructor for the ExtractProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesExtracted">Number of entries that have been extracted.</param>
            <param name="entry">The entry involved in the event.</param>
            <param name="extractLocation">The location to which entries are extracted.</param>
            <param name="wantOverwrite">indicates whether the extract operation will overwrite existing files.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ExtractProgressEventArgs.EntriesExtracted">
            <summary>
            Number of entries extracted so far.  This is set only if the 
            EventType is Extracting_BeforeExtractEntry or Extracting_AfterExtractEntry, and 
            the Extract() is occurring witin the scope of a call to ExtractAll().
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ExtractProgressEventArgs.Overwrite">
            <summary>
            True if the extract operation overwrites existing files.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ExtractProgressEventArgs.ExtractLocation">
            <summary>
            Returns the extraction target location, a filesystem path. 
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.  
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadCrcException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.SfxGenerationException">
            <summary>
            Issued when errors occur saving a self-extracting archive.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SfxGenerationException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SfxGenerationException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SfxGenerationException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SfxGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile 
            which has no filename set, you can get this exception. 
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="serializationInfo">The serialization info for the exception.</param>
            <param name="streamingContext">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SharedUtilities.#ctor">
            private null constructor
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SharedUtilities.RoundToEvenSecond(System.DateTime)">
             <summary>
             Round the given DateTime value to an even second value.  
             </summary>
            
             <remarks>
             <para>
             Round up in the case of an odd second value.  The rounding does not consider fractional seconds.
             </para>
             <para>
             This is useful because the Zip spec allows storage of time only to the nearest even second.
             So if you want to compare the time of an entry in the archive with it's actual time in the filesystem, you 
             need to round the actual filesystem time, or use a 2-second threshold for the  comparison. 
             </para>
             <para>
             This is most nautrally an extension method for the DateTime class but this library is 
             built for .NET 2.0, not for .NET 3.5;  This means extension methods are a no-no.  
             </para>
             </remarks>
             <param name="source">The DateTime value to round</param>
             <returns>The ruonded DateTime value</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SharedUtilities.TrimVolumeAndSwapSlashes(System.String)">
            <summary>
            Utility routine for transforming path names. 
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
            <summary>
            Finds a signature in the zip stream. This is useful for finding 
            the end of a zip entry, for example. 
            </summary>
            <param name="stream"></param>
            <param name="SignatureToFind"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SharedUtilities.StringToMemoryStream(System.String)">
            <summary>
            Creates a <c>MemoryStream</c> for the given string. This is used internally by Library, specifically by 
            the ZipFile.AddStringAsFile() method.   But it may be useful in other scenarios. 
            </summary>
            <param name="s">The string to use as input for the MemoryStream</param>
            <returns>the MemoryStream. Reading the stream will give you the content of the String.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.SharedUtilities.GetTempFilename">
            <summary>
            Return a random filename, suitable for use as a temporary file.
            </summary>
            <remarks>
            The System.IO.Path.GetRandomFileName() method is not available on the Compact
            Framework, so this library provides its own substitute. 
            </remarks>
            <returns>a filename of the form DotNetZip-xxxxxxxx.tmp, where xxxxxxxx is replaced 
            by randomly chosen characters.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.CountingStream">
            <summary> 
            A Stream wrapper, used for bookkeeping on input or output
            streams.  In some cases, it is not possible to get the Position
            of a stream, let's say, on a write-only output stream like
            ASP.NET's Response.Output, or on a different write-only stream
            provided as the destination for the zip by the application.
            In this case, we can use this counting stream to count the bytes
            read or written.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            The  constructor.
            </summary>
            <param name="s">The underlying stream</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.WinZipAesCrypto">
            <summary> 
            This is a helper class supporting WinZip AES encryption.  
            This class is intended for use only by the DotNetZip library.
            </summary>
            <remarks>
            Most uses of the DotNetZip library will not involve direct calls into the
            WinZipAesCrypto class.  Instead, the WinZipAesCrypto class is instantiated and used by
            the ZipEntry() class when WinZip AES encryption or decryption on an entry is employed.
            </remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.WinZipAesCipherStream">
            <summary>
            A stream that encrypts as it writes, or decrypts as it reads.  The Crypto is AES in 
            CTR (counter) mode, which is 
            compatible with the AES encryption employed by WinZip 12.0.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.WinZipAesCipherStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zip.WinZipAesCrypto,System.Int64,Telerik.Sitefinity.Utilities.Zip.CryptoMode)">
            <summary>
            The constructor.
            </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cryptoParams">The pre-initialized WinZipAesCrypto object.</param>
            <param name="length">The maximum number of bytes to read from the stream.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.WinZipAesCipherStream.FinalAuthentication">
            <summary>
            Returns the final HMAC-SHA1-80 
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ZipCrypto">
            <summary> 
            This class implements the "traditional" or "classic" PKZip encryption,
            which today is considered to be weak. On the other hand it is
            ubiquitous. This class is intended for use only by the DotNetZip library.
            </summary>
            <remarks>
            Most uses of the DotNetZip library will not involve direct calls into the
            ZipCrypto class.  Instead, the ZipCrypto class is instantiated and used by
            the ZipEntry() class when encryption or decryption on an entry is employed.
            If for some reason you really wanted to use a weak encryption algorithm
            in some other application, you might use this library.  But you would be much
            better off using one of the built-in strong encryption libraries in the 
            .NET Framework, like the AES algorithm or SHA. 
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipCrypto.#ctor">
             <summary>
             The default constructor for ZipCrypto.
             </summary>
            
             <remarks>
             This class is intended for internal use by the library only. It's probably not useful to you. Seriously.
             Stop reading this documentation.  It's a waste of your time.  Go do something else.
             Check the football scores. Go get an ice cream with a friend.  Seriously.
             </remarks>
             
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipCrypto.MagicByte">
            <summary> 
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>		
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
            <summary> 
            Call this method on a cipher text to render the plaintext. You must
            first initialize the cipher with a call to InitCipher.
            </summary>		
            <example>
            <code>
            var cipher = new ZipCrypto();
            cipher.InitCipher(KeyPassword);
            // Decrypt the header.  This has a side effect of "further initializing the
            // encryption keys" in the traditional zip encryption. 
            byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
            </code>
            </example>
            <param name="cipherText">The encrypted buffer.</param>
            <param name="length">
            The number of bytes to encrypt.  
            Should be less than or equal to CipherText.Length.
            </param>
            <returns>The plaintext.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
            <summary>
            This is the converse of DecryptMessage.  It encrypts the plaintext
            and produces a ciphertext. 
            </summary>
            <param name="plaintext">The plain text buffer.</param>
            <param name="length">
            The number of bytes to encrypt.  
            Should be less than or equal to PlainText.Length.
            </param>
            <returns>The ciphertext.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipCrypto.InitCipher(System.String)">
             <summary>
             This initializes the cipher with the given password. 
             See AppNote.txt for details. 
             </summary>
             <param name="passphrase">The passphrase for encrypting or decrypting with this cipher.
             </param>
             <remarks>
             <code>
             Step 1 - Initializing the encryption keys
             -----------------------------------------
             Start with these keys:        
             Key(0) := 305419896 (0x12345678)
             Key(1) := 591751049 (0x23456789)
             Key(2) := 878082192 (0x34567890)
             
             Then, initialize the keys with a password:
             
             loop for i from 0 to length(password)-1
                 update_keys(password(i))
             end loop
             
             Where update_keys() is defined as:
             
             update_keys(char):
               Key(0) := crc32(key(0),char)
               Key(1) := Key(1) + (Key(0) bitwiseAND 000000ffH)
               Key(1) := Key(1) * 134775813 + 1
               Key(2) := crc32(key(2),key(1) rightshift 24)
             end update_keys
             
             Where crc32(old_crc,char) is a routine that given a CRC value and a
             character, returns an updated CRC value after applying the CRC-32
             algorithm described elsewhere in this document.
            
             </code>
             <para>
             After the keys are initialized, then you can use the cipher to encrypt
             the plaintext. 
             </para>
             <para>
             Essentially we encrypt the password with the keys, then discard the 
             ciphertext for the password. This initializes the keys for later use.
             </para>
             </remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ZipCipherStream">
            <summary>
            A Stream for reading and concurrently decrypting data from a zip file, 
            or for writing and concurrently encrypting data to a zip file.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipCipherStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zip.ZipCrypto,Telerik.Sitefinity.Utilities.Zip.CryptoMode)">
            <summary>
            The  constructor.
            </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cipher">The pre-initialized ZipCrypto object.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ZipEntry">
            <summary>
            This class models an entry in the directory contained within the zip file.
            The class is generally not used from within application code, though it is
            used by the ZipFile class.
            </summary>
            <summary>
            Represents a single entry in a ZipFile. Typically, applications
            get a ZipEntry by enumerating the entries within a ZipFile,
            or by adding an entry to a ZipFile.  
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.  
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ReadDirEntry(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads one entry from the zip directory structure in the zip file. 
            </summary>
            <param name="s">the stream from which to read.</param>
            <param name="expectedEncoding">
            The text encoding to use if the entry is not marked UTF-8.
            </param>
            <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry. 
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.LastModified">
             <summary>
             The time and date at which the file indicated by the ZipEntry was last modified. 
             </summary>
             
             <remarks>
             <para>
             The DotNetZip library sets the LastModified value for an entry, equal to the 
             Last Modified time of the file in the filesystem.  If an entry is added from a stream, 
             in which case no Last Modified attribute is available, the library uses 
             <c>System.DateTime.UtcNow</c> for this value, for the given entry. 
             </para>
            
             <para>
             It is also possible to set the LastModified value on an entry, to an arbitrary
             value.  Be aware that because of the way the PKZip specification describes how
             times are stored in the zip file, the full precision of the
             <c>System.DateTime</c> datatype is not stored in LastModified when saving zip
             files.  For more information on how times are formatted, see the PKZip
             specification.
             </para>
            
             <para>
             The last modified time of the file created upon a call to <c>ZipEntry.Extract()</c> 
             may be adjusted during extraction to compensate
             for differences in how the .NET Base Class Library deals
             with daylight saving time (DST) versus how the Windows
             filesystem deals with daylight saving time. 
             See http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx for more context.
             </para>
             <para>
             In a nutshell: Daylight savings time rules change regularly.  In
             2007, for example, the inception week of DST changed.  In 1977,
             DST was in place all year round. In 1945, likewise.  And so on.
             Win32 does not attempt to guess which time zone rules were in
             effect at the time in question.  It will render a time as
             "standard time" and allow the app to change to DST as necessary.
              .NET makes a different choice.
             </para>
             <para>
             Compare the output of FileInfo.LastWriteTime.ToString("f") with
             what you see in the Windows Explorer property sheet for a file that was last
             written to on the other side of the DST transition. For example,
             suppose the file was last modified on October 17, 2003, during DST but
             DST is not currently in effect. Explorer's file properties
             reports Thursday, October 17, 2003, 8:45:38 AM, but .NETs
             FileInfo reports Thursday, October 17, 2003, 9:45 AM.
             </para>
             <para>
             Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note:
             Pacific STANDARD Time. Even though October 17 of that year
             occurred during Pacific Daylight Time, Win32 displays the time as
             standard time because that's what time it is NOW.
             </para>
             <para>
             .NET BCL assumes that the current DST rules were in place at the
             time in question.  So, .NET says, "Well, if the rules in effect
             now were also in effect on October 17, 2003, then that would be
             daylight time" so it displays "Thursday, October 17, 2003, 9:45
             AM PDT" - daylight time.
             </para>
             <para>
             So .NET gives a value which is more intuitively correct, but is
             also potentially incorrect, and which is not invertible. Win32
             gives a value which is intuitively incorrect, but is strictly
             correct.
             </para>
             <para>
             Because of this funkiness, this library adds one hour to the LastModified time
             on the extracted file, if necessary.  That is to say, if the time in question
             had occurred in what the .NET Base Class Library assumed to be DST (an
             assumption that may be wrong given the constantly changing DST rules).
             </para>
             </remarks>
            
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ForceNoCompression">
             <summary>
             When this is set, the entry is not compressed when written to 
             the archive.  For example, the application might want to set flag to <c>true</c>
             this when zipping up JPG or MP3 files, which are already compressed.
             </summary>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ForceNoCompression"/>
            
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.LocalFileName">
            <summary>
            The name of the filesystem file, referred to by the ZipEntry. 
            </summary>
            
            <remarks>
            <para>
            This may be different than the path used in the archive itself. What I mean is, 
            if you call <c>Zip.AddFile("fooo.txt", AlternativeDirectory)</c>, then the 
            path used for the ZipEntry within the zip archive will be different than this path.  
            This path is used to locate the thing-to-be-zipped on disk. 
            </para>
            <para>
            If the entry is being added from a stream, then this is null (Nothing in VB).
            </para>
            
            </remarks>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.FileName"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.FileName">
             <summary>
             The name of the file contained in the ZipEntry. 
             </summary>
             
             <remarks>
             <para>
             When writing a zip, this path has backslashes replaced with 
             forward slashes, according to the zip spec, for compatibility
             with Unix(tm) and ... get this.... Amiga!
             </para>
            
             <para>
             This is the name of the entry in the ZipFile itself.  This name may be different
             than the name of the filesystem file used to create the entry (LocalFileName). In fact, there
             may be no filesystem file at all, if the entry is created from a stream or a string.
             </para>
            
             <para>
             When setting this property, the value is made permanent only after a call to one of the ZipFile.Save() methods 
             on the ZipFile that contains the ZipEntry. By reading in a ZipFile, then explicitly setting the FileName on an
             entry contained within the ZipFile, and then calling Save(), you will effectively rename the entry within 
             the zip archive.
             </para>
             </remarks>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.LocalFileName"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.VersionNeeded">
            <summary>
            The version of the zip engine needed to read the ZipEntry.  
            </summary>
            <remarks>
            This is usually 0x14. 
            (Decimal 20). If ZIP64 is in use, the version will be decimal 45.  
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry. 
             </summary>
            
             <remarks>
             By default, the Comment is encoded in IBM437 code page. You can specify 
             an alternative with <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ProvisionalAlternateEncoding"/>
             </remarks>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</seealso>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.RequiresZip64">
            <summary>
            Indicates whether the entry requires ZIP64 extensions.
            </summary>
            <remarks>
            <para>
            This property is null (Nothing in VB) until a Save() method on the containing 
            <see cref="T:Telerik.Sitefinity.Utilities.Zip.ZipFile"/> instance has been called. The property is non-null (HasValue is true)
            only after a Save() method has been called. 
            </para>
            <para>
            After the containing ZipFile  has been saved. the Value of this property is true if any of the following 
            three conditions holds:  the uncompressed size of the entry is larger than 0xFFFFFFFF; 
            the compressed size of the entry is larger than 0xFFFFFFFF; the relative offset of the entry within the 
            zip archive is larger than 0xFFFFFFFF.  These quantities are not known until a Save() is attempted on the 
            zip archive and the compression is applied.  
            </para>
            <para>If none of the three conditions holds, then the Value is false.</para>
            <para>
            A value of false does not indicate that the entry, as saved in the zip archive, does not use
            ZIP64.  It merely indicates that ZIP64 is not required.  An entry may use ZIP64 even when not
            required if the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing ZipFile
            instance is set to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Always"/>, or if
            the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing ZipFile
            instance is set to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.AsNecessary"/> and the output stream was not seekable.
            </para>
            </remarks>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OutputUsedZip64"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OutputUsedZip64">
            <summary>
            Indicates whether the entry actually used ZIP64 extensions, as it was most recently written 
            to the output file or stream.
            </summary>
            <remarks>
            <para>
            This Nullable property is null (Nothing in VB) until a Save() method on the containing 
            <see cref="T:Telerik.Sitefinity.Utilities.Zip.ZipFile"/> instance has been called. HasValue is true only after a Save() method
            has been called. 
            </para>
            <para>
            The value of this property for a particular ZipEntry may change over successive calls to
            Save() methods on the containing ZipFile, even if the file that corresponds to the ZipEntry does
            not. This may happen if other entries contained in the ZipFile expand, causing the offset 
            for this particular entry to exceed 0xFFFFFFFF. 
            </para>
            </remarks>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.RequiresZip64"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.BitField">
             <summary>
             The bitfield as defined in the zip spec. You probably never need to look at this.
             </summary>
            
             <remarks>
             <code>
             bit  0 - set if encryption is used.
             b. 1-2 - set to determine whether normal, max, fast deflation.  
                      This library always leaves these bits unset when writing (indicating 
                      "normal" deflation").
            
             bit  3 - indicates crc32, compressed and uncompressed sizes are zero in
                      local header.  We always leave this as zero on writing, but can read
                      a zip with it nonzero. 
            
             bit  4 - reserved for "enhanced deflating". This library doesn't do enhanced deflating.
             bit  5 - set to indicate the zip is compressed patched data.  This library doesn't do that.
             bit  6 - set if strong encryption is used (must also set bit 1 if bit 6 is set)
             bit  7 - unused
             bit  8 - unused
             bit  9 - unused
             bit 10 - unused
             Bit 11 - Language encoding flag (EFS).  If this bit is set,
                      the filename and comment fields for this file
                      must be encoded using UTF-8. This library currently does not support UTF-8.
             Bit 12 - Reserved by PKWARE for enhanced compression.
             Bit 13 - Used when encrypting the Central Directory to indicate 
                      selected data values in the Local Header are masked to
                      hide their actual values.  See the section describing 
                      the Strong Encryption Specification for details.
             Bit 14 - Reserved by PKWARE.
             Bit 15 - Reserved by PKWARE.
             </code>
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.CompressionMethod">
            <summary>
            The compression method employed for this ZipEntry. 
            </summary>
            
            <remarks>
            <para>
            The ZIP specification allows a variety of compression methods.  This library 
            supports just two:  0x08 = Deflate.  0x00 = Store (no compression).  
            </para>
            
            <para>
            When reading an entry from an existing zipfile, the value you retrieve here
            indicates the compression method used on the entry by the original creator of the zip.  
            When writing a zipfile, you can specify either 0x08 (Deflate) or 0x00 (None).  If you 
            try setting something else, you will get an exception.  
            </para>
            
            <para>
            You may wish to set CompressionMethod to 0 (None) when zipping previously compressed
            data like a jpg, png, or mp3 file.  This can save time and cpu cycles.
            Setting CompressionMethod to 0 is equivalent to setting ForceNoCompression to true. 
            </para>
            
            <para>
            When updating a ZipFile, you may not modify the CompressionMethod on an entry that has been encrypted. 
            In other words, if you read an existing ZipFile with one of the ZipFile.Read() methods, and then 
            change the CompressionMethod on an entry that has Encryption not equal to None, you will receive an exception. 
            There is no way to modify the compression on an encrypted entry, without extracting it and re-adding it 
            into the ZipFile.  
            </para>
            </remarks>
            
            <example>
            In this example, the first entry added to the zip archive uses 
            the default behavior - compression is used where it makes sense.  
            The second entry, the MP3 file, is added to the archive without being compressed.
            <code>
            using (ZipFile zip = new ZipFile(ZipFileToCreate))
            {
              ZipEntry e1= zip.AddFile(@"c:\temp\Readme.txt");
              ZipEntry e2= zip.AddFile(@"c:\temp\StopThisTrain.mp3");
              e2.CompressionMethod = 0;
              zip.Save();
            }
            </code>
            
            <code lang="VB">
            Using zip as new ZipFile(ZipFileToCreate)
              zip.AddFile("c:\temp\Readme.txt")
              Dim e2 as ZipEntry = zip.AddFile("c:\temp\StopThisTrain.mp3")
              e2.CompressionMethod = 0
              zip.Save
            End Using
            </code>
            </example>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.CompressedSize">
            <summary>
            The compressed size of the file, in bytes, within the zip archive. 
            </summary>
            <remarks>
            The compressed size is computed during compression. This means that it is only
            valid to read this AFTER reading in an existing zip file, or AFTER saving a
            zipfile you are creating.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.UncompressedSize">
            <summary>
            The size of the file, in bytes, before compression, or after extraction. 
            </summary>
            <remarks>
            This property is valid AFTER reading in an existing zip file, or AFTER saving the 
            ZipFile that contains the ZipEntry.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
             
             <remarks>
             <para>
             This is a ratio of the compressed size to the uncompressed size of the entry,
             expressed as a double in the range of 0 to 100+. A value of 100 indicates no
             compression at all.  It could be higher than 100 when the compression algorithm
             actually inflates the data.
             </para>
            
             <para>
             You could format it for presentation to a user via a format string of "{3,5:F0}%"
             to see it as a percentage. 
             </para>
            
             <para>
             If the size of the original uncompressed file is 0, (indicating a denominator of 0)
             the return value will be zero. 
             </para>
            
             <para>
             This property is valid AFTER reading in an existing zip file, or AFTER saving the 
             ZipFile that contains the ZipEntry.
             </para>
            
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Crc32">
            <summary>
            The CRC (Cyclic Redundancy Check) on the contents of the ZipEntry. 
            </summary>
            
            <remarks>
            You probably don't need to concern yourself with this. The CRC is generated according
            to the algorithm described in the Pkzip specification. It is a read-only property;
            when creating a Zip archive, the CRC for each entry is set only after a call to
            Save() on the containing ZipFile.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file). 
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.UsesEncryption">
            <summary>
            A derived property that is <c>true</c> if the entry uses encryption.  
            </summary>
            <remarks>
            This is a readonly property on the entry.
            Upon reading an entry, this bool is determined by
            the data read.  When writing an entry, this bool is
            determined by whether the Encryption property is set to something other than
            EncryptionAlgorithm.None. 
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Encryption">
             <summary>
             Set this to specify which encryption algorithm to use for the entry.
             </summary>
             
             <remarks>
             <para>
             When setting this property, you must also set a KeyPassword on the entry.  The set of
             algorithms supported is determined by the authors of this library.  The PKZIP
             specification from PKWare defines a set of encryption algorithms, and the data formats
             for the zip archive that support them. Other vendors of tools and libraries, such as
             WinZip or Xceed, also specify and support different encryption algorithms and data
             formats.
             </para>
            
             <para>
             There is no common, ubiquitous multi-vendor standard for strong encryption. There is
             broad support for "traditional" Zip encryption, sometimes called Zip 2.0 encryption,
             as specified by PKWare, but this encryption is considered weak. This library currently
             supports AES 128 and 256 in addition to the Zip 2.0 "weak" encryption.
             </para>
            
             <para>
             The WinZip AES encryption algorithms are not supported on the .NET Compact Framework. 
             </para>
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Password">
             <summary>
             The KeyPassword to be used when encrypting a ZipEntry upon ZipFile.Save(), or 
             when decrypting an entry upon Extract().
             </summary>
            
             <remarks>
             <para>
             This is a write-only property on the entry. 
             Set this to request that the entry be encrypted when writing the zip
             archive, or set it to specify the password to be used when extracting an 
             existing entry that is encrypted.   
             </para>
            
             <para>
             The password set here is implicitly 
             used to encrypt the entry during the Save() operation, or to decrypt during
             the <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract"/> or <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OpenReader"/> operation. 
             </para>
            
             <para>
             Some comments on Updating archives: Suppose you read a zipfile, and there is an
             encrypted entry.  Setting the password on that entry and then saving the zipfile
             does not update the password on that entry in the archive.  Instead, what happens
             is the existing entry is copied through to the new zip archive, in its original
             encrypted form.  Upon re-reading that archive, the entry can be decrypted with its
             original password. 
             </para>
            
             <para>
             If you read a zipfile, you cannot modify the password on any encrypted entry,
             except by extracting the entry with the first password (if any), removing the original
             entry via <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.RemoveEntry(Telerik.Sitefinity.Utilities.Zip.ZipEntry)"/>,  and then adding
             a new entry with a new password. 
             </para>
            
             <para>
             If you read a zipfile, and there is an un-encrypted entry, you can set the password
             on the entry and then call Save() on the ZipFile, and get encryption on that entry. 
             </para>
            
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OverwriteOnExtract">
            <summary>
            Specifies that the extraction should overwrite any existing files.
            </summary>
            <remarks>
            This applies only when calling an Extract method. By default this 
            property is false. Generally you will get overwrite behavior by calling 
            one of the overloads of the Extract() method that accepts a boolean flag
            to indicate explicitly whether you want overwrite.
            </remarks>
            <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.Boolean)"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.WillReadTwiceOnInflation">
             <summary>
             A callback that allows the application to specify whether multiple reads of the
             stream should be performed, in the case that a compression operation actually
             inflates the size of the file data.  
             </summary>
            
             <remarks>
             <para>
             In some cases, applying the Deflate compression algorithm in DeflateStream can
             result an increase in the size of the data.  This "inflation" can happen with
             previously compressed files, such as a zip, jpg, png, mp3, and so on.  In a few
             tests, inflation on zip files can be as large as 60%!  Inflation can also happen
             with very small files.  In these cases, by default, the DotNetZip library
             discards the compressed bytes, and stores the uncompressed file data into the
             zip archive.  This is an optimization where smaller size is preferred over
             longer run times.
             </para>
            
             <para>
             The application can specify that compression is not even tried, by setting the
             ForceNoCompression flag.  In this case, the compress-and-check-sizes process as
             decribed above, is not done.
             </para>
            
             <para>
             In some cases, neither choice is optimal.  The application wants compression,
             but in some cases also wants to avoid reading the stream more than once.  This
             may happen when the stream is very large, or when the read is very expensive, or
             when the difference between the compressed and uncompressed sizes is not
             significant.
             </para>
            
             <para>
             To satisfy these applications, this delegate allows the DotNetZip library to ask
             the application to for approval for re-reading the stream.  As with other
             properties (like KeyPassword and ForceNoCompression), setting the corresponding
             delegate on the ZipFile class itself will set it on all ZipEntry items that are
             subsequently added to the ZipFile instance.
             </para>
            
             </remarks>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WillReadTwiceOnInflation"/>
             <seealso cref="T:Telerik.Sitefinity.Utilities.Zip.ReReadApprovalCallback"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.WantCompression">
             <summary>
             A callback that allows the application to specify whether compression should
             be used for a given entry that is about to be added to the zip archive.
             </summary>
            
             <remarks>
             See <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WantCompression" />
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.UseUnicodeAsNecessary">
            <summary>
            Set to indicate whether to use UTF-8 encoding on filenames and 
            comments, according to the PKWare specification.  
            </summary>
            <remarks>
            If this flag is set, the entry will be marked as encoded with UTF-8, 
            according to the PWare spec, if necessary.  Necessary means, if the filename or 
            entry comment (if any) cannot be reflexively encoded with the default (IBM437) code page. 
            </remarks>
            <remarks>
            Setting this flag to true is equivalent to setting <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ProvisionalAlternateEncoding"/> to <c>System.Text.Encoding.UTF8</c>
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ProvisionalAlternateEncoding">
             <summary>
             The text encoding to use for this ZipEntry, when the default
             encoding is insufficient.
             </summary>
            
             <remarks>
             <para>
             According to the zip specification from PKWare, filenames and comments for a
             ZipEntry are encoded either with IBM437 or with UTF8.  But, some archivers do not
             follow the specification, and instead encode characters using the system default
             code page, or an arbitrary code page.  For example, WinRAR when run on a machine in
             Shanghai may encode filenames with the Chinese (Big-5) code page.  This behavior is
             contrary to the Zip specification, but it occurs anyway.  This property exists to
             support that non-compliant behavior when reading or writing zip files.
             </para>
             <para>
             When writing zip archives that will be read by one of these other archivers, use this property to 
             specify the code page to use when encoding filenames and comments into the zip
             file, when the IBM437 code page will not suffice.
             </para>
             <para>
             Be aware that a zip file created after you've explicitly specified the code page will not 
             be compliant to the PKWare specification, and may not be readable by compliant archivers. 
             On the other hand, many archivers are non-compliant and can read zip files created in 
             arbitrary code pages. 
             </para>
             <para>
             When using an arbitrary, non-UTF8 code page for encoding, there is no standard way for the 
             creator (DotNetZip) to specify in the zip file which code page has been used. DotNetZip is not
             able to inspect the zip file and determine the codepage used for the entries within it. Therefore, 
             you, the application author, must determine that.  If you use a codepage which results in filenames
             that are not legal in Windows, you will get exceptions upon extract. Caveat Emptor.
             </para>
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ActualEncoding">
            <summary>
            The text encoding actually used for this ZipEntry.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Read(Telerik.Sitefinity.Utilities.Zip.ZipFile,System.Boolean)">
            <summary>
            Reads one ZipEntry from the given stream.  If the entry is encrypted, we don't
            decrypt at this point.  We also do not decompress.  Mostly we read metadata.
            </summary>
            <param name="zf">the zipfile this entry belongs to.</param>
            <param name="first">true of this is the first entry being read from the stream.</param>
            <returns>the ZipEntry read from the stream.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract">
             <summary>
             Extract the entry to the filesystem, starting at the current working directory. 
             </summary>
             
             <overloads>
             This method has a bunch of overloads! One of them is sure to be
             the right one for you... If you don't like these, check out the 
             <c>ExtractWithPassword()</c> methods.
             </overloads>
                     
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OverwriteOnExtract"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.Boolean)"/>
            
             <remarks>
             <para>
             Existing entries in the filesystem will not be overwritten. If you would like to 
             force the overwrite of existing files, see the <c>OverwriteOnExtract</c> property, 
             or try one of the overloads of the Extract method that accepts a boolean flag
             to indicate explicitly whether you want overwrite.
             </para>
             <para>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </para>
             </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.Boolean)">
            <summary>
            Extract the entry to a file in the filesystem, potentially overwriting
            any existing file.
            </summary>
            <remarks>
            <para>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </para>
            </remarks>
            <param name="overwrite">true if the caller wants to overwrite an existing file by the same name in the filesystem.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.IO.Stream)">
            <summary>
            Extracts the entry to the specified stream. 
            </summary>
            
            <remarks>
            
            <para>
            For example, the caller could specify Console.Out, or a MemoryStream.
            </para>
            
            </remarks>
            
            <param name="stream">the stream to which the entry should be extracted.  </param>
            
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.String)">
            <summary>
            Extract the entry to the filesystem, starting at the specified base directory. 
            </summary>
            
            <param name="baseDirectory">the pathname of the base directory</param>
            
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OverwriteOnExtract"/>
            <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.String,System.Boolean)"/>
            <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Extract(System.String)"/>
            
            <example>
            This example extracts only the entries in a zip file that are .txt files, into a directory called "textfiles".
            <code lang="C#">
            using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
            {
              foreach (string s1 in zip.EntryFilenames)
              {
                if (s1.EndsWith(".txt")) 
                {
                  ZipEntry entry= zip[s1];
                  entry.Extract("textfiles");
                }
              }
            }
            </code>
            <code lang="VB">
              Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                  Dim s1 As String
                  For Each s1 In zip.EntryFilenames
                      If s1.EndsWith(".txt") Then
                          Dim entry as ZipEntry
                          entry = zip(s1)
                          entry.Extract("textfiles")
                      End If
                  Next
              End Using
            </code>
            </example>
            
            <remarks>
            <para>
            Existing entries in the filesystem will not be overwritten. If you would like to 
            force the overwrite of existing files, see the <c>OverwriteOnExtract</c> property, 
            or try one of the overloads of the Extract method that accept a boolean flag
            to indicate explicitly whether you want overwrite.
            </para>
            <para>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.String,System.Boolean)">
            <summary>
            Extract the entry to the filesystem, starting at the specified base directory, 
            and potentially overwriting existing files in the filesystem. 
            </summary>
            
            <remarks>
            <para>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </para>
            </remarks>
            
            <param name="baseDirectory">the pathname of the base directory</param>
            <param name="overwrite">If true, overwrite any existing files if necessary upon extraction.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ExtractWithPassword(System.String)">
             <summary>
             Extract the entry to the filesystem, using the current working directory
             and the specified password. 
             </summary>
            
             <overloads>
             This method has a bunch of overloads! One of them is sure to be
             the right one for you...
             </overloads>
                     
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OverwriteOnExtract"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ExtractWithPassword(System.Boolean,System.String)"/>
            
             <remarks>
             <para>
             Existing entries in the filesystem will not be overwritten. If you would like to 
             force the overwrite of existing files, see the <c>OverwriteOnExtract</c> property, 
             or try one of the overloads of the ExtractWithPassword method that accept a boolean flag
             to indicate explicitly that you want overwrite.
             </para>
             <para>
             See the remarks on the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.LastModified"/> property for some details 
             about how the "last modified" time of the created file is set.
             </para>
             </remarks>
             
             <example>
             In this example, entries that use encryption are extracted using a particular password.
             <code lang="VB">
             Using zip As new ZipFile(FilePath)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.UsesEncryption)
                       e.ExtractWithPassword("Secret!")
                     Else
                       e.Extract
                     End If 
                 Next
             End Using
             </code>
             </example>
             <param name="password">The KeyPassword to use for decrypting the entry.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ExtractWithPassword(System.String,System.String)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory,
             and using the specified password. 
             </summary>
             
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OverwriteOnExtract"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ExtractWithPassword(System.String,System.Boolean,System.String)"/>
            
             <remarks>
             <para>
             Existing entries in the filesystem will not be overwritten. If you would like to 
             force the overwrite of existing files, see the <c>OverwriteOnExtract</c> property, 
             or try one of the overloads of the ExtractWithPassword method that accept a boolean flag
             to indicate explicitly whether you want overwrite.
             </para>
             <para>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </para>
             </remarks>
             
             <param name="baseDirectory">The pathname of the base directory.</param>
             <param name="password">The KeyPassword to use for decrypting the entry.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ExtractWithPassword(System.Boolean,System.String)">
            <summary>
            Extract the entry to a file in the filesystem, potentially overwriting
            any existing file.
            </summary>
            
            <remarks>
            <para>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </para>
            </remarks>
            
            <param name="overwrite">true if the caller wants to overwrite an existing 
            file by the same name in the filesystem.</param>
            <param name="password">The KeyPassword to use for decrypting the entry.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ExtractWithPassword(System.String,System.Boolean,System.String)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory, 
             and potentially overwriting existing files in the filesystem. 
             </summary>
             
             <remarks>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </remarks>
            
             <param name="baseDirectory">the pathname of the base directory</param>
             <param name="overwrite">If true, overwrite any existing files if necessary upon extraction.</param>
             <param name="password">The KeyPassword to use for decrypting the entry.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.ExtractWithPassword(System.IO.Stream,System.String)">
            <summary>
            Extracts the entry to the specified stream, using the specified KeyPassword.
            For example, the caller could extract to Console.Out, or to a MemoryStream.
            </summary>
            
            <remarks>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </remarks>
            
            <param name="stream">the stream to which the entry should be extracted.  </param>
            <param name="password">The password to use for decrypting the entry.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OpenReader">
            <summary>
            Opens the backing stream for the zip entry in the archive, for reading. 
            </summary>
            
            <remarks>
            
            <para>
            The ZipEntry has methods that extract the entry to an already-opened stream.
            This is an alternative method for those applications that wish to manipulate the stream directly.
            </para>
            
            <para>
            The <see cref="T:Telerik.Sitefinity.Utilities.Zip.CrcCalculatorStream"/> that is returned is just a regular read-only stream - you can use it as you would
            any stream.  The one additional feature it adds is that it calculates a CRC32 on the bytes of the stream 
            as it is read.  This CRC should be used by the application to validate the content of the ZipEntry, when 
            the read is complete.  You don't have to validate the CRC, but you should. Check the example for how to do this. 
            </para>
            
            <para>
            If the entry is protected with a password, then you need to set the password on the entry prior to calling 
            <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OpenReader"/>.
            </para>
            
            </remarks>
            
            <example>
            In this example, we open a zipfile, then read in a named entry via a stream, scanning
            the bytes in the entry as we go.  Finally, the CRC and the size of the entry are verified.
            <code>
            using (ZipFile zip = new ZipFile(ZipFileToRead))
            {
              ZipEntry e1= zip["Download.mp3"];
              using (CrcCalculatorStream s = e1.OpenReader())
              {
                byte[] buffer = new byte[4096];
                int n, totalBytesRead= 0;
                do {
                  n = s.Read(buffer,0, buffer.Length);
                  totalBytesRead+=n; 
                } while (n&gt;0);
                 if (s.Crc32 != e1.Crc32)
                  throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                 if (totalBytesRead != e1.UncompressedSize)
                  throw new Exception(string.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
              }
            }
            </code>
            <code lang="VB">
              Using zip As New ZipFile(ZipFileToRead)
                  Dim e1 As ZipEntry = zip.Item("Download.mp3")
                  Using s As CrcCalculatorStream = e1.OpenReader
                      Dim n As Integer
                      Dim buffer As Byte() = New Byte(4096) {}
                      Dim totalBytesRead As Integer = 0
                      Do
                          n = s.Read(buffer, 0, buffer.Length)
                          totalBytesRead = (totalBytesRead + n)
                      Loop While (n &gt; 0)
                      If (s.Crc32 &lt;&gt; e1.Crc32) Then
                          Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                      End If
                      If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                          Throw New Exception(String.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                      End If
                  End Using
              End Using
            </code>
            </example>
            <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Extract(System.IO.Stream)"/>
            <returns>The Stream for reading.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipEntry.OpenReader(System.String)">
            <summary>
            Opens the backing stream for an encrypted zip entry in the archive, for reading. 
            </summary>
            
            <remarks>
            <para>
            See the documentation on the OpenReader() method for full details.  This overload allows the 
            application to specify a password for the ZipEntry to be read. 
            </para>
            </remarks>
            
            <param name="password">The password to use for decrypting the entry.</param>
            <returns>The Stream for reading.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.EncryptionAlgorithm">
            <summary>
            An enum that provides the various encryption algorithms supported by this library.
            </summary>
            <remarks>
            <para>
            PkzipWeak implies the use of Zip 2.0 encryption, which is known to be weak and subvertible. 
            </para>
            <para>
            A note on interoperability: Values of PkzipWeak and None are specified in the PKWare AppNote.txt document, are 
            considered to be "standard".  Zip archives produced using these options will be interoperable with many other
            zip tools and libraries, including Windows Explorer.
            </para>
            <para>
            Values of WinZipAes128 and WinZipAes256 are not part of the Zip specification, but rather imply the use of a 
            vendor-specific extension from WinZip. If you want to produce interoperable Zip archives, do not use these values. 
            For example, if you
            produce a zip archive using WinZipAes256, you will be able to open it in Windows Explorer on Windows XP and Vista, 
            but you will not be able to extract entries; trying this will lead to an "unspecified error". For this reason, 
            some people have said that a zip archive that uses WinZip's AES encryption is not actually a zip archive at all.
            A zip archive produced this way will be readable with the WinZip tool
            (Version 11 and beyond).
            </para>
            <para>
            There are other third-party tools and libraries, both commercial and otherwise, that support WinZip's 
            AES encryption. These will be able to read AES-encrypted zip archives produced by DotNetZip, and conversely applications 
            that use DotNetZip to read zip archives will be able to read AES-encrypted archives produced by those tools
            or libraries.  Consult the documentation for those other tools and libraries to find out if WinZip's AES 
            encryption is supported. 
            </para>
            <para>
            In case you care: According to the WinZip specification, the actual key used is derived from the 
            <see cref="!:ZipEntry.KeyPassword"/> via an algorithm that complies with RFC 2898, using an iteration count of 1000.
            I am no security expert, but I think you should use a long-ish password if you employ 256-bit AES
            encryption.  Make it 16 characters or more.  
            </para>
            <para>
            The WinZip AES algorithms are not supported with the version of DotNetZip that runs on the .NET Compact Framework. 
            This is because .NET CF lacks the HMACSHA1 class that is required for producing the archive.
            </para>
            </remarks>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EncryptionAlgorithm.WinZipAes128">
            <summary>
            WinZip AES encryption (128 key bits).
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EncryptionAlgorithm.WinZipAes256">
            <summary>
            WinZip AES encryption (256 key bits).
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.EntrySource">
            <summary>
            An enum that specifies the source of the ZipEntry. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EntrySource.None">
            <summary>
            Default value.  Invalid on a bonafide ZipEntry.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EntrySource.Filesystem">
            <summary>
            Entry was instantiated by Adding an entry from the filesystem.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EntrySource.Zipfile">
            <summary>
            Entry was instantiated by reading a zipfile.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.EntrySource.Stream">
            <summary>
            Entry was instantiated via a stream or string.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.ZipFile">
            <summary>
            The ZipFile type represents a zip archive file.  This is the main type in the 
            DotNetZip class library.  This class reads and writes zip files, as defined in the format
            for zip described by PKWare.  The compression for this implementation was, at one time, based on the
            System.IO.Compression.DeflateStream base class in the .NET Framework
            base class library, available in v2.0 and later of the .NET Framework. As of v1.7 of DotNetZip,
            the compression is provided by a managed-code version of Zlib, included with DotNetZip. 
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Name">
            <summary>
            This read-only property specifies the name of the zipfile to read or
            write. It can be implicitly set when the instance of the ZipFile type is
            created, if you use the <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String)"/> Constructor, or it is
            set when <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Save(System.String)"/> is called. When instantiating a
            ZipFile to read from or write to a stream, the Name property remains null.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.CompressionLevel">
            <summary>
            Sets the compression level to be used for entries when saving the zip archive.
            </summary>
            <remarks>
            The compression level setting is used at the time of Save(). The
            same level is applied to all ZipEntry instances contained in the ZipFile during the save.  
            If you do not set this property, the default compression level is used, which normally gives 
            a good balance of compression efficiency and compression speed.  In some tests, using 
            BEST_COMPRESSION can double the time it takes to compress, while delivering just a small
            increase in compression efficiency.  This behavior will vary with the type of data you 
            compress.  If you are in doubt, just leave this setting alone, and accept the default.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Comment">
             <summary>
             A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
             This property is read/write for the zipfile. It allows the application to
             specify a comment for the zipfile, or read the comment for the zipfile. 
             After setting this property, changes are only made permanent when you call a
             <c>Save()</c> method.
             </para>
            
             <para>
             According to the zip specification, the comment is not encrypted, even if there is a password
             set on the zip archive. 
             </para>
            
             <para>
             The zip spec does not describe how to encode the comment string in a code page other than IBM437. 
             Therefore, for "compliant" zip tools and libraries, comments will use IBM437.  However, there are
             situations where you want an encoded Comment, for example using code page 950 "Big-5 Chinese".
             DotNetZip will encode the comment in the code page specified by <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding"/>,
             at the time of the call to ZipFile.Save().
             </para>
            
             <para>
             When creating a zip archive using this library, it is possible to change the value of 
             <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding" /> between each entry you add, and between adding entries and the 
             call to Save(). Don't do this.  It will likely result in a zipfile that is not readable by 
             any tool or application. 
             For best interoperability, leave <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding" /> alone, or 
             specify it only once, before adding any entries to the ZipFile instance.
             </para>
            
             </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Verbose">
            <summary>
            Indicates whether verbose output is sent to the StatusMessageWriter
            during <c>AddXxx()</c> and <c>ReadXxx()</c> operations. 
            </summary>
            <remarks>
            This is a synthetic property.  It returns true if the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.StatusMessageTextWriter">StatusMessageTextWriter</see> is non-null. 
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.CaseSensitiveRetrieval">
            <summary>
            Indicates whether to perform case-sensitive matching on the filename when retrieving
            entries in the zipfile via the string-based indexer.  
            </summary>
            <remarks>
            The default value is <c>false</c>,
            which means DON'T do case-sensitive matching. In other words, retrieving
            zip["ReadMe.Txt"] is the same as zip["readme.txt"].
            It really makes sense to set this to <c>true</c> only if you are not running on
            Windows, which has case-insensitive filenames. But since this library is not built for
            non-Windows platforms, in most cases you should just leave this property alone. 
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseUnicodeAsNecessary">
            <summary>
            Indicates whether to encode entry filenames and entry comments using Unicode 
            (UTF-8) according to the PKWare specification, for those filenames and comments
            that cannot be encoded in the IBM437 character set.
            </summary>
            <remarks>
            <para>
            The PKWare specification provides for encoding in either the IBM437 code page, or in UTF-8. 
            This flag selects the encoding according to that specification. 
            By default, this flag is false, and filenames and comments are encoded 
            into the zip file in the IBM437 codepage. 
            Setting this flag to true will specify that
            filenames and comments are encoded with UTF-8. 
            </para>
            <para>
            Zip files created with strict adherence to the PKWare specification
            with respect to UTF-8 encoding can contain entries with filenames containing
            any combination of Unicode characters, including the full 
            range of characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many 
            other alphabets. 
            However, because the UTF-8 portion of the PKWare specification is not broadly
            supported by other zip libraries and utilities, such zip files may not
            be readable by your favorite zip tool or archiver. In other words, interoperability
            will decrease if you set this flag to true. 
            </para>
            <para>
            In particular, Zip files created with strict adherence to the PKWare 
            specification with respect to UTF-8 encoding will not work well with 
            Explorer in Windows XP or Windows Vista, because Vista compressed folders 
            do not support UTF-8 in zip files.  Vista can read the zip files, but shows
            the filenames incorrectly.  Unpacking from Windows Vista Explorer will result in filenames
            that have rubbish characters in place of the high-order UTF-8 bytes.
            </para>
            <para>
            Also, zip files that use UTF-8 encoding will not work well 
            with Java applications that use the java.util.zip classes, as of 
            v5.0 of the Java runtime. The Java runtime does not correctly 
            implement the PKWare specification in this regard.
            </para>
            <para>
            As a result, we have the unfortunate situation that "correct" 
            behavior by the DotNetZip library with regard to Unicode during zip creation will result 
            in zip files that are readable by strictly compliant and current tools (for example the most 
            recent release of the commercial WinZip tool); but these zip files will
            not  be readable by various other tools or libraries, including Windows Explorer.
            </para>
            <para>
            The DotNetZip library can read and write zip files 
            with UTF8-encoded entries, according to the PKware spec.  If you use DotNetZip for both 
            creating and reading the zip file, and you use UTF-8, there will be no loss of information 
            in the filenames. For example, using a self-extractor created by this
            library will allow you to unpack files correctly with no loss of 
            information in the filenames. 
            </para>
            <para>
            Encoding filenames and comments using the IBM437 codepage, the default
            behavior, will cause loss of information on some filenames,
            but the resulting zipfile will
            be more interoperable with other utilities. As an example of the 
            loss of information, the o-tilde character will be down-coded to plain o. 
            Likewise, the O with a stroke through it, used in Danish and Norwegian,
            will be down-coded to plain o. Chinese characters cannot be represented
            in codepage IBM437; when using the default encoding, Chinese characters in 
            filenames will be represented as ?.  
            </para>
            <para>
            The loss of information associated to the use of the IBM437 encoding can lead to
            runtime errors. For example, using IBM437, any sequence of 4 Chinese characters will
            be encoded as ????.  If your application creates a ZipFile, then adds two files, each
            with names of four Chinese characters each, this will result in a duplicate filename
            exception.  In the case where you add a single file with a name containing four
            Chinese characters, calling Extract() on the entry that has question marks in the
            filename will result in an exception, because the question mark is not legal for use
            within filenames on Windows.  These are just a few examples of the problems associated
            to loss of information.
            </para>
            <para>
            This flag is independent of the encoding of the content within the 
            entries in the zip file.  
            </para>
            <para>
            Rather than specify the encoding in a binary fashion using this flag, an application
            can specify an arbitrary encoding via the <see
            cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding"/> property.  Setting 
            the encoding explicitly when creating zip archives will result in non-compliant 
            zip files that, curiously, are fairly interoperable.  The challenge is, the PKWare specification
            does not provide for a way to specify that an entry in a zip archive uses a code page that is
            neither IBM437 nor UTF-8.   Therefore 
            if you set the encoding explicitly when creating a zip archive, you must take care upon 
            reading the zip archive to use the same code page.  If you get it wrong, the behavior is 
            undefined and may result in incorrect filenames, exceptions, stomach upset, hair loss, and acne.  
            </para>
            </remarks>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</seealso>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseZip64WhenSaving">
             <summary>
             Specify whether to use ZIP64 extensions when saving a zip archive. 
             </summary>
             <remarks>
            
             <para>
             Designed many years ago, the original zip specification from PKWARE allowed for 32-bit
             quantities for the compressed and uncompressed sizes of zip entries, as well as a
             32-bit quantity for specifying the length of the zip archive itself, and a maximum of
             65535 entries.  These limits are now regularly exceeded in many backup and archival
             scenarios.  Recently, PKWare added extensions to the original zip spec, called "ZIP64
             extensions", to raise those limitations.  This property governs whether the ZipFile
             instance will use those extensions when writing zip archives within a call to one of
             the Save() methods.  The use of these extensions is optional and explicit in DotNetZip
             because, despite the status of ZIP64 as a bona fide standard, not all other zip tools
             support ZIP64.
             </para>
             
             <para>
             Set this property to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Always"/> to always use ZIP64 extensions
             when saving, regardless of whether your zip archive needs it.  Suppose you add 5 files,
             each under 100k, to a ZipFile.  If you specify Always for this flag before calling the
             Save() method, you will get a ZIP64 archive, though you do not need to use ZIP64
             because none of the original zip limits had been exceeded.
             </para>
            
             <para>
             Set this property to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Never"/> to tell the DotNetZip library to
             never use ZIP64 extensions.  This is useful for maximum compatibility and
             interoperability, at the expense of the capability of handling large files or large
             archives.  NB: Windows Explorer in Windows XP and Windows Vista cannot currently
             extract files from a zip64 archive, so if you want to guarantee that a zip archive
             produced by this library will work in Windows Explorer, use <c>Never</c>. If you set
             this property to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Never"/>, and your application creates a zip
             that would exceed one of the ZIP limits, the library will throw an exception during the
             Save().
             </para>
            
             <para>
             Set this property to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.AsNecessary"/> to tell the DotNetZip
             library to use the zip64 extensions when required by the entry. After the file is
             compressed, the original and compressed sizes are checked, and if they exceed the
             limits described above, then zip64 can be used. That is the general idea, but there is
             an additional wrinkle when saving to a non-seekable device, like the ASP.NET
             <c>Response.OutputStream</c>, or <c>Console.Out</c>.  When using non-seekable streams
             for output, the entry header - which indicates whether zip64 is in use - is emitted
             before it is known if zip64 is necessary.  It is only after all entries have been saved
             that it can be known if ZIP64 will be required.  On seekable output streams, after
             saving all entries, the library can seek backward and re-emit the zip file header to be
             consistent with the actual ZIP64 requirement.  But using a non-seekable output stream,
             the library cannot seek backward, so the header can never be changed. In other words,
             the archive's use of ZIP64 extensions is not alterable after the header is emitted.
             Therefore, when saving to non-seekable streams, using <see
             cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.AsNecessary"/> is the same as using <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Always"/>:
             it will always produce a zip archive that uses zip64 extensions.
             </para>
            
             <para>
             The default value for the property is <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Never"/>. <see
             cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.AsNecessary"/> is safest, in the sense that you will not get an
             Exception if a pre-ZIP64 limit is exceeded.
             </para>
            
             <para>
             You may set the property at any time before calling Save(). 
             </para>
            
             <para>
             The ZipFile.Read() method will properly read ZIP64-endowed zip archives, regardless of the value of this 
             property.  ZIP64 archives can always be read, but this property governs whether they can be written. 
             Therefore, when updating archives, be careful about setting this property after reading an archive that
             may use ZIP64 extensions.
             </para>
            
             <para>
             An interesting question is, if you have set this property to <c>AsNecessary</c>, and
             then successfully saved, does the resulting archive use ZIP64 extensions or not?  To learn this, 
             check the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.OutputUsedZip64"/> property, after calling Save().
             </para>
            
             <para>
             Have you thought about donating? http://cheeso.members.winisp.net/DotNetZipDonate.aspx
             </para>
            
             </remarks>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.RequiresZip64">
            <summary>
            Indicates whether the archive requires ZIP64 extensions.
            </summary>
            <remarks>
            <para>
            This property is null (or Nothing in VB) if the archive has not been saved, and there are 
            fewer than 65334 ZipEntry items contained in the archive. 
            </para>
            <para>
            The Value is true if any of the following four conditions holds: the uncompressed size
            of any entry is larger than 0xFFFFFFFF; the compressed size of any entry is larger than
            0xFFFFFFFF; the relative offset of any entry within the zip archive is larger than
            0xFFFFFFFF; or there are more than 65534 entries in the archive.  (0xFFFFFFFF =
            4,294,967,295).  The result may not be known until a Save() is attempted on the zip
            archive.  The Value of this Nullable property may be set only AFTER one of the Save()
            methods has been called.
            </para>
            <para>
            If none of the four conditions holds, and the archive has been saved, then the Value is false.
            </para>
            <para>
            A Value of false does not indicate that the zip archive, as saved, does not use ZIP64.
            It merely indicates that ZIP64 is not required.  An archive may use ZIP64 even when not
            required if the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseZip64WhenSaving"/> property is set to <see
            cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Always"/>, or if the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseZip64WhenSaving"/>
            property is set to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.AsNecessary"/> and the output stream was not
            seekable. Use the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.OutputUsedZip64"/> property to determine if the most
            recent Save() method resulted in an archive that utilized the ZIP64 extensions.
            </para>
            </remarks>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseZip64WhenSaving"/>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.OutputUsedZip64"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.OutputUsedZip64">
            <summary>
            Describes whether the most recent Save() operation used ZIP64 extensions.
            </summary>
            <remarks>
            <para>
            The value is null (or Nothing in VB) if the archive has not been saved.
            </para>
            <para>
            Non-null values (HasValue is true) indicate whether ZIP64 extensions were used during
            the most recent Save() operation.  The ZIP64 extensions may have been used as required
            by any particular entry because of its uncompressed or compressed size, or because
            the archive is larger than 4294967295 bytes, or because there are more than
            65534 entries in the archive, or because the <c>UseZip64WhenSaving</c> property was set 
            to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Always"/>, or because the <c>UseZip64WhenSaving</c> property was set 
            to <see cref="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.AsNecessary"/> and the output stream was not seekable. 
            The value of this property does not indicate the reason
            the ZIP64 extensions were used.
            </para>
            </remarks>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.UseZip64WhenSaving"/>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">
             <summary>
             The text encoding to use when writing new entries to the ZipFile, for those
             entries that cannot be encoded with the default (IBM437) encoding; or, the
             text encoding that was used when reading the entries from the ZipFile.
             </summary>
             
             <remarks>
             <para>
             In its AppNote.txt document, PKWare describes how to specify in the zip entry
             header that a filename or comment containing non-ANSI characters is encoded with
             UTF-8.  But, some archivers do not follow the specification, and instead encode
             super-ANSI characters using the system default code page.  For example, WinRAR
             when run on a machine in Shanghai may encode filenames with the Big-5 Chinese
             (950) code page.  This behavior is contrary to the Zip specification, but it
             occurs anyway.
             </para>
            
             <para>
             When using DotNetZip to write zip archives that will be read by one of these other
             archivers, set this property to specify the code page to use when encoding the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.FileName"/> and <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.Comment"/> for each ZipEntry in the zip file,
             for values that cannot be encoded with the default codepage for zip files, IBM437.
             This is why this property is "provisional".  In all cases, IBM437 is used where
             possible, in other words, where no loss of data would result. It is possible, therefore, to have a given 
             entry with a Comment encoded in IBM437 and a FileName encoded with the specified "provisional" codepage. 
             </para>
            
             <para>
             Be aware that a zip file created after you've explicitly set the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding" /> property to a value other than IBM437 may not be
             compliant to the PKWare specification, and may not be readable by compliant archivers.
             On the other hand, many (most?) archivers are non-compliant and can read zip files
             created in arbitrary code pages.  The trick is to use or specify the proper codepage
             when reading the zip.
             </para>
            
             <para>
             When creating a zip archive using this library, it is possible to change the value of
             <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding" /> between each entry you add, and between
             adding entries and the call to Save(). Don't do this. It will likely result in a
             zipfile that is not readable.  For best interoperability, either leave <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding" /> alone, or specify it only once, before adding
             any entries to the ZipFile instance.  There is one exception to this recommendation,
             described later.
             </para>
            
             <para>
             When using an arbitrary, non-UTF8 code page for encoding, there is no standard way for
             the creator application - whether DotNetZip, WinZip, WinRar, or something else - to
             formally specify in the zip file which codepage has been used for the entries. As a
             result, readers of zip files are not able to inspect the zip file and determine the
             codepage that was used for the entries contained within it.  It is left to the
             application or user to determine the necessary codepage when reading zipfiles encoded
             this way.  If you use an incorrect codepage when reading a zipfile, you will get
             entries with filenames that are incorrect, and the incorrect filenames may even contain
             characters that are not legal for use within filenames in Windows. Extracting entries
             with illegal characters in the filenames will lead to exceptions. It's too bad, but
             this is just the way things are with code pages in zip files. Caveat Emptor.
             </para>
            
             <para>
             When using DotNetZip to read a zip archive, and the zip archive uses an arbitrary code
             page, you must specify the encoding to use before or when the zipfile is READ.  This
             means you must use a ZipFile.Read() method that allows you to specify a
             System.Text.Encoding parameter.  Setting the ProvisionalAlternateEncoding property
             after your application has read in the zip archive will not affect the entry names of
             entries that have already been read in, and is probably not what you want.
             </para>
            	
             <para>
             And now, the exception to the rule described above.  One strategy for specifying the
             code page for a given zip file is to describe the code page in a human-readable form in
             the Zip comment. For example, the comment may read "Entries in this archive are encoded
             in the Big5 code page".  For maximum interoperability, the Zip comment in this case
             should be encoded in the default, IBM437 code page.  In this case, the zip comment is
             encoded using a different page than the filenames.  To do this, specify
             ProvisionalAlternateEncoding to your desired region-specific code page, once before
             adding any entries, and then reset ProvisionalAlternateEncoding to IBM437 before
             setting the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Comment"/> property and calling Save().
             </para>
             </remarks>
             
             <seealso cref="F:Telerik.Sitefinity.Utilities.Zip.ZipFile.DefaultEncoding">DefaultEncoding</seealso>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.ZipFile.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also known as IBM437. 
            </summary>
            <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</seealso>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.StatusMessageTextWriter">
             <summary>
             Gets or sets the <c>TextWriter</c> to which status messages are delivered 
             for the instance. 
             </summary>
            
             <remarks>
             If the TextWriter is set to a non-null value, then 
             verbose output is sent to the <c>TextWriter</c> during <c>Add</c><c>, Read</c><c>, Save</c> and
             <c>Extract</c> operations.  Typically, console applications might use <c>Console.Out</c> and 
             graphical or headless applications might use a <c>System.IO.StringWriter</c>.
             </remarks>
            
             <example>
             <para>
             In this example, a console application instantiates a ZipFile, then sets
             the StatusMessageTextWriter to Console.Out.  At that point, all verbose
             status messages for that ZipFile are sent to the console. 
             </para>
            
             <code lang="C#">
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= System.Console.Out;
               // messages are sent to the console during extraction
               zip.ExtractAll();
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= System.Console.Out
               'Status Messages will be sent to the console during extraction
               zip.ExtractAll()
             End Using
             </code>
             </example>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ForceNoCompression">
             <summary>
             Gets or sets the flag that indicates whether the ZipFile should use
             compression for subsequently added entries in the ZipFile instance.
             </summary>
            
             <remarks>
             <para> 
             When saving an entry into a zip archive, the DotNetZip by default compresses
             the file. That's what a ZIP archive is all about, isn't it?  
             For files that are already compressed, like MP3's or JPGs,
             the deflate algorithm can actually slightly expand the size of the data.  Setting this
             property to trye allows you to specify that compression should not be used. 
             The default value is false.
             </para> 
            
             <para>
             Do not construe setting this flag to false as "Force Compression".  Setting it
             to false merely does NOT force No compression.  
             If you want to force the use of the deflate algorithm when
             storing each entry into the zip archive, define a <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WillReadTwiceOnInflation"/> callback, which always returns false, and a 
             <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WantCompression" /> callback that always returns true.  This is
             probably the wrong thing to do, but you could do it. Forcing the use of the
             Deflate algorithm when storing an entry does not guarantee that the data size
             will get smaller. It could increase, as described above.  
             </para>
            
             <para>
             Changes to this flag apply to all entries subsequently added to the archive. 
             The application can also set the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.CompressionMethod"/>
             property on each ZipEntry, for more granular control of this capability.
             </para>
            
             </remarks>
            
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.CompressionMethod"/>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.CompressionLevel"/>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WantCompression"/>
            
             <example>
             This example shows how to specify that Compression will not be used when adding files 
             to the zip archive. None of the files added to the archive in this example will use
             compression.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               zip.ForceNoCompression = true;
               zip.AddDirectory(@"c:\temp\Foo");
               zip.Comment = "All files in this archive will be uncompressed.";
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile()
               zip.ForceNoCompression = true
               zip.AddDirectory("c:\temp\Foo")
               zip.Comment = "All files in this archive will be uncompressed."
               zip.Save(ZipFileToCreate)
             End Using
             </code>
            
             </example>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.TempFileFolder">
             <summary>
             Gets or sets the name for the folder to store the temporary file
             this library writes when saving a zip archive. 
             </summary>
            
             <remarks>
             <para>
             This library will create a temporary file when saving a Zip archive.
             By default, the library uses the value of <see cref="M:System.IO.Path.GetTempPath"/>
             as the location in which to store temporary files. For some scenarios, such as ASP.NET
             applications, the application may wish to explicitly override this default behavior.
             </para>
             <para>
             The temporary file is written when calling one of the
             <c>Save()</c> methods, or the <c>SaveSelfExtractor()</c> method.
             </para>
             <para>
             The folder specified must exist; if it does not an exception is thrown.
             The application should have write and delete permissions on the folder. 
             The permissions are 
             never explicitly checked; if the application does not have the appropriate rights, an exception
             will be thrown at the time <c>Save()</c> is called. 
             </para>
             <para>
             There is no temporary file created when reading a zip archive. 
             When saving to a Stream, there is no temporary file created.  For example, if the application 
             is an ASP.NET application and calls <c>Save()</c> specifying the Response.OutStream as the output 
             stream, there is no temporary file created. 
             </para>
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
             Thrown when setting the property if the directory does not exist. 
             </exception>
            
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Password">
             <summary>
             Sets the password to be used on the ZipFile instance.
             </summary>
             
             <remarks>
             
             <para>
             When writing a zip archive, this password is applied to the entries, not
             to the zip archive itself. It applies to any ZipEntry subsequently added 
             to the ZipFile, using one of the AddFile, AddDirectory, or AddItem methods. 
             When reading a zip archive, this property applies to any entry subsequently 
             extracted from the ZipFile using one of the Extract methods on the ZipFile class.  
             </para>
             
             <para>
             When writing a zip archive, keep this in mind: though the password is set on the
             ZipFile object, according to the Zip spec, the "directory" of the archive - in
             other words the list of entries contained in the archive - is not encrypted with
             the password, or protected in any way.  IF you set the KeyPassword property, the
             password actually applies to individual entries that are added to the archive,
             subsequent to the setting of this property.  The list of filenames in the
             archive that is eventually created will appear in clear text, but the contents
             of the individual files are encrypted.  This is how Zip encryption works.
             </para>
             
             <para>
             If you set the password on the zip archive, and then add a set of files to the 
             archive, then each entry is encrypted with that password.  You may also want 
             to change the password between adding different entries. If you set the 
             password, add an entry, then set the password to null, and add another entry,
             the first entry is encrypted and the second is not.  Furshtay?
             </para>
             
             <para>
             When setting the KeyPassword, you may also want to explicitly set the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Encryption"/> property, to specify how to encrypt the entries added to the
             ZipFile.  If you set the KeyPassword to a non-null value and do not set <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.  This
             encryption is relatively weak but is very interoperable. If you set the password
             to a null value (<c>Nothing</c> in VB), Encryption is reset to None.
             </para>
            
             <para>
             All of the preceding applies to writing zip archives - when you use one of the
             Save methods.  To use this property when reading or an existing ZipFile -
             calling Extract methods on the ZipFile or the ZipEntry instances - do the
             following: set the KeyPassword property, then call one of the ZipFile.Extract()
             overloads. In this case, the entry is extracted using the KeyPassword that is
             specified on the ZipFile instance. If you have not set the KeyPassword property,
             then the password is null, and the entry is extracted with no password.
             </para>
            
             <para>
             If you set KeyPassword on the ZipFile, then Extract() an entry that has not been 
             encrypted with a password, then the password is not used for that entry, and
             the ZipEntry is extracted as normal.
             </para>
             
             </remarks>
            
             <example>
             <para>
             In this example, three files are added to a Zip archive. The ReadMe.txt file
             will be placed in the root of the archive, and will not be encrypted. 
             The .png file will be included into the zip, encrypted with the "123456!" password.
             The pdf file will be included, encrypted with "!Secret1" as the password.
             </para>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("ReadMe.txt");
                    zip.KeyPassword= "123456!";
                    zip.AddFile("7440-N49th.png");
                    zip.KeyPassword= "!Secret1";
                    zip.AddFile("2005_Annual_Report.pdf");
            
                    zip.Save("EncryptedArchive.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: {0}", ex1);
                }
             </code>
            
             <code lang="VB">
              Try 
                Using zip As New ZipFile
                  zip.AddFile("ReadMe.txt")
                  zip.KeyPassword = "123456!"
                  zip.AddFile("7440-N49th.png")
                  zip.KeyPassword= "!Secret1";
                  zip.AddFile("2005_Annual_Report.pdf")
                  zip.Save("EncryptedArchive.zip")
                End Using
              Catch ex1 As System.Exception
                System.Console.Error.WriteLine("exception: {0}", ex1)
              End Try
             </code>
            
             </example>
             
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Encryption"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Encryption">
             <summary>
             The Encryption to use for entries added to the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The specified Encryption is applied to the entries subsequently added to the ZipFile instance.  
             </para>
             
             <para>
             If you set this to something other than EncryptionAlgorithm.None, you will also need to set 
             the <see cref="!:KeyPassword"/>.
             </para>
            
             <para>
             As with other properties (like <see cref="!:KeyPassword"/> and <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ForceNoCompression"/>),
             setting this property a ZipFile instance will cause that EncryptionAlgorithm to be used on
             all ZipEntry items that are subsequently added to the ZipFile instance. In other words, if
             you set this property after you have added items to the ZipFile, but before you have called
             Save(), those items will not be encrypted or protected with a password in the resulting zip
             archive. To get a zip archive with encrypted entries, set this property, along with the <see cref="!:KeyPassword"/>
             property, before calling <c>AddFile</c>, <c>AddItem</c>, or <c>AddDirectory</c> on the ZipFile instance.
             </para>
             </remarks>
            
             <example>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.Encryption= EncryptionAlgorithm.WinZipAes256;
                    zip.KeyPassword= "Some.Like.It.Hot.1959!";
                    zip.AddFile("ReadMe.txt");
                    zip.AddFile("7440-N49th.png");
                    zip.AddFile("2005_Annual_Report.pdf");
                    zip.Save("EncryptedArchive.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: {0}", ex1);
                }
             </code>
            
             <code lang="VB">
              Try 
                Using zip As New ZipFile()
                  zip.Encryption= EncryptionAlgorithm.WinZipAes256
                  zip.KeyPassword= "Some.Like.It.Hot.1959!"
                  zip.AddFile("ReadMe.txt")
                  zip.AddFile("7440-N49th.png")
                  zip.AddFile("2005_Annual_Report.pdf")
                  zip.Save("EncryptedArchive.zip")
                End Using
              Catch ex1 As System.Exception
                System.Console.Error.WriteLine("exception: {0}", ex1)
              End Try
             </code>
            
             </example>
             
             <seealso cref="!:Telerik.Sitefinity.Utilities.Zip.ZipFile.KeyPassword"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WillReadTwiceOnInflation">
             <summary>
             A callback that allows the application to specify whether multiple reads of the
             stream should be performed, in the case that a compression operation actually
             inflates the size of the file data.  
             </summary>
            
             <remarks>
             <para>
             In some cases, applying the Deflate compression algorithm in <c>DeflateStream</c> can
             result an increase in the size of the data.  This "inflation" can happen with
             previously compressed files, such as a zip, jpg, png, mp3, and so on.  In a few
             tests, inflation on zip files can be as large as 60%!  Inflation can also happen
             with very small files.  In these cases, by default, the DotNetZip library
             discards the compressed bytes, and stores the uncompressed file data into the
             zip archive.  This is an optimization where smaller size is preferred over
             longer run times.
             </para>
            
             <para>
             The application can specify that compression is not even tried, by setting the
             ForceNoCompression flag.  In this case, the compress-and-check-sizes process as
             decribed above, is not done.
             </para>
            
             <para>
             In some cases, neither choice is optimal.  The application wants compression,
             but in some cases also wants to avoid reading the stream more than once.  This
             may happen when the stream is very large, or when the read is very expensive, or
             when the difference between the compressed and uncompressed sizes is not
             significant.
             </para>
            
             <para>
             To satisfy these applications, this delegate allows the DotNetZip library to ask
             the application to for approval for re-reading the stream, in the case where
             inflation occurs.  The callback is invoked only in the case of inflation; that
             is to say when the uncompressed stream is smaller than the compressed stream.
             </para>
            
             <para>
             As with other properties (like <see cref="!:KeyPassword"/> and <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ForceNoCompression"/>),
             setting the corresponding delegate on a ZipFile instance will caused it to be applied to all ZipEntry
             items that are subsequently added to the ZipFile instance. In other words, if you set this
             callback after you have added files to the ZipFile, but before you have called Save(), those
             items will not be governed by the callback when you do call Save(). Your best bet is to 
             set this callback before adding any entries.  
             </para>
            
             <para>
             Of course, if you want to have different callbacks for different entries, you may do so. 
             </para>
            
             </remarks>
             <example>
             <para>
             In this example, the application callback checks to see if the difference
             between the compressed and uncompressed data is greater than 25%.  If it is,
             then the callback returns true, and the application tells the library to re-read
             the stream.  If not, then the callback returns false, and the library just keeps
             the "inflated" file data.
             </para>
            
             <code>
            
             public bool ReadTwiceCallback(long uncompressed, long compressed, string filename)
             {
                 return ((uncompressed * 1.0/compressed) > 1.25);
             }
             
             public void CreateTheZip()
             {
                 using (ZipFile zip = new ZipFile())
                 {
                     // set the callback before adding files to the zip
                     zip2.WillReadTwiceOnInflation = ReadTwiceCallback;
                     zip2.AddFile(filename1);
                     zip2.AddFile(filename2);
                     zip2.Save(ZipFileToCreate);
                 }
             }
             </code>
             </example>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WantCompression"/>
             <seealso cref="T:Telerik.Sitefinity.Utilities.Zip.WantCompressionCallback"/>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.WillReadTwiceOnInflation"/>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WantCompression">
             <summary>
             A callback that allows the application to specify whether compression should
             be used for entries subsequently added to the zip archive.
             </summary>
            
             <remarks>
             <para>
             In some cases, applying the Deflate compression algorithm to an entry *may*
             result a slight increase in the size of the data.  This "inflation" can
             happen with previously compressed files, such as a zip, jpg, png, mp3, and
             so on; it results from adding DEFLATE framing data around incompressible data.
             Inflation can also happen with very small files. Applications may wish to
             avoid the use of compression in these cases. As well, applications may wish
             to avoid compression to save time.
             </para>
            
             <para>
             By default, the DotNetZip library takes this approach to decide whether to
             apply compression: first it applies a heuristic, to determine whether it
             should try to compress a file or not.  The library checks the extension of
             the entry, and if it is one of a known list of uncompressible file types
             (mp3, zip, docx, and others), the library will not attempt to compress the
             entry.  The library does not actually check the content of the entry.  If
             you name a text file "Text.mp3", and then attempt to add it to a zip
             archive, this library will, by default, not attempt to compress the entry,
             based on the extension of the filename.
             </para>
            
             <para>
             If this default behavior is not satisfactory, there are two options. First,
             the application can override it by setting this <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WantCompression"/> callback.  This affords maximum control to
             the application.  With this callback, the application can supply its own
             logic for determining whether to apply the Deflate algorithm or not.  For
             example, an application may desire that files over 40mb in size are never
             compressed, or always compressed.  An application may desire that the first
             7 entries added to an archive are compressed, and the remaining ones are
             not.  The WantCompression callback allows the application full control, on
             an entry-by-entry basis.
             </para>
            
             <para>
             The second option for overriding the default logic regarding whether to
             apply compression is the ForceNoCompression flag.  If this flag is set to
             true, the compress-and-check-sizes process as decribed above, is not done,
             nor is the callback invoked.  In other words, if you set ForceNoCompression
             to true, andalso set the WantCompression callback, only the
             ForceNoCompression flag is considered.
             </para>
            
             <para>
             This is how the library determines whether compression will be attempted for 
             an entry.  If it is to be attempted, the library reads the entry, runs it through
             the deflate algorithm, and then checks the size of the result.  If applying
             the Deflate algorithm increases the size of the data, then the library
             discards the compressed bytes, re-reads the raw entry data, and stores the
             uncompressed file data into the zip archive, in compliance with the zip
             spec.  This is an optimization where smaller size is preferred over longer
             run times. The re-reading is gated on the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WillReadTwiceOnInflation"/> callback, if it is set. This callback applies
             independently of the WantCompression callback.
             </para>
            
             <para>
             If by the logic described above, compression is not to be attempted for an entry, 
             the library reads the entry, and simply stores the entry data uncompressed. 
             </para>
            
             <para>
             And, if you have read this far, I would like to point out that a single
             person wrote all the code that does what is described above, and also wrote
             the description.  Isn't it about time you donated $5 in appreciation?  The
             money goes to a charity. See
             http://cheeso.members.winisp.net/DotNetZipDonate.aspx.
             </para>
            
             </remarks>
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.WillReadTwiceOnInflation"/>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String)">
             <summary>
             Creates a new ZipFile instance, using the specified ZipFileName for the filename. 
             The ZipFileName may be fully qualified.
             </summary>
             
             <remarks>
             <para>
             Applications can use this constructor to create a new ZipFile for writing, 
             or to slurp in an existing zip archive for read and write purposes.  
             </para>
             
             <para>
             To create a new zip archive, an application should call this constructor,
             passing the name of a file that does not exist.  Then the application can
             add directories or files to the ZipFile via <c>AddDirectory()</c>,
             <c>AddFile()</c>, <c>AddItem()</c> and then write the zip archive to the
             disk by calling <c>Save()</c>. The zip file is not actually written to
             the disk until the application calls <c>ZipFile.Save()</c>.  At that point
             the new zip file with the given name is created. 
             </para>
             
             <para>
             To read an existing zip archive, the application should call this constructor,
             passing the name of a valid zip file that does exist.  The file is then read into
             the <c>ZipFile</c> instance.  The app can then enumerate the entries or can modify
             the zip file, for example adding entries, removing entries, changing comments, and
             so on.  When reading an existing zip archive, the application may wish to
             explicitly specify that it is reading an existing zip file by using
             <c>ZipFile.Read()</c>.  On the other hand, this parameterized constructor allows
             applications to use the same code to add items to a zip archive, regardless of
             whether the zip file exists.
             </para>
             
             <para>
             To encrypt the data for the  files added to the ZipFile instance, set the KeyPassword
             property after creating the ZipFile instance.
             </para>
             
             <para>
             Instances of the ZipFile class are not multi-thread safe.  You may not party on a single
             instance with multiple threads.  You may have multiple threads that each use a distinct ZipFile 
             instance, or you can synchronize multi-thread access to a single instance.
             </para>
             
             <para>
             By the way, if you are using multiple threads with DotNetZip, you really should
             donate $5 or $10 to the cause.  See http://cheeso.members.winisp.net/DotNetZipDonate.aspx.
             </para>
            
             </remarks>
            
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if zipFileName refers to an existing file that is not a valid zip file. 
             </exception>
            
             <example>
             This example shows how to create a zipfile, and add a few files into it. 
             <code>
             using (ZipFile zip = new ZipFile())
             { 
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(args[1]);
               foreach (String filename in filenames)
               {
                 Console.WriteLine("Adding {0}...", filename);
                 zip.AddFile(filename);
               }  
               zip.Save(ZipFileToCreate);
             }
             </code>
             
             <code lang="VB">
             Dim ZipToCreate As String = "ex1.zip"
             Dim DirectoryToZip As String = "c:\temp"
             Using zip As ZipFile = New ZipFile()
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 Dim filename As String
                 For Each filename In filenames
                     Console.WriteLine("Adding {0}...", filename)
                     zip.AddFile(filename)
                 Next
                 zip.Save(ZipToCreate)
             End Using
             </code>
             </example>
            
             <param name="zipFileName">The filename to use for the new zip archive.</param>
            
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String,System.Text.Encoding)">
             <summary>
             Creates a new ZipFile instance, using the specified ZipFileName for the filename, and 
             the specified Encoding.
             </summary>
             
             <remarks>
             <para>
             See the documentation on the <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the ZipFile constructors.
             </para>
            
             <para>
             The Encoding is used as the default alternate encoding for entries with filenames
             or comments that cannot be encoded with the IBM437 code page.  This is a equivalent to setting 
             the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding"/> property on the ZIpFile instance after construction.
             </para>
            
             <para>
             Instances of the ZipFile class are not multi-thread safe.  You may not party on a single
             instance with multiple threads.  You may have multiple threads that each use a distinct ZipFile 
             instance, or you can synchronize multi-thread access to a single instance.
             </para>
             
             </remarks>
             
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if zipFileName refers to an existing file that is not a valid zip file. 
             </exception>
            
             <param name="zipFileName">The filename to use for the new zip archive.</param>
             <param name="encoding">The Encoding is used as the default alternate encoding for entries with filenames
             or comments that cannot be encoded with the IBM437 code page. </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor">
             <summary>
             Create a zip file, without specifying a target filename or stream to save to. 
             </summary>
             
             <remarks>
             <para>
             See the documentation on the <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the ZipFile constructors.
             </para>
            
             <para>
             After instantiating with this constructor and adding entries to the archive,
             your application should call <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Save(System.String)"/> or <see
             cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Save(System.IO.Stream)"/> to save to a file or a stream, respectively. 
             If you call the no-argument <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Save"/> method, the Save() will throw, as there is no 
             known place to save the file. 
             </para>
            
             <para>
             Instances of the ZipFile class are not multi-thread safe.  You may not party on a single
             instance with multiple threads.  You may have multiple threads that each use a distinct ZipFile 
             instance, or you can synchronize multi-thread access to a single instance.
             </para>
             
             </remarks>
             
             <example>
             This example creates a Zip archive called Backup.zip, containing all the files
             in the directory DirectoryToZip. Files within subdirectories are not zipped up.
             <code>
             using (ZipFile zip = new ZipFile())
             { 
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               foreach (String filename in filenames)
               {
                 Console.WriteLine("Adding {0}...", filename);
                 zip.AddFile(filename);
               }  
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 Dim filename As String
                 For Each filename In filenames
                     Console.WriteLine("Adding {0}...", filename)
                     zip.AddFile(filename)
                 Next
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.Text.Encoding)">
             <summary>
             Create a zip file, specifying a text Encoding, but without specifying a target filename or stream to save to. 
             </summary>
             
             <remarks>
             <para>
             See the documentation on the <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the ZipFile constructors.
             </para>
            
             </remarks>
            
             <param name="encoding">The Encoding is used as the default alternate encoding for entries with filenames
             or comments that cannot be encoded with the IBM437 code page. </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter)">
             <summary>
             Creates a new ZipFile instance, using the specified ZipFileName for the filename, 
             and the specified status message writer. 
             </summary>
            
             <remarks>
             <para>
             See the documentation on the <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the ZipFile constructors.
             </para>
            
             <para>
             This version of the constructor allows the caller to pass in a TextWriter, to which
             verbose messages will be written during extraction or creation of the zip archive.
             A console application may wish to pass System.Console.Out to get messages on the
             Console. A graphical or headless application may wish to capture the messages in a
             different <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
             the messages in a TextBox, or generate an audit log of ZipFile operations.
             </para>
             
             <para>
             To encrypt the data for the  files added to the ZipFile instance, set the KeyPassword
             property after creating the ZipFile instance.
             </para>
             
             <para>
             Instances of the ZipFile class are not multi-thread safe.  You may not party on a single
             instance with multiple threads.  You may have multiple threads that each use a distinct ZipFile 
             instance, or you can synchronize multi-thread access to a single instance.
             </para>
             
             </remarks>
            
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if zipFileName refers to an existing file that is not a valid zip file. 
             </exception>
            
             <example>
             <code>
             using (ZipFile zip = new ZipFile())
             { 
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               foreach (String filename in filenames)
               {
                 Console.WriteLine("Adding {0}...", filename);
                 zip.AddFile(filename);
               }  
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 Dim filename As String
                 For Each filename In filenames
                     Console.WriteLine("Adding {0}...", filename)
                     zip.AddFile(filename)
                 Next
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
             
             <param name="zipFileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing verbose status messages.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Creates a new ZipFile instance, using the specified ZipFileName for the filename, 
             the specified status message writer, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
             This constructor works like the <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument.</see> See that reference for detail on what
             this constructor does.
             </para>
            
             <para>
             This version of the constructor allows the caller to pass in a TextWriter, and an
             Encoding.  The TextWriter will collect verbose messages that are generated by the
             library during extraction or creation of the zip archive.  A console application
             may wish to pass System.Console.Out to get messages on the Console. A graphical or
             headless application may wish to capture the messages in a different
             <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display the
             messages in a TextBox, or generate an audit log of ZipFile operations.
             </para>
             
             <para>
             The Encoding is used as the default alternate encoding for entries with filenames
             or comments that cannot be encoded with the IBM437 code page.  This is a equivalent to setting 
             the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding"/> property on the ZipFile instance after construction.
             </para>
             
             <para>
             To encrypt the data for the  files added to the ZipFile instance, set the KeyPassword
             property after creating the ZipFile instance.
             </para>
             
             <para>
             Instances of the ZipFile class are not multi-thread safe.  You may not party on a single
             instance with multiple threads.  You may have multiple threads that each use a distinct ZipFile 
             instance, or you can synchronize multi-thread access to a single instance.
             </para>
             
             </remarks>
            
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if zipFileName refers to an existing file that is not a valid zip file. 
             </exception>
            
             <param name="zipFileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing verbose status messages.</param>
             <param name="encoding">The Encoding is used as the default alternate encoding for entries with filenames
             or comments that cannot be encoded with the IBM437 code page. </param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.LibraryVersion">
            <summary>
            Returns the version number on the DotNetZip assembly.
            </summary>
            <remarks>
            This property is exposed as a convenience.  Callers
            could also get the version value by retrieving  GetName().Version 
            on the System.Reflection.Assembly object pointing to the
            DotNetZip assembly. But sometimes it is not clear which
            assembly is being loaded.  This property makes it clear. 
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String)">
             <summary>
             Adds an item, either a file or a directory, to a zip file archive.  
             </summary>
             
             <remarks>
             <para>
             If adding a directory, the add is recursive on all files and subdirectories 
             contained within it. 
             </para>
             <para>
             The name of the item may be a relative path or a fully-qualified path.
             The item added by this call to the ZipFile is not written to the zip file
             archive until the application calls Save() on the ZipFile. 
             </para>
             <para>
             The directory name used for the file within the archive is the same as
             the directory name (potentially a relative path) specified in the FileOrDirectoryName.
             </para>
             </remarks>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <overloads>This method has two overloads.</overloads>
             <param name="fileOrDirectoryName">the name of the file or directory to add.</param>
             
             <returns>The ZipEntry added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String,System.String)">
             <summary>
             Adds an item, either a file or a directory, to a zip file archive, 
             explicitly specifying the directory path to be used in the archive. 
             </summary>
             
             <remarks>
             <para>
             If adding a directory, the add is recursive on all files and subdirectories 
             contained within it. 
             </para>
             <para>
             The name of the item may be a relative path or a fully-qualified path.
             The item added by this call to the ZipFile is not written to the zip file
             archive until the application calls Save() on the ZipFile. 
             </para>
             
             <para>
             This version of the method allows the caller to explicitly specify the 
             directory path to be used in the archive, which would override the 
             "natural" path of the filesystem file.
             </para>
             
             <para>
             Encryption will be used on the file data if the KeyPassword
             has been set on the ZipFile object, prior to calling this method.
             </para>
             
             </remarks>
             
             <exception cref="T:System.IO.FileNotFoundException">
             Thrown if the file or directory passed in does not exist. 
             </exception>
            
             <param name="fileOrDirectoryName">the name of the file or directory to add.</param>
             <param name="directoryPathInArchive">
             The name of the directory path to use within the zip archive. 
             This path need not refer to an extant directory in the current filesystem.
             If the files within the zip are later extracted, this is the path used for the extracted file. 
             Passing null (nothing in VB)) will use the path on the FileOrDirectoryName.  Passing the empty string ("")
             will insert the item at the root path within the archive. 
             </param>
             
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <example>
             This example shows how to zip up a set of files into a flat hierarchy, 
             regardless of where in the filesystem the files originated.
             <code>
             String[] itemnames= { 
               "c:\\temp\\Readme.txt",
               "MyProposal.docx",
               "SupportFiles",  // a directory
               "images\\Image1.jpg"
             };
            
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 for (int i = 1; i &lt; itemnames.Length; i++)
                 {
                   // will add Files or Dirs, recurses and flattens subdirectories
                   zip.AddItem(itemnames[i],"flat"); 
                 }
                 zip.Save(ZipToCreate);
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Dim itemnames As String() = _
                 New String() { "c:\temp\Readme.txt", _
                                "MyProposal.docx", _
                                "SupportFiles", _
                                "images\Image1.jpg" }
               Try 
                   Using zip As New ZipFile
                       Dim i As Integer
                       For i = 1 To itemnames.Length - 1
                           ' will add Files or Dirs, recursing and flattening subdirectories.
                           zip.AddItem(itemnames(i), "flat")
                       Next i
                       zip.Save(ZipToCreate)
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString())
               End Try
             </code>
             </example>
             <returns>The ZipEntry added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String)">
             <summary>
             Adds a File to a Zip file archive. 
             </summary>
             <remarks>
             The file added by this call to the ZipFile is not written to the zip file
             archive until the application calls Save() on the ZipFile. 
             </remarks>
             
             <example>
             <para>
             In this example, three files are added to a Zip archive. The ReadMe.txt file
             will be placed in the root of the archive. The .png file will be placed in a folder 
             within the zip called photos\personal.  The pdf file will be included into a
             folder within the zip called Desktop.
             </para>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("c:\\photos\\personal\\7440-N49th.png");
                    zip.AddFile("c:\\Desktop\\2005_Annual_Report.pdf");
                    zip.AddFile("ReadMe.txt");
            
                    zip.Save("Package.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: " + ex1);
                }
             </code>
             
             <code lang="VB">
              Try 
                   Using zip As ZipFile = New ZipFile
                       zip.AddFile("c:\photos\personal\7440-N49th.png")
                       zip.AddFile("c:\Desktop\2005_Annual_Report.pdf")
                       zip.AddFile("ReadMe.txt")
                       zip.Save("Package.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
             
             <overloads>This method has two overloads.</overloads>
             
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String)"/>
            
             <param name="fileName">
             The name of the file to add. It should refer to a file in the filesystem.  
             The name of the file may be a relative path or a fully-qualified path. 
             </param>
             <returns>The ZipEntry corresponding to the File added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String,System.String)">
             <summary>
             Adds a File to a Zip file archive, potentially overriding the path to be used
             within the zip archive.
             </summary>
             
             <remarks>
             <para>
             The file added by this call to the ZipFile is not written to the zip file
             archive until the application calls Save() on the ZipFile. 
             </para>
             
             <para>
             This version of the method allows the caller to explicitly specify the 
             directory path to be used in the archive. 
             </para>
             
             </remarks>
             
             <example>
             <para>
             In this example, three files are added to a Zip archive. The ReadMe.txt file
             will be placed in the root of the archive. The .png file will be placed in a folder 
             within the zip called images.  The pdf file will be included into a
             folder within the zip called files\docs, and will be encrypted with the 
             given password.
             </para>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called 
                 // files\\docs\\2005_Annual_Report.pdf  in the archive.
                 zip.KeyPassword = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2005_Annual_Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
             
             <code lang="VB">
               Try 
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called 
                       ' files\\docs\\2005_Annual_Report.pdf  in the archive.
                       zip.KeyPassword = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2005_Annual_Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
             
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
            
             <param name="fileName">
             The name of the file to add.  The name of the file may be a relative path or 
             a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the FileName.
             This path may, or may not, correspond to a real directory in the current filesystem.
             If the files within the zip are later extracted, this is the path used for the extracted file. 
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive. 
             </param>
            
             <returns>The ZipEntry corresponding to the file added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String)">
             <summary>
             Adds or Updates a File in a Zip file archive.
             </summary>
             
             <remarks>
             <para>
             This method adds a file to a zip archive, or, if the file already exists in the zip archive, 
             this method Updates the content of that given filename in the zip archive.  
             The <c>UpdateFile</c> method might more accurately be called "AddOrUpdateFile".
             </para>
            
             <para>
             Upon success, there is no way for the application to learn  whether the file was added versus updated. 
             </para>
            
             </remarks>
            
             <example>
             This example shows how to Update an existing entry in a zipfile. The first call to 
             UpdateFile adds the file to the newly-created zip archive.  The second 
             call to UpdateFile updates the content for that file in the zip archive.
             <code>
             using (ZipFile zip1 = new ZipFile())
             {
               // UpdateFile might more accurately be called "AddOrUpdateFile"
               zip1.UpdateFile("MyDocuments\\Readme.txt", "");
               zip1.UpdateFile("CustomerList.csv", "");
               zip1.Comment = "This zip archive has been created.";
               zip1.Save("Content.zip");
             }
             
             using (ZipFile zip2 = ZipFile.Read("Content.zip"))
             {
               zip2.UpdateFile("Updates\\Readme.txt", "");
               zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed.";
               zip2.Save();
             }
            
             </code>
             <code lang="VB">
               Using zip1 As New ZipFile
                   ' UpdateFile might more accurately be called "AddOrUpdateFile"
                   zip1.UpdateFile("MyDocuments\Readme.txt", "")
                   zip1.UpdateFile("CustomerList.csv", "")
                   zip1.Comment = "This zip archive has been created."
                   zip1.Save("Content.zip")
               End Using
            
               Using zip2 As ZipFile = ZipFile.Read("Content.zip")
                   zip2.UpdateFile("Updates\Readme.txt", "")
                   zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed."
                   zip2.Save
               End Using
             </code>
             </example>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="fileName">
             The name of the file to add or update. It should refer to a file in the filesystem.  
             The name of the file may be a relative path or a fully-qualified path. 
             </param>
            
             <returns>The ZipEntry corresponding to the File that was added or updated.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String,System.String)">
             <summary>
             Adds or Updates a File in a Zip file archive.
             </summary>
             
             <remarks>
             <para>
             This method adds a file to a zip archive, or, if the file already exists in the zip archive, 
             this method Updates the content of that given filename in the zip archive.
             </para>
             
             <para>
             This version of the method allows the caller to explicitly specify the 
             directory path to be used in the archive.  The entry to be added or updated is found by 
             using the specified directory path, combined with the basename of the specified 
             filename. 
             </para>
             
             <para>
             Upon success, there is no way for the application to learn whether the file was added or updated. 
             </para>
             </remarks>
             
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="fileName">
             The name of the file to add or update. It should refer to a file in the filesystem.  
             The name of the file may be a relative path or a fully-qualified path. 
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the FileName.
             This path may, or may not, correspond to a real directory in the current filesystem.
             If the files within the zip are later extracted, this is the path used for the extracted file. 
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive. 
             </param>
            
             <returns>The ZipEntry corresponding to the File that was added or updated.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String)">
             <summary>
             Add or Update a Directory in a zip archive.
             If the directory has already been added to the archive,
             its contents are updated.  If not, then the directory is added.
             </summary>
            
             <remarks>
             If the specified directory does not exist in the archive, then this method is equivalent to
             calling AddDirectory().  If the specified directory already exists in the archive, then this 
             method updates any existing entries, and adds any new entries. Any entries that are in the 
             zip archive but not in the specified directory, are left alone.  In other words, the contents of 
             the zip file is a union of the previous contents and the new files.
             </remarks>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="directoryName">The path to the directory to be added to the zip archive, 
             or updated in the zip archive.</param>
             <returns>The ZipEntry corresponding to the Directory that was added or updated.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String,System.String)">
             <summary>
             Add or Update a directory in the zip archive at the specified root directory in the archive.  
             If the directory has already been added to the archive,
             its contents are updated.  If not, then the directory is added.
             </summary>
            
             <remarks>
             If the specified directory does not exist in the archive, then this method is equivalent to
             calling AddDirectory().  If the specified directory already exists in the archive, then this 
             method updates any existing entries, and adds any new entries. Any entries that are in the 
             zip archive but not in the specified directory, are left alone.  In other words, the contents of 
             the zip file is a union of the previous contents and the new files.
             </remarks>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="directoryName">The path to the directory to be added to the zip archive, 
             or updated in the zip archive.</param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the ItemName.
             This path may, or may not, correspond to a real directory in the current filesystem.
             If the files within the zip are later extracted, this is the path used for the extracted file. 
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive. 
             </param>
             
             <returns>The ZipEntry corresponding to the Directory that was added or updated.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String)">
             <summary>
             Add or Update a File or Directory in the zip archive. This
             is useful when the application is not sure or does not care
             if the entries in the existing zip archive already exist.
             </summary>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String)"/>
            
             <param name="itemName">the path to the file or directory to be added or updated.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateItem(System.String,System.String)">
             <summary>
             Add or Update a File or Directory.  This is useful when the application is not sure or does not 
             care if the entries in the existing zip archive already exist.  
             </summary>
            
             <remarks>
             <para>
             This version of the method allows the caller to explicitly specify the 
             directory path to be used for the item being added to the archive.  The entry or entries 
             that are added or updated will use the specified <c>DirectoryPathInArchive</c>. Extracting
             the entry from the archive will result in a file stored in that directory path. 
             </para>
             </remarks>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="itemName">The path for the File or Directory to be added or updated.</param>
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the ItemName.
             This path may, or may not, correspond to a real directory in the current filesystem.
             If the files within the zip are later extracted, this is the path used for the extracted file. 
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive. 
             </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFileStream(System.String,System.String,System.IO.Stream)">
             <summary>
             Uses the given stream as input to create an entry in the ZipFile, with the 
             given FileName and given Directory Path.  
             </summary>
            
             <remarks>
             <para>
             The stream must remain open and readable at least through the call to 
             <c>ZipFile.Save</c>.
             </para>
             <para>
             Encryption will be used on the stream data when saving the 
             ZipFile, if the KeyPassword is set on the ZipFile object prior to calling
             this method.</para>
             </remarks>
            
             <example>
             <code lang="C#">
             String ZipToCreate = "Content.zip";
             String FileNameInArchive = "Content-From-Stream.bin";
             using (ZipFile zip = new ZipFile())
             {
               ZipEntry entry= zip.AddFileStream(FileNameInArchive, "basedirectory", StreamToRead);
               entry.Comment = "The content for entry in the zip file was obtained from a stream";
               zip.AddFile("Readme.txt");
               zip.Save(ZipToCreate);
             }
             
             </code>
             <code lang="VB">
             Dim ZipToCreate As String = "Content.zip"
             Dim FileNameInArchive As String = "Content-From-Stream.bin"
             Using zip As ZipFile = New ZipFile()
               Dim entry as ZipEntry = zip.AddFileStream(FileNameInArchive, "basedirectory", Me.StreamToRead)
               entry.Comment = "The content for entry in the zip file was obtained from a stream"
               zip.AddFile("Readme.txt")
               zip.Save(ZipToCreate)
             End Using
             </code>
             </example>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFileStream(System.String,System.String,System.IO.Stream)"/>
            
             <param name="fileName">FileName which is shown in the ZIP File</param>
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the ItemName.
             This path may, or may not, correspond to a real directory in the current filesystem.
             If the files within the zip are later extracted, this is the path used for the extracted file. 
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive. 
             </param>
             <param name="stream">the input stream from which to grab content for the file</param>
             <returns>The ZipEntry added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFileFromString(System.String,System.String,System.String)">
            <summary>
            Adds an entry into the zip archive using the given filename and directory path within the archive,
            and the given content for the file.  No file is created in the filesystem.  
            </summary>
            <param name="content">The content of the file, should it be extracted from the zip.</param>
            <param name="fileName">The filename to use within the archive.</param>
            <param name="directoryPathInArchive">
            Specifies a driectory path to use to override any path in the ItemName.
            This path may, or may not, correspond to a real directory in the current filesystem.
            If the files within the zip are later extracted, this is the path used for the extracted file. 
            Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the empty string ("")
            will insert the item at the root path within the archive. 
            </param>
            <returns>The ZipEntry added.</returns>
            
            <example>
            This example shows how to add an entry to the zipfile, using a string as content for that entry. 
            <code lang="C#">
            string Content = "This string will be the content of the Readme.txt file in the zip archive.";
            using (ZipFile zip1 = new ZipFile())
            {
              zip1.AddFile("MyDocuments\\Resume.doc", "files");
              zip1.AddFileFromString("Readme.txt", "", Content); 
              zip1.Comment = "This zip file was created at " + System.DateTime.UtcNow.ToString("G");
              zip1.Save("Content.zip");
            }
            
            </code>
            <code lang="VB">
            Public Sub Run()
              Dim Content As String = "This string will be the content of the Readme.txt file in the zip archive."
              Using zip1 As ZipFile = New ZipFile
                zip1.AddFileFromString("Readme.txt", "", Content)
                zip1.AddFile("MyDocuments\Resume.doc", "files")
                zip1.Comment = ("This zip file was created at " &amp; DateTime.UtcNow.ToString("G"))
                zip1.Save("Content.zip")
              End Using
            End Sub
            </code>
            </example>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateFileStream(System.String,System.String,System.IO.Stream)">
             <summary>
             Updates the given entry in the zipFile, using the given stream as input, and the
             given FileName and given Directory Path.  Encryption will be used on the 
             stream data if the KeyPassword is set on the ZipFile object, prior to calling
             this method.
             </summary>
            
             <remarks>
             The stream must remain open and readable at least through the call to 
             <c>ZipFile.Save</c>.
             </remarks>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFileStream(System.String,System.String,System.IO.Stream)"/>
            
             <param name="fileName">FileName which is shown in the ZIP File</param>
             <param name="directoryPathInArchive">The root path to be used in the ZIP archive, 
             for the entry added from the stream.</param>
             <param name="stream">The Input Stream to read file data from.</param>
             <returns>The ZipEntry added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String)">
             <summary>
             Adds the contents of a filesystem directory to a Zip file archive. 
             </summary>
             
             <remarks>
             
             <para>
             The name of the directory may be 
             a relative path or a fully-qualified path. Any files within the named 
             directory are added to the archive.  Any subdirectories within the named
             directory are also added to the archive, recursively. 
             </para>
             
             <para>
             Top-level entries in the named directory will appear as top-level 
             entries in the zip archive.  Entries in subdirectories in the named 
             directory will result in entries in subdirectories in the zip archive.
             </para>
             
             <para>
             If you want the entries to appear in a containing directory in the zip
             archive itself, then you should call the AddDirectory() overload that allows
             you to explicitly specify a containing directory.
             </para>
             
             </remarks>
             
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
            
             <overloads>This method has 2 overloads.</overloads>
             
             <param name="directoryName">The name of the directory to add.</param>
             <returns>The ZipEntry added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectory(System.String,System.String)">
             <summary>
             Adds the contents of a filesystem directory to a Zip file archive, 
             overriding the path to be used for entries in the archive. 
             </summary>
             
             <remarks>
             <para>
             The name of the directory may be a relative path or a fully-qualified
             path. The add operation is recursive, so that any files or subdirectories
             within the name directory are also added to the archive.
             </para>
             </remarks>
             
             <example>
             <para>
             In this code, calling the ZipUp() method with a value of "c:\temp" for the
             directory parameter will result in a zip file structure in which all entries
             are contained in a toplevel "temp" directory.
             </para>
            
             <code lang="C#">
             public void ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile())
               {
                 zip.AddDirectory(directory, System.IO.Path.GetFileName(directory));
                 zip.Save(targetZip);
               }
             }
             </code>
             </example>
             
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="directoryName">The name of the directory to add.</param>
             
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the DirectoryName.
             This path may, or may not, correspond to a real directory in the current filesystem.
             If the zip is later extracted, this is the path used for the extracted file or directory. 
             Passing null (nothing in VB) or the empty string ("")
             will insert the items at the root path within the archive. 
             </param>
             
             <returns>The ZipEntry added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddDirectoryByName(System.String)">
             <summary>
             Creates a directory in the zip archive.  
             </summary>
             
             <remarks>
             
             <para>
             Use this when you want to create a directory in the archive but there is no
             corresponding filesystem representation for that directory.
             </para>
            
             <para>
             You will probably not need to do this in your code. One of the only times
             you will want to do this is if you want an empty directory in the zip
             archive.  If you add a file to a zip archive that is stored within a
             multi-level directory, all of the directory tree is implicitly created in
             the zip archive.  
             </para>
             
             </remarks>
             
             <param name="directoryNameInArchive">
             The name of the directory to create in the archive.
             </param>
             <returns>The ZipEntry added.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Save">
             <summary>
             Saves the Zip archive, using the name given when the ZipFile was instantiated. 
             </summary>
            
             <remarks>
             <para>
             The zip file is written to storage only when the caller calls <c>Save</c>.  
             The Save operation writes the zip content to a temporary file. 
             Then, if the zip file already exists (for example when adding an item to a zip archive)
             this method will replace the existing zip file with this temporary file.
             If the zip file does not already exist, the temporary file is renamed 
             to the desired name.  
             </para>
            
             <para>
             When using a filesystem file for the Zip output, it is possible to call
             <c>Save</c> multiple times on the ZipFile instance. With each call the zip content
             is written to the output file. When saving to a <c>Stream</c>, after the initial
             call to <c>Save</c>, additional calls to <c>Save</c> will throw. This is because the
             stream is assumed to be a write-only stream, and after the initial <c>Save</c>, it
             is not possible to seek backwards and "unwrite" the zip file data.
             </para>
            
             <para>
             Data for entries that have been added to the <c>ZipFile</c> instance is written
             to the output when the <c>Save</c> method is called. This means that the input
             streams for those entries must be available at the time the application
             calls <c>Save</c>.  If, for example, the application adds entries with
             <c>AddFileStream</c> using a dynamically-allocated <c>MemoryStream</c>,
             the memory stream must not have been disposed before the call to <c>Save</c>.
             </para>
            
             <para>
             When using the zip library within an ASP.NET application, you may wish to set the
             <c>TempFileFolder</c> property on the <c>ZipFile</c> instance before calling Save().
             </para>
             </remarks>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.AddFileStream(System.String,System.String,System.IO.Stream)"/>
            
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.BadStateException">
             Thrown if you haven't specified a location or stream for saving the zip,
             either in the constructor or by setting the Name property. 
             </exception>
            
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Save(System.String)">
             <summary>
             Save the file to a new zipfile, with the given name. 
             </summary>
             
             <remarks>
             <para>
             This is handy when reading a zip archive from a stream 
             and you want to modify the archive (add a file, change a 
             comment, etc) and then save it to a file. 
             </para>
             <para>
             It also works if you create a new ZipFile for writing to a 
             stream, and then you also want to write it to a filesystem file. 
             In that case, call the Save() method, and then also call this method with
             a filename. 
             </para>
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             Thrown if you specify a directory for the filename.
             </exception>
            
             <param name="zipFileName">
             The name of the zip archive to save to. Existing files will 
             be overwritten with great prejudice.
             </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Save(System.IO.Stream)">
            <summary>
            Save the zip archive to the specified stream.
            </summary>
            <param name="outputStream">The <c>System.IO.Stream</c> to write to. It must be writable.</param>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.Zip.ZipFile.SaveProgress">
             <summary>
             An event handler invoked when a Save() starts, before and after each entry has been
             written to the archive, when a Save() completes, and during other Save events.
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event, different properties on the
             SaveProgressEventArgs parameter are set.  The following table 
             summarizes the available EventTypes and the conditions under which this 
             event handler is invoked with a SaveProgressEventArgs with the given EventType.
             </para>
             
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
             
             <item>
             <term>ZipProgressEventType.Saving_Started</term>
             <description>Fired when ZipFile.Save() begins. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_BeforeSaveEntry</term>
             <description>Fired within ZipFile.Save(), just before writing data for each particular entry. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveEntry</term>
             <description>Fired within ZipFile.Save(), just after having finished writing data for each 
             particular entry. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_Completed</term>
             <description>Fired when ZipFile.Save() has completed. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveTempArchive</term>
             <description>Fired after the temporary file has been created.  This happens only
             when saving to a disk file.  This event will not be invoked when saving to a stream.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_BeforeRenameTempArchive</term>
             <description>Fired just before renaming the temporary file to the permanent location.  This 
             happens only when saving to a disk file.  This event will not be invoked when saving to a stream.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterRenameTempArchive</term>
             <description>Fired just after renaming the temporary file to the permanent location.  This 
             happens only when saving to a disk file.  This event will not be invoked when saving to a stream.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterCompileSelfExtractor</term>
             <description>Fired after a self-extracting archive has finished compiling. 
             This EventType is used only within SaveSelfExtractor().
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_BytesRead</term>
             <description>Set during the save of a particular entry, to update progress of the Save(). 
             When this EventType is set, the BytesTransferred is the number of bytes that have been read from the 
             source stream.  The TotalBytesToTransfer is the number of bytes in the uncompressed file.
             </description>
             </item>
             
             </list>
             </remarks>
            
             <example>
             <code lang="C#">
             static bool justHadByteUpdate= false;
             public static void SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Saving_Started)
                     Console.WriteLine("Saving: {0}", e.ArchiveName);
             
                 else if (e.EventType == ZipProgressEventType.Saving_Completed)
                 {
                     justHadByteUpdate= false; 
                     Console.WriteLine();
                     Console.WriteLine("Done: {0}", e.ArchiveName);
                 }
             
                 else if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                 {
                     if (justHadByteUpdate) 
                         Console.WriteLine();
                     Console.WriteLine("  Writing: {0} ({1}/{2})",  
                                       e.NameOfLatestEntry, e.EntriesSaved, e.EntriesTotal);
                     justHadByteUpdate= false;
                 }
             
                 else if (e.EventType == ZipProgressEventType.Saving_EntryBytesWritten)
                 {
                     if (justHadByteUpdate)
                         Console.SetCursorPosition(0, Console.CursorTop);
                      Console.Write("     {0}/{1} ({2:N0}%)", e.BytesWritten, e.TotalBytesToWrite,
                                   e.BytesWritten / (0.01 * e.TotalBytesToWrite ));
                     justHadByteUpdate= true;
                 }
             }
             
             public static ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile()) {
                 zip.SaveProgress += SaveProgress; 
                 zip.AddDirectory(directory);
                 zip.Save(targetZip);
               }
             }
            
             </code>
             <para>
             This is an example of using the SaveProgress events in a WinForms app.
             </para>
             <code>
             delegate void SaveEntryProgress(SaveProgressEventArgs e);
             delegate void ButtonClick(object sender, EventArgs e);
            
             public class WorkerOptions
             {
                 public string ZipName;
                 public string Folder;
                 public string Encoding;
                 public string Comment;
                 public int ZipFlavor;
                 public Zip64Option Zip64;
             }
            
             private int _progress2MaxFactor;
             private bool _saveCanceled;
             private long _totalBytesBeforeCompress;
             private long _totalBytesAfterCompress;
             private Thread _workerThread;
            
            
             private void btnZipup_Click(object sender, EventArgs e)
             {
                 KickoffZipup();
             }
            
             private void btnCancel_Click(object sender, EventArgs e)
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new ButtonClick(this.btnCancel_Click), new object[] { sender, e });
                 }
                 else
                 {
                     _saveCanceled = true;
                     lblStatus.Text = "Canceled...";
                     ResetState();
                 }
             }
            
             private void KickoffZipup()
             {
                 _folderName = tbDirName.Text;
            
                 if (_folderName == null || _folderName == "") return;
                 if (this.tbZipName.Text == null || this.tbZipName.Text == "") return;
            
                 // check for existence of the zip file:
                 if (System.IO.File.Exists(this.tbZipName.Text))
                 {
                     var dlgResult = MessageBox.Show(String.Format("The file you have specified ({0}) already exists." + 
                                                                   "  Do you want to overwrite this file?", this.tbZipName.Text), 
                                                     "Confirmation is Required", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                     if (dlgResult != DialogResult.Yes) return;
                     System.IO.File.Delete(this.tbZipName.Text);
                 }
            
                  _saveCanceled = false;
                 _nFilesCompleted = 0;
                 _totalBytesAfterCompress = 0;
                 _totalBytesBeforeCompress = 0;
                 this.btnOk.Enabled = false;
                 this.btnOk.Text = "Zipping...";
                 this.btnCancel.Enabled = true;
                 lblStatus.Text = "Zipping...";
            
                 var options = new WorkerOptions
                 {
                     ZipName = this.tbZipName.Text,
                     Folder = _folderName,
                     Encoding = "ibm437"
                 };
            
                 if (this.comboBox1.SelectedIndex != 0)
                 {
                     options.Encoding = this.comboBox1.SelectedItem.ToString();
                 }
            
                 if (this.radioFlavorSfxCmd.Checked)
                     options.ZipFlavor = 2;
                 else if (this.radioFlavorSfxGui.Checked)
                     options.ZipFlavor = 1;
                 else options.ZipFlavor = 0;
            
                 if (this.radioZip64AsNecessary.Checked)
                     options.Zip64 = Zip64Option.AsNecessary;
                 else if (this.radioZip64Always.Checked)
                     options.Zip64 = Zip64Option.Always;
                 else options.Zip64 = Zip64Option.Never;
            
                 options.Comment = String.Format("Encoding:{0} || Flavor:{1} || ZIP64:{2}\r\nCreated at {3} || {4}\r\n",
                             options.Encoding,
                             FlavorToString(options.ZipFlavor),
                             options.Zip64.ToString(),
                             System.DateTime.UtcNow.ToString("yyyy-MMM-dd HH:mm:ss"),
                             this.Text);
            
                 if (this.tbComment.Text != TB_COMMENT_NOTE)
                     options.Comment += this.tbComment.Text;
            
                 _workerThread = new Thread(this.DoSave);
                 _workerThread.Name = "Zip Saver thread";
                 _workerThread.Start(options);
                 this.Cursor = Cursors.WaitCursor;
              }
            
            
             private void DoSave(Object p)
             {
                 WorkerOptions options = p as WorkerOptions;
                 try
                 {
                     using (var zip1 = new ZipFile())
                     {
                         zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(options.Encoding);
                         zip1.Comment = options.Comment;
                         zip1.AddDirectory(options.Folder);
                         _entriesToZip = zip1.EntryFileNames.Count;
                         SetProgressBars();
                         zip1.SaveProgress += this.zip1_SaveProgress;
            
                         zip1.UseZip64WhenSaving = options.Zip64;
            
                         if (options.ZipFlavor == 1)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.WinFormsApplication);
                         else if (options.ZipFlavor == 2)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.ConsoleApplication);
                         else
                             zip1.Save(options.ZipName);
                     }
                 }
                 catch (System.Exception exc1)
                 {
                     MessageBox.Show(String.Format("Exception while zipping: {0}", exc1.Message));
                     btnCancel_Click(null, null);
                 }
             }
            
            
            
             void zip1_SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Saving_AfterWriteEntry:
                         StepArchiveProgress(e);
                         break;
                     case ZipProgressEventType.Saving_EntryBytesRead:
                         StepEntryProgress(e);
                         break;
                     case ZipProgressEventType.Saving_Completed:
                         SaveCompleted();
                         break;
                     case ZipProgressEventType.Saving_AfterSaveTempArchive:
                         // this event only occurs when saving an SFX file
                         TempArchiveSaved();
                         break;
                 }
                 if (_saveCanceled)
                     e.Cancel = true;
             }
            
            
            
             private void StepArchiveProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar1.InvokeRequired)
                 {
                     this.progressBar1.Invoke(new SaveEntryProgress(this.StepArchiveProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         _nFilesCompleted++;
                         this.progressBar1.PerformStep();
                         _totalBytesAfterCompress += e.CurrentEntry.CompressedSize;
                         _totalBytesBeforeCompress += e.CurrentEntry.UncompressedSize;
            
                         // reset the progress bar for the entry:
                         this.progressBar2.Value = this.progressBar2.Maximum = 1;
            
                         this.Update();
                     }
                 }
             }
            
            
             private void StepEntryProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar2.InvokeRequired)
                 {
                     this.progressBar2.Invoke(new SaveEntryProgress(this.StepEntryProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         if (this.progressBar2.Maximum == 1)
                         {
                             // reset
                             Int64 max = e.TotalBytesToTransfer;
                             _progress2MaxFactor = 0;
                             while (max > System.Int32.MaxValue)
                             {
                                 max /= 2;
                                 _progress2MaxFactor++;
                             }
                             this.progressBar2.Maximum = (int)max;
                             lblStatus.Text = String.Format("{0} of {1} files...({2})",
                                 _nFilesCompleted + 1, _entriesToZip, e.CurrentEntry.FileName);
                         }
            
                          int xferred = e.BytesTransferred >> _progress2MaxFactor;
            
                          this.progressBar2.Value = (xferred >= this.progressBar2.Maximum)
                             ? this.progressBar2.Maximum
                             : xferred;
            
                          this.Update();
                     }
                 }
             }
            
             private void SaveCompleted()
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new MethodInvoker(this.SaveCompleted));
                 }
                 else
                 {
                     lblStatus.Text = String.Format("Done, Compressed {0} files, {1:N0}% of original.",
                         _nFilesCompleted, (100.00 * _totalBytesAfterCompress) / _totalBytesBeforeCompress);
                      ResetState();
                 }
             }
            
             private void ResetState()
             {
                 this.btnCancel.Enabled = false;
                 this.btnOk.Enabled = true;
                 this.btnOk.Text = "Zip it!";
                 this.progressBar1.Value = 0;
                 this.progressBar2.Value = 0;
                 this.Cursor = Cursors.Default;
                 if (!_workerThread.IsAlive)
                     _workerThread.Join();
             }
             </code>
            
             <code lang="VB">
             Public Sub ZipUp(ByVal targetZip As String, ByVal directory As String)
             	Try 
             	    Using zip As ZipFile = New ZipFile
             		AddHandler zip.SaveProgress, AddressOf MySaveProgress
             		zip.AddDirectory(directory)
             		zip.Save(targetZip)
             	    End Using
             	Catch ex1 As Exception
             	    Console.Error.WriteLine(("exception: " &amp; ex1.ToString))
             	End Try
             End Sub
             
             Private Shared justHadByteUpdate As Boolean = False
             
             Public Shared Sub MySaveProgress(ByVal sender As Object, ByVal e As SaveProgressEventArgs)
                 If (e.EventType Is ZipProgressEventType.Saving_Started) Then
                     Console.WriteLine("Saving: {0}", e.ArchiveName)
             
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_Completed) Then
                     CreateLargeZip.justHadByteUpdate = False
                     Console.WriteLine
                     Console.WriteLine("Done: {0}", e.ArchiveName)
             
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_BeforeWriteEntry) Then
                     If CreateLargeZip.justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("  Writing: {0} ({1}/{2})", e.NameOfLatestEntry, e.EntriesSaved, e.EntriesTotal)
                     CreateLargeZip.justHadByteUpdate = False
             
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_EntryBytesWritten) Then
                     If CreateLargeZip.justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("     {0}/{1} ({2:N0}%)", e.BytesWritten, _
                                   e.TotalBytesToWrite, _
                                   (CDbl(e.BytesWritten) / (0.01 * e.TotalBytesToWrite)))
                     CreateLargeZip.justHadByteUpdate = True
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.Zip.ZipFile.ReadProgress">
             <summary>
             An event handler invoked before, during, and after the reading of a zip archive.
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event being signaled, different properties on the
             ReadProgressEventArgs parameter are set.  The following table 
             summarizes the available EventTypes and the conditions under which this 
             event handler is invoked with a ReadProgressEventArgs with the given EventType.
             </para>
             
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
             
             <item>
             <term>ZipProgressEventType.Reading_Started</term>
             <description>Fired just as ZipFile.Read() begins. Meaningful properties: ArchiveName.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_Completed</term>
             <description>Fired when ZipFile.Read() has completed. Meaningful properties: ArchiveName.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_ArchiveBytesRead</term>
             <description>Fired while reading, updates the number of bytes read for the entire archive. 
             Meaningful properties: ArchiveName, NameOfLatestEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_BeforeReadEntry</term>
             <description>Indicates an entry is about to be read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_AfterReadEntry</term>
             <description>Indicates an entry has just been read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal, NameOfLatestEntry.
             </description>
             </item>
            
             </list>
             </remarks>
        </member>
        <member name="E:Telerik.Sitefinity.Utilities.Zip.ZipFile.ExtractProgress">
             <summary>
             An event handler invoked before, during, and after extraction of entries 
             in the zip archive. 
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event, different properties on the
             ExtractProgressEventArgs parameter are set.  The following table 
             summarizes the available EventTypes and the conditions under which this 
             event handler is invoked with a ExtractProgressEventArgs with the given EventType.
             </para>
             
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
             
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractAll</term>
             <description>Set when ExtractAll() begins.  The ArchiveName, Overwrite,
             and ExtractLocation properties are meaningful.</description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractAll</term>
             <description>Set when ExtractAll() has completed.  The ArchiveName, 
             Overwrite, and ExtractLocation properties are meaningful.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractEntry</term>
             <description>Set when an Extract() on an entry in the ZipFile has begun.  
             Properties that are meaningful:  ArchiveName, EntriesTotal, NameOfLatestEntry, Overwrite, 
             ExtractLocation, EntriesExtracted.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractEntry</term>
             <description>Set when an Extract() on an entry in the ZipFile has completed.  
             Properties that are meaningful:  ArchiveName, EntriesTotal, NameOfLatestEntry, Overwrite, 
             ExtractLocation, EntriesExtracted.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_EntryBytesWritten</term>
             <description>Set within a call to Extract() on an entry in the ZipFile, as
             data is extracted for the entry.  Properties that are meaningful:  ArchiveName, 
             NameOfLatestEntry, BytesWritten, TotalBytesToWrite. 
             </description>
             </item>
             
             </list>
             
             </remarks>
            
             <example>
             <code>
             private static bool justHadByteUpdate = false;
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
               if(e.EventType == ZipProgressEventType.Extracting_EntryBytesWritten)
               {
                 if (justHadByteUpdate)
                   Console.SetCursorPosition(0, Console.CursorTop);
            
                 Console.Write("   {0}/{1} ({2:N0}%)", e.BytesWritten, e.TotalBytesToWrite,
                               e.BytesWritten / (0.01 * e.TotalBytesToWrite ));
                 justHadByteUpdate = true;
               }
               else if(e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
               {
                 if (justHadByteUpdate) 
                   Console.WriteLine();
                 Console.WriteLine("Extracting: {0}", e.NameOfLatestEntry);
                 justHadByteUpdate= false;
               }
             }
            
             public static ExtractZip(string zipToExtract, string directory)
             {
               string TargetDirectory= "extract";
               using (var zip = ZipFile.Read(zipToExtract)) {
                 zip.ExtractProgress += ExtractProgress; 
                 foreach (var e in zip1)
                 {
                   e.Extract(TargetDirectory, true);
                 }
               }
             }
            
             </code>
             <code lang="VB">
             Public Shared Sub Main(ByVal args As String())
                 Dim ZipToUnpack As String = "C1P3SML.zip"
                 Dim TargetDir As String = "ExtractTest_Extract"
                 Console.WriteLine("Extracting file {0} to {1}", ZipToUnpack, TargetDir)
                 Using zip1 As ZipFile = ZipFile.Read(ZipToUnpack)
                     AddHandler zip1.ExtractProgress, AddressOf MyExtractProgress
                     Dim e As ZipEntry
                     For Each e In zip1
                         e.Extract(TargetDir, True)
                     Next
                 End Using
             End Sub
             
             Private Shared justHadByteUpdate As Boolean = False
             
             Public Shared Sub MyExtractProgress(ByVal sender As Object, ByVal e As ExtractProgressEventArgs)
                 If (e.EventType Is ZipProgressEventType.Extracting_EntryBytesWritten) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("   {0}/{1} ({2:N0}%)", e.BytesWritten, e.TotalBytesToWrite, (CDbl(e.BytesWritten) / (0.01 * e.TotalBytesToWrite)))
                     ExtractTest.justHadByteUpdate = True
                 ElseIf (e.EventType Is ZipProgressEventType.Extracting_BeforeExtractEntry) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("Extracting: {0}", e.NameOfLatestEntry)
                     ExtractTest.justHadByteUpdate = False
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.IsZipFile(System.String)">
            <summary>
            Checks the given file to see if it appears to be a valid zip file.
            </summary>
            <remarks>
            <para>
            Calling this method is equivalent to calling 
            <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/> with the testExtract parameter set to false.
            </para>
            </remarks>
            
            <param name="fileName">The file to check.</param>
            <returns>true if the file appears to be a zip file.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.IsZipFile(System.String,System.Boolean)">
             <summary>
             Checks a to see if a file is a valid zip file.
             </summary>
            
             <remarks>
             <para>
             This method opens the specified zip file, reads in the zip archive, verifying
             the ZIP metadata as it reads.  Then, if testExtract is true, this method extracts 
             each entry in the archive, dumping all the bits. 
             </para>
             
             <para>
             If everything succeeds, then the method
             returns true.  If anything fails - for example if an incorrect signature or CRC
             is found, indicating a corrupt file, the the method returns false.  This method also returns false
             for a file that does not exist. 
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
             <param name="fileName">The zip file to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the file appears to be a valid zip file.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String)">
             <summary>
             Reads a zip file archive and returns the instance.  
             </summary>
             
             <remarks>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the <c>IBM437</c> codepage.  
             </para>
             </remarks>
             <exception cref="T:System.Exception">
             Thrown if the ZipFile cannot be read. The implementation of this 
             method relies on <c>System.IO.File.OpenRead</c>, which can throw
             a variety of exceptions, including specific exceptions if a file
             is not found, an unauthorized access exception, exceptions for
             poorly formatted filenames, and so on. 
             </exception>
             
             <param name="zipFileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <overloads>This method has a bunch of interesting overloads. They are all static (Shared in VB)</overloads>
            
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
            <summary>
            Reads a zip file archive and returns the instance, using the specified
            ReadProgress event handler.  
            </summary>
            
            <param name="zipFileName">
            The name of the zip archive to open.  
            This can be a fully-qualified or relative pathname.
            </param>
            
            <param name="readProgress">
            An event handler for Read operations.
            </param>
            
            <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String,System.IO.TextWriter)">
             <summary>
             Reads a zip file archive using the specified text encoding, and returns the instance.  
             </summary>
             
             <remarks>
             <para>
             This version of the method allows the caller to pass in a <c>TextWriter</c>.  
             The ZipFile is read in using the default IBM437 encoding for entries where UTF-8 
             encoding is not explicitly specified.
             </para>
             </remarks>
             
             <example>
             <code lang="C#">
             var sw = new System.IO.StringWriter();
             using (ZipFile zip =  ZipFile.Read("PackedDocuments.zip", sw))
             {
               var Threshold = new DateTime(2007,7,4);
               // We cannot remove the entry from the list, within the context of 
               // an enumeration of said list.
               // So we add the doomed entry to a list to be removed later.
               // pass 1: mark the entries for removal
               var MarkedEntries = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                   MarkedEntries.Add(e);
               }
               // pass 2: actually remove the entry. 
               foreach (ZipEntry zombie in MarkedEntries)
                  zip.RemoveEntry(zombie);
               zip.Comment = "This archive has been updated.";
               zip.Save();
             }
             // can now use contents of sw, eg store in an audit log
             </code>
            
             <code lang="VB">
               Dim sw As New System.IO.StringWriter
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip", sw)
                   Dim Threshold As New DateTime(2007, 7, 4)
                   ' We cannot remove the entry from the list, within the context of 
                   ' an enumeration of said list.
                   ' So we add the doomed entry to a list to be removed later.
                   ' pass 1: mark the entries for removal
                   Dim MarkedEntries As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           MarkedEntries.Add(e)
                       End If
                   Next
                   ' pass 2: actually remove the entry. 
                   Dim zombie As ZipEntry
                   For Each zombie In MarkedEntries
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = "This archive has been updated."
                   zip.Save
               End Using
               ' can now use contents of sw, eg store in an audit log
             </code>
             </example>
             
             <exception cref="T:System.Exception">
             Thrown if the zipfile cannot be read. The implementation of this 
             method relies on <c>System.IO.File.OpenRead</c>, which can throw
             a variety of exceptions, including specific exceptions if a file
             is not found, an unauthorized access exception, exceptions for
             poorly formatted filenames, and so on. 
             </exception>
             
             <param name="zipFileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages during operations
             on the zip archive.  A console application may wish to pass <c>System.Console.Out</c> to get 
             messages on the Console. A graphical or headless application may wish to capture the messages 
             in a different <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>. 
             </param>
             
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
            <summary>
            Reads a zip file archive using the specified text encoding, and the
            specified ReadProgress event handler, and returns the instance.  
            </summary>
            
            <param name="zipFileName">
            The name of the zip archive to open.  
            This can be a fully-qualified or relative pathname.
            </param>
            
            <param name="readProgress">
            An event handler for Read operations.
            </param>
            
            <param name="statusMessageWriter">
            The <c>System.IO.TextWriter</c> to use for writing verbose status messages during operations
            on the zip archive.  A console application may wish to pass <c>System.Console.Out</c> to get 
            messages on the Console. A graphical or headless application may wish to capture the messages 
            in a different <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>. 
            </param>
            
            <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String,System.Text.Encoding)">
             <summary>
             Reads a zip file archive using the specified text encoding, and returns the instance.  
             </summary>
             
             <remarks>
             <para>
             This version of the method allows the caller to pass in an <c>Encoding</c>.  
             The ZipFile is read in using the specified encoding for entries where UTF-8
             encoding is not explicitly specified.
             </para>
             </remarks>
             
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page (950), 
             and extract each entry in the zip file.
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(ZipToExtract,
                                               System.Text.Encoding.GetEncoding(950)))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
             </example>
            
             <exception cref="T:System.Exception">
             Thrown if the zipfile cannot be read. The implementation of this 
             method relies on <c>System.IO.File.OpenRead</c>, which can throw
             a variety of exceptions, including specific exceptions if a file
             is not found, an unauthorized access exception, exceptions for
             poorly formatted filenames, and so on. 
             </exception>
             
             <param name="zipFileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be careful specifying the
             encoding.  If the value you use here is not the same as the Encoding used when the zip archive was 
             created (possibly by a different archiver) you will get unexpected results and possibly exceptions. 
             </param>
             
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</seealso>.
            
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String,System.Text.Encoding,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding and ReadProgress
             event handler, and returns the instance.  
             </summary>
             
             <param name="zipFileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be careful specifying the
             encoding.  If the value you use here is not the same as the Encoding used when the zip archive was 
             created (possibly by a different archiver) you will get unexpected results and possibly exceptions. 
             </param>
             
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Reads a zip file archive using the specified text encoding and the specified
             TextWriter for status messages, and returns the instance.  
             </summary>
             
             <remarks>
             <para>
             This version of the method allows the caller to pass in a <c>TextWriter</c> and an <c>Encoding</c>.  
             The ZipFile is read in using the specified encoding for entries where UTF-8
             encoding is not explicitly specified.
             </para>
             </remarks>
             
             
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page (950), 
             and extract each entry in the zip file, while sending status messages out to the Console. 
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(ZipToExtract,
                                               System.Console.Out,
                                               System.Text.Encoding.GetEncoding(950)))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
             </example>
            
             <exception cref="T:System.Exception">
             Thrown if the zipfile cannot be read. The implementation of this 
             method relies on <c>System.IO.File.OpenRead</c>, which can throw
             a variety of exceptions, including specific exceptions if a file
             is not found, an unauthorized access exception, exceptions for
             poorly formatted filenames, and so on. 
             </exception>
             
             <param name="zipFileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages during operations
             on the zip archive.  A console application may wish to pass <c>System.Console.Out</c> to get 
             messages on the Console. A graphical or headless application may wish to capture the messages 
             in a different <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>. 
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be careful specifying the
             encoding.  If the value you use here is not the same as the Encoding used when the zip archive was 
             created (possibly by a different archiver) you will get unexpected results and possibly exceptions.  
             </param>
             
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding"/>
            
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding,  the specified
             TextWriter for status messages, and the specified ReadProgress event handler, 
             and returns the instance.  
             </summary>
             
             <param name="zipFileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages during operations
             on the zip archive.  A console application may wish to pass <c>System.Console.Out</c> to get 
             messages on the Console. A graphical or headless application may wish to capture the messages 
             in a different <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>. 
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be careful specifying the
             encoding.  If the value you use here is not the same as the Encoding used when the zip archive was 
             created (possibly by a different archiver) you will get unexpected results and possibly exceptions. 
             </param>
             
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream)">
             <summary>
             Reads a zip archive from a stream.
             </summary>
            
             <remarks>
             <para>
             This is useful when when the zip archive content is available from 
             an already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed. 
             </para>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the <c>IBM437</c> codepage.  
             </para>
             </remarks>
            
             <example>
             This example shows how to Read zip content from a stream, and extract
             one entry into a different stream. In this example, the filename
             "NameOfEntryInArchive.doc", refers only to the name of the entry
             within the zip archive.  A file by that name is not created in the
             filesystem.  The I/O is done strictly with the given streams.
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
               zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
               zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, with a given ReadProgress event handler.
             </summary>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <returns>an instance of ZipFile corresponding to the stream being read.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter)">
             <summary>
             Reads a zip archive from a stream, using the specified TextWriter for status messages.
             </summary>
             
             <remarks>
             <para>
             This method is useful when when the zip archive content is available from 
             an already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed. 
             </para>
             
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the <c>IBM437</c> codepage.  
             For more information on the encoding, see the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</see> property.
             </para>
             </remarks>
             
             
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if zipStream is null.
             In this case, the inner exception is an ArgumentException.
             </exception>
            
             <param name="zipStream">the stream containing the zip data.</param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written during
             operations on the ZipFile.  For example, in a console application,
             System.Console.Out works, and will get a message for each entry added to the
             ZipFile.  If the TextWriter is null, no verbose messages are written.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified TextWriter for status messages, 
             and the specified ReadProgress event handler.
             </summary>
            
             <param name="zipStream">the stream containing the zip data.</param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written during
             operations on the ZipFile.  For example, in a console application,
             System.Console.Out works, and will get a message for each entry added to the
             ZipFile.  If the TextWriter is null, no verbose messages are written.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a stream, using the specified encoding.
             </summary>
             
             <remarks>
             <para>
             This method is useful when when the zip archive content is available from 
             an already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed. 
             </para>
             </remarks>
            
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if zipStream is null.
             In this case, the inner exception is an ArgumentException.
             </exception>
            
             <param name="zipStream">the stream containing the zip data.</param>
             
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8 encoding
             bit set.  Be careful specifying the encoding.  If the value you use here is not the
             same as the Encoding used when the zip archive was created (possibly by a different
             archiver) you will get unexpected results and possibly exceptions.  See the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</see>
             property for more information.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream,System.Text.Encoding,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
            <summary>
            Reads a zip archive from a stream, using the specified encoding, and
            and the specified ReadProgress event handler.
            </summary>
            
            <param name="zipStream">the stream containing the zip data.</param>
            
            <param name="encoding">
            The text encoding to use when reading entries that do not have the UTF-8 encoding
            bit set.  Be careful specifying the encoding.  If the value you use here is not the
            same as the Encoding used when the zip archive was created (possibly by a different
            archiver) you will get unexpected results and possibly exceptions.  See the <see
            cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</see>
            property for more information.
            </param>
            
            <param name="readProgress">
            An event handler for Read operations.
            </param>
            
            <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding and the 
             specified TextWriter for status messages.
             </summary>
            
             <remarks>
             <para>
             This method is useful when when the zip archive content is available from 
             an already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed. 
             </para>
             </remarks>
            
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if zipStream is null.
             In this case, the inner exception is an ArgumentException.
             </exception>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written during
             operations on the ZipFile.  For example, in a console application,
             System.Console.Out works, and will get a message for each entry added to the
             ZipFile.  If the TextWriter is null, no verbose messages are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8 encoding
             bit set.  Be careful specifying the encoding.  If the value you use here is not the
             same as the Encoding used when the zip archive was created (possibly by a different
             archiver) you will get unexpected results and possibly exceptions.  See the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</see>
             property for more information.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{Telerik.Sitefinity.Utilities.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding, the 
             specified TextWriter for status messages, 
             and the specified ReadProgress event handler.
             </summary>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written during
             operations on the ZipFile.  For example, in a console application,
             System.Console.Out works, and will get a message for each entry added to the
             ZipFile.  If the TextWriter is null, no verbose messages are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8 encoding
             bit set.  Be careful specifying the encoding.  If the value you use here is not the
             same as the Encoding used when the zip archive was created (possibly by a different
             archiver) you will get unexpected results and possibly exceptions.  See the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding">ProvisionalAlternateEncoding</see>
             property for more information.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.Byte[])">
            <summary>
            Reads a zip archive from a byte array.
            </summary>
            
            <remarks>
            This is useful when the data for the zipfile is contained in a byte array, 
            for example, downloaded from an FTP server without being saved to a
            filesystem. 
            </remarks>
            
            <param name="buffer">
            The byte array containing the zip data.  
            (I don't know why, but sometimes the compiled helpfuile (.chm) indicates a 2d 
            array when it is just one-dimensional.  This is a one-dimensional array.)
            </param>
            
            <returns>an instance of ZipFile. The name on the ZipFile will be null (nothing in VB)). </returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.Byte[],System.IO.TextWriter)">
             <summary>
             Reads a zip archive from a byte array, using the given StatusMessageWriter.
             </summary>
             
             <remarks>
             <para>
             This method is useful when the data for the zipfile is contained in a byte array, for
             example when retrieving the data from a database or other non-filesystem store.  
             The default Text Encoding (IBM437) is used to read the zipfile data.
             </para>
             
             </remarks>
             
             <param name="buffer">the byte array containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written during
             operations on the ZipFile.  For example, in a console application,
             System.Console.Out works, and will get a message for each entry added to the
             ZipFile.  If the TextWriter is null, no verbose messages are written.
             </param>
             
             <returns>an instance of ZipFile. The name is set to null.</returns>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Read(System.Byte[],System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a byte array, using the given StatusMessageWriter and text Encoding.
             </summary>
             
             <remarks>
             <para>
             This method is useful when the data for the zipfile is contained in a byte array, for
             example when retrieving the data from a database or other non-filesystem store.  
             </para>
             
             </remarks>
             
             <param name="buffer">the byte array containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written during
             operations on the ZipFile.  For example, in a console application,
             System.Console.Out works, and will get a message for each entry added to the
             ZipFile.  If the TextWriter is null, no verbose messages are written.
             </param>
             
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8 encoding
             bit set.  Be careful specifying the encoding.  If the value you use here is not the
             same as the Encoding used when the zip archive was created (possibly by a different
             archiver) you will get unexpected results and possibly exceptions.  See the <see
             cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
             
             <returns>an instance of ZipFile. The name is set to null.</returns>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.GetEnumerator">
             <summary>
             Generic IEnumerator support, for use of a ZipFile in a foreach construct.  
             </summary>
            
             <remarks>
             You probably do not want to call <c>GetEnumerator</c> explicitly. Instead 
             it is implicitly called when you use a <c>foreach</c> loop in C#, or a 
             <c>For Each</c> loop in VB.
             </remarks>
            
             <example>
             This example reads a zipfile of a given name, then enumerates the 
             entries in that zip file, and displays the information about each 
             entry on the Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               bool header = true;
               foreach (ZipEntry e in zip)
               {
                 if (header)
                 {
                    System.Console.WriteLine("Zipfile: {0}", zip.Name);
                    System.Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded);
                    System.Console.WriteLine("BitField: 0x{0:X2}", e.BitField);
                    System.Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod);
                    System.Console.WriteLine("\n{1,-22} {2,-6} {3,4}   {4,-8}  {0}",
                                 "Filename", "Modified", "Size", "Ratio", "Packed");
                    System.Console.WriteLine(new System.String('-', 72));
                    header = false;
                 }
            
                 System.Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}",
                             e.FileName,
                             e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                             e.UncompressedSize,
                             e.CompressionRatio,
                             e.CompressedSize);
            
                 e.Extract();
               }
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToExtract As String = "c:\foo.zip"
               Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                   Dim header As Boolean = True
                   Dim e As ZipEntry
                   For Each e In zip
                       If header Then
                           Console.WriteLine("Zipfile: {0}", zip.Name)
                           Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded)
                           Console.WriteLine("BitField: 0x{0:X2}", e.BitField)
                           Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod)
                           Console.WriteLine(ChrW(10) &amp; "{1,-22} {2,-6} {3,4}   {4,-8}  {0}", _
                             "Filename", "Modified", "Size", "Ratio", "Packed" )
                           Console.WriteLine(New String("-"c, 72))
                           header = False
                       End If
                       Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}", _
                         e.FileName, _
                         e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"), _
                         e.UncompressedSize, _
                         e.CompressionRatio, _
                         e.CompressedSize )
                       e.Extract
                   Next
               End Using
             </code>
             </example>
             
             <returns>A generic enumerator suitable for use  within a foreach loop.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerator support, for use of a ZipFile in a foreach construct.  
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.ExtractAll(System.String)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the filesystem.
             The path can be relative or fully-qualified. 
             </summary>
            
             <remarks>
             <para>
             If an extraction of a file from the zip archive would overwrite an existing file
             in the filesystem, the file will not be overwritten and an exception will be
             thrown. To avoid this, use the overload that allows you to specify that you want
             to overwrite existing files.
             </para>
            
             <para>
             This method will send verbose output messages to the StatusMessageTextWriter, if it 
             is set on the ZipFile instance. 
             </para>
            
             <para>
             You may wish to take advantage of the <c>ExtractProgress</c> event.
             </para>
            
             </remarks>
            
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.ExtractAll(System.String,System.Boolean)"/>
             <seealso cref="E:Telerik.Sitefinity.Utilities.Zip.ZipFile.ExtractProgress"/>
            
             <param name="path">The path to which the contents of the zip archive should be extracted.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.ExtractAll(System.String,System.Boolean)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the filesystem,  
             optionally overwriting any existing files. The path can be relative or fully-qualified. 
             </summary>
            
             <remarks>
             This method will send verbose output messages to the StatusMessageTextWriter, if it 
             is set on the ZipFile instance. 
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, 
             to the specified target directory.  It overwrites any existing files.
             It also handles exceptions that may be thrown, such as unauthorized 
             access exceptions.
             <code>
             String TargetDirectory= "c:\\temp\\unpack";
             try 
             {
               using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
               {
                 zip.ExtractAll(TargetDirectory, true);
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
             
             <code lang="VB">
               Dim TargetDirectory As String = "c:\temp\unpack"
               Try 
                   Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                       zip.ExtractAll(TargetDirectory, True)
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
             
             <param name="path">the path to which the contents of the zipfile are extracted.</param>
             <param name="wantOverwrite">true to overwrite any existing files on extraction</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Extract(System.String)">
             <summary>
             Extract a single item from the archive.  The file, including any relative
             qualifying path, is created at the current working directory.  
             </summary>
             
             <remarks>
             <para>
             Using this method, the entry is extracted using the KeyPassword that is specified on
             the ZipFile instance. If you have not set the KeyPassword property, then the password
             is null, and the entry is extracted with no password.  The file, including any
             relative qualifying path, is created at the current working directory.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <param name="fileName">
             The file to extract. It must be the exact filename, including the path
             contained in the archive, if any. The filename match is not case-sensitive by
             default; you can use the <c>CaseSensitiveRetrieval</c> property to change
             this behavior.
             </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Extract(System.String,System.String)">
             <summary>
             Extract a single item from the archive.  The file, including any relative
             qualifying path, is created at the current working directory.  
             </summary>
            
             <remarks>
             <para>
             Calling this method, the entry is extracted using the KeyPassword that is specified on
             the ZipFile instance. If you have not set the KeyPassword property, then the password
             is null, and the entry is extracted with no password.  The file, including any
             relative qualifying path, is created at the specified directory.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <param name="fileName">
             the file to extract. It must be the exact filename, including the path
             contained in the archive, if any. The filename match is not case-sensitive by
             default; you can use the <c>CaseSensitiveRetrieval</c> property to change
             this behavior.
             </param>
             <param name="directoryName">the directory into which to extract. It will be created 
             if it does not exist.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Extract(System.String,System.Boolean)">
             <summary>
             Extract a single item from the archive, potentially overwriting  
             any existing file in the filesystem by the same name.
             </summary>
             
             <remarks>
             <para>
             Using this method, the entry is extracted using the KeyPassword that is specified on
             the ZipFile instance. If you have not set the KeyPassword property, then the password
             is null, and the entry is extracted with no password.  The file, including any
             relative qualifying path, is created at the current working directory.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <param name="fileName">
             The file to extract. It must be the exact filename, including the path contained in the 
             archive, if any. The filename match is not case-sensitive by default; you can use the <c>CaseSensitiveRetrieval</c> 
             property to change this behavior.
             The pathname can use forward-slashes or backward slashes.
             </param>
            
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.CaseSensitiveRetrieval"/>
            
             <param name="wantOverwrite">True if the caller wants to overwrite any existing files by the given name.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Extract(System.String,System.String,System.Boolean)">
             <summary>
             Extract a single item from the archive, into the specified directory, potentially overwriting  
             any existing file in the filesystem by the same name.   
             </summary>
             
             <remarks>
             <para>
             Calling this method, the entry is extracted using the KeyPassword that is specified on
             the ZipFile instance. If you have not set the KeyPassword property, then the password
             is null, and the entry is extracted with no password.  The file, including any
             relative qualifying path, is created at the specified directory.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <param name="fileName">
             The file to extract. It must be the exact filename, including the path contained in the archive, 
             if any. The filename match is not case-sensitive by default; you can use the <c>CaseSensitiveRetrieval</c> 
             property to change this behavior. The pathname can use forward-slashes or backward slashes.
             </param>
             <param name="directoryName">the directory into which to extract. It will be created 
             if it does not exist.</param>
             <param name="wantOverwrite">True if the caller wants to overwrite any existing files by the given name.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Extract(System.String,System.IO.Stream)">
             <summary>
             Extract a single specified file from the archive, to the given stream.   
             </summary>
             
             <remarks>
             <para>
             Calling this method, the entry is extracted using the KeyPassword that is 
             specified on the ZipFile instance. If you have not set the KeyPassword property, then
             the password is null, and the entry is extracted with no password.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <exception cref="T:Telerik.Sitefinity.Utilities.Zip.ZipException">
             Thrown if the outputStream is not writable, or if the filename is 
             null or empty. The inner exception is an ArgumentException in each case.
             </exception>
            
             <param name="fileName">
             the file to extract. It should include pathnames used in the archive, if any.
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior.The
             application can specify pathnames using forward-slashes or backward slashes.
             </param>
            
             <param name="outputStream">
             the stream to which the extacted, decompressed file data is written. 
             The stream must be writable.
             </param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Item(System.Int32)">
             <summary>
             This is an integer indexer into the Zip archive.
             </summary>
             
             <remarks>
             <para>
             This property is read-write. But don't get too excited: When setting the value, the
             only legal value is null. If you assign a non-null value
             (non Nothing in VB), the setter will throw an exception.
             </para>
            
             <para>
             Setting the value to null is equivalent to calling <see cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.RemoveEntry(System.String)"/>
             with the filename for the given entry.
             </para>
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             Thrown if the caller attempts to assign a non-null value to the indexer, 
             or if the caller uses an out-of-range index value.
             </exception>
            
             <param name="ix">
             The index value.
             </param>
             
             <returns>
             The ZipEntry within the Zip archive at the specified index. If the 
             entry does not exist in the archive, this indexer throws.
             </returns>
             
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Item(System.String)">
             <summary>
             This is a name-based indexer into the Zip archive.  
             </summary>
             
             <remarks>
             <para>
             Retrieval by the string-based indexer is done on a case-insensitive basis, 
             by default.  Set the <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.CaseSensitiveRetrieval"/> property to use case-sensitive 
             comparisons. 
             </para>
             <para>
             This property is read-write. When setting the value, the
             only legal value is null. Setting the value to null is
             equivalent to calling <see
             cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.RemoveEntry(System.String)"/> with the filename.
             </para>
             <para>
             If you assign a non-null value
             (non Nothing in VB), the setter will throw an exception.
             </para>
             <para>
             It is not always the case that <c>this[value].FileName == value</c>.  In
             the case of directory entries in the archive, you may retrieve them with
             the name of the directory with no trailing slash, even though in the
             entry itself, the actual <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipEntry.FileName"/> property may
             include a trailing slash.  In other words, for a directory entry named
             "dir1", you may find <c>this["dir1"].FileName == "dir1/"</c>.
             </para>
             </remarks>
             
             <example>
             This example extracts only the entries in a zip file that are .txt files.
             <code>
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                   zip[s1].Extract("textfiles");
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
             <seealso cref="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.RemoveEntry(System.String)"/>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the caller attempts to assign a non-null value to the indexer.
             </exception>
            
             <param name="fileName">
             The name of the file, including any directory path, to retrieve from the zip. 
             The filename match is not case-sensitive by default; you can use the
             <see cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.CaseSensitiveRetrieval"/> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
             
             <returns>
             The ZipEntry within the Zip archive, given by the specified filename. If the named
             entry does not exist in the archive, this indexer returns null.
             </returns>
             
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.EntryFileNames">
             <summary>
             The list of filenames for the entries contained within the zip archive.  The 
             filenames use forward slashes in pathnames. 
             </summary>
            
             <seealso cref="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Item(System.String)"/>
            
             <example>
             This example shows one way to test if a filename is already contained within 
             a zip archive.
             <code>
             String ZipFileToRead= "PackedDocuments.zip";
             string Candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               if (zip.EntryFilenames.Contains(Candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   Candidate,
                                   ZipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   Candidate,
                                   ZipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim ZipFileToRead As String = "PackedDocuments.zip"
               Dim Candidate As String = "DatedMaterial.xps"
               Using zip As New ZipFile(ZipFileToRead)
                   If zip.EntryFilenames.Contains(Candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   Candidate, _
                                   ZipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   Candidate, _
                                   ZipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
             The list of strings for the filenames contained within the Zip archive.
             </returns>
             
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Entries">
            <summary>
            Returns the readonly collection of entries in the Zip archive.
            </summary>
            <remarks>
            If there are no entries in the current ZipFile, the value returned is a non-null zero-element collection.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zip.ZipFile.Count">
            <summary>
            Returns the number of entries in the Zip archive.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.RemoveEntry(Telerik.Sitefinity.Utilities.Zip.ZipEntry)">
             <summary>
             Removes the given ZipEntry from the zip archive.  
             </summary>
             
             <remarks>
             <para>
             After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to make the 
             changes permanent.  
             </para>
             </remarks>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the specified ZipEntry does not exist in the ZipFile.
             </exception>
            
             <example>
             In this example, all entries in the zip archive dating from before December 31st, 2007, are
             removed from the archive.
             <code>
             System.DateTime Threshold = new System.DateTime(2007,12,31);
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               var EntriesToRemove = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                 {
                   // We cannot remove the entry from the list, within the context of 
                   // an enumeration of said list.
                   // So we add the doomed entry to a list to be removed later.
                   EntriesToRemove.Add(e);
                 }
               }
               
               // actually remove the doomed entries. 
               foreach (ZipEntry zombie in EntriesToRemove)
                 zip.RemoveEntry(zombie);
               
               zip.Comment= String.Format("This zip archive was updated at {0}.", 
                                          System.DateTime.UtcNow.ToString("G"));
               zip.Save();
             }
             </code>
             
             <code lang="VB">
               Dim ZipFileToRead As String = "c:\foo.zip"
               Dim Threshold As New DateTime(2007, 12, 31)
               Using zip As ZipFile = New ZipFile(ZipFileToRead)
                   Dim EntriesToRemove As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           ' We cannot remove the entry from the list, within the context of 
                           ' an enumeration of said list.
                           ' So we add the doomed entry to a list to be removed later.
                           EntriesToRemove.Add(e)
                       End If
                   Next
               
                   ' actually remove the doomed entries. 
                   Dim zombie As ZipEntry
                   For Each zombie In EntriesToRemove
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = String.Format("This zip archive was updated at {0}.", DateTime.UtcNow.ToString("G"))
                   zip.Save
               End Using
             </code>
             </example>
             
             <param name="entry">
             The ZipEntry to remove from the zip. 
             </param>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.RemoveEntry(System.String)">
             <summary>
             Removes the ZipEntry with the given filename from the zip archive.  
             </summary>
             
             <remarks>
             <para>
             After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to make the changes permanent.  
             </para>
            
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown if the ZipFile is not updatable. 
             </exception>
            
             <exception cref="T:System.ArgumentException">
             Thrown if a ZipEntry with the specified filename does not exist in the ZipFile.
             </exception>
            
             <example>
             This example shows one way to remove an entry with a given filename from an 
             existing zip archive.
             <code>
             String ZipFileToRead= "PackedDocuments.zip";
             string Candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               if (zip.EntryFilenames.Contains(Candidate))
               {
                 zip.RemoveEntry(Candidate);
                 zip.Comment= String.Format("The file '{0}' has been removed from this archive.", 
                                            Candidate);
                 zip.Save();
               }
             }
             </code>
             <code lang="VB">
               Dim ZipFileToRead As String = "PackedDocuments.zip"
               Dim Candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile = New ZipFile(ZipFileToRead)
                   If zip.EntryFilenames.Contains(Candidate) Then
                       zip.RemoveEntry(Candidate)
                       zip.Comment = String.Format("The file '{0}' has been removed from this archive.", Candidate)
                       zip.Save
                   End If
               End Using
             </code>
             </example>
             
             <param name="fileName">
             The name of the file, including any directory path, to remove from the zip. 
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
             
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Finalize">
            <summary>
            This is the class Destructor, which gets called implicitly when the instance is destroyed.  
            Because the ZipFile type implements IDisposable, this method calls Dispose(false).  
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Dispose">
            <summary>
            Handles closing of the read and write streams associated
            to the ZipFile, if necessary.  The Dispose() method is generally 
            employed implicitly, via a using() {} statement. 
            </summary>
            <example>
            <code>
            using (ZipFile zip = ZipFile.Read(zipfile))
            {
              foreach (ZipEntry e in zip)
              {
                if (WantThisEntry(e.FileName)) 
                  zip.Extract(e.FileName, Console.OpenStandardOutput());
              }
            } // Dispose() is called implicitly here.
            </code>
            </example>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            The Dispose() method.  It disposes any managed resources, 
            if the flag is set, then marks the instance disposed.
            This method is typically not called from application code.
            </summary>
            <param name="disposeManagedResources">indicates whether the method should dispose streams or not.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zip.Zip64Option">
            <summary>
            Options for using ZIP64 extensions when saving zip archives. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Default">
            <summary>
            The default behavior, which is "Never".
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary. 
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole 
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zip.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.NONE">
            <summary>
            NONE means that the data will be simply stored, with no change at all.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL0_NONE">
            <summary>
            Same as NONE.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.BEST_SPEED">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL1_BEST_SPEED">
            <summary>
            A synonym for BEST_SPEED.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL5">
            <summary>
            A little slower, but better, than level 4.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.DEFAULT">
            <summary>
            The default compression level.  Do these levels even matter?  Do people even care?  
            I have never measured the speed difference.  
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL6_DEFAULT">
            <summary>
            A synonym for DEFAULT.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL8">
            <summary>
             Still better compression!
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.BEST_COMPRESSION">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream. 
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionLevel.LEVEL9_BEST_COMPRESSION">
            <summary>
            A synonym for BEST_COMPRESSION.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.CompressionStrategy">
            <summary>
            I honestly don't know what this means, but it is possible to set it in the SetDeflateParameters() call.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionStrategy.DEFAULT">
            <summary>
            It's probably safest to just leave this alone, or select the default. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionStrategy.FILTERED">
            <summary>
            I don't know what this does. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionStrategy.HUFFMAN_ONLY">
            <summary>
            I don't know what this setting does either.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library. 
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.SharedUtils.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.SharedUtils.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.SharedUtils.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.SharedUtils.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.Adler">
            <summary>
            Computes an Adler-32 checksum. 
            </summary>
            <remarks>
            The Adler checksum is similar to a CRC checksum, but faster to compute, though less reliable.  
            It is used in producing RFC1950 compressed streams.  The Adler checksum is a required part of the "ZLIB" standard.
            Applications will almost never need to use this class directly. 
            </remarks>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec">
            <summary>
            Encoder and Decoder for ZLIB (IETF RFC1950 and RFC1951).
            </summary>
            <remarks>
            This class compresses and decompresses data according to the Deflate algorithm documented in RFC1950 and RFC1951. 
            </remarks>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.#ctor(Telerik.Sitefinity.Utilities.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
            <summary>
            Initialize the inflation state with an explicit flag to govern the handling of RFC1950 header bytes. 
            </summary>
            <remarks>
            By default, the RFC1950 header is expected.  If you want to read a zlib stream 
            you should specify true for expectRfc1950Header.  If you have a deflate stream, you will
            want to specify false. It is only necessary to invoke this initializer explicitly if you want 
            to specify false.
            </remarks>
            <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading the stream of data to be inflated.</param>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
            <summary>
            Initialize the inflation state with an explicit flag to govern the handling of RFC1950 header bytes. 
            </summary>
            <remarks>
            If you want to read a zlib stream 
            you should specify true for expectRfc1950Header.  If you have a deflate stream, you will
            want to specify false. 
            </remarks>
            <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
            the stream of data to be inflated.</param>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.Inflate(System.Int32)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(ZlibConstants.Z_NO_FLUSH);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(ZlibConstants.Z_FINISH);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="f">I think you want to set this to Z_NO_FLUSH.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.DEFAULT);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(ZlibConstants.Z_NO_FLUSH);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(ZlibConstants.Z_FINISH);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeDeflate(Telerik.Sitefinity.Utilities.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeDeflate(Telerik.Sitefinity.Utilities.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeDeflate(Telerik.Sitefinity.Utilities.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.InitializeDeflate(Telerik.Sitefinity.Utilities.Zlib.CompressionLevel,System.Int32,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            the specified number of window bits, and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.Deflate(System.Int32)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(ZlibConstants.Z_NO_FLUSH);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(ZlibConstants.Z_FINISH);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.SetDeflateParams(Telerik.Sitefinity.Utilities.Zlib.CompressionLevel,Telerik.Sitefinity.Utilities.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_NO_FLUSH">
            <summary>
            No flush at all.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_PARTIAL_FLUSH">
            <summary>
            A little bit of flush?
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_SYNC_FLUSH">
            <summary>
            Sync flush?
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_FULL_FLUSH">
            <summary>
            Full flush?
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_FINISH">
            <summary>
            Finish?
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.WINDOW_BITS_MAX">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.WINDOW_BITS_DEFAULT">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Telerik.Sitefinity.Utilities.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.DeflateStream">
            <summary>
            A class for compressing and decompressing streams using the Deflate algorithm.
            </summary>
            <remarks>
            <para>
            Data can be compressed or decompressed, and either of those can be through reading or writing. 
            For more information on the Deflate algorithm, see IETF RFC 1951, "DEFLATE Compressed Data 
            Format Specification version 1.3." 
            </para>
            <para>
            This class is similar to <see cref="T:Telerik.Sitefinity.Utilities.Zlib.ZlibStream"/>, except that <c>ZlibStream</c> adds the RFC1950 
            header bytes to a compressed stream when compressing, or expects the RFC1950 header bytes when 
            decompressing. The <c>DeflateStream</c> does not.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode)">
            <summary>
            Create a DeflateStream using the specified CompressionMode.
            </summary>
            <remarks>
            The DeflateStream will use the default compression level.
            </remarks>
            <example>
            This example shows how to use a DeflateStream to compress data.
            <code>
            using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
            {
                using (var raw = System.IO.File.Create(outputFile))
                {
                    using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                    {
                        byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                        int n= -1;
                        while (n != 0)
                        {
                            if (n &gt; 0) 
                                compressor.Write(buffer, 0, n);
                            n= input.Read(buffer, 0, buffer.Length);
                        }
                    }
                }
            }
            </code>
            <code lang="VB">
            Dim outputFile As String = (fileToCompress &amp; ".compressed")
            Using input As Stream = File.OpenRead(fileToCompress)
                Using raw As FileStream = File.Create(outputFile)
            	Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
            	    Dim buffer As Byte() = New Byte(4096) {}
            	    Dim n As Integer = -1
            	    Do While (n &lt;&gt; 0)
            		If (n &gt; 0) Then
            		    compressor.Write(buffer, 0, n)
            		End If
            		n = input.Read(buffer, 0, buffer.Length)
            	    Loop
            	End Using
                End Using
            End Using
            </code>
            </example>
            <param name="stream">The stream which will be read or written.</param>
            <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode,Telerik.Sitefinity.Utilities.Zlib.CompressionLevel)">
            <summary>
            Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
            </summary>
            <example>
            This example shows how to use a DeflateStream to compress data.
            <code>
            using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
            {
                using (var raw = System.IO.File.Create(outputFile))
                {
                    using (Stream compressor = new DeflateStream(raw,
                                                                 CompressionMode.Compress, 
                                                                 CompressionLevel.BEST_COMPRESSION))
                    {
                        byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                        int n= -1;
                        while (n != 0)
                        {
                            if (n &gt; 0) 
                                compressor.Write(buffer, 0, n);
                            n= input.Read(buffer, 0, buffer.Length);
                        }
                    }
                }
            }
            </code>
            <code lang="VB">
            Dim outputFile As String = (fileToCompress &amp; ".compressed")
            Using input As Stream = File.OpenRead(fileToCompress)
                Using raw As FileStream = File.Create(outputFile)
            	Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BEST_COMPRESSION)
            	    Dim buffer As Byte() = New Byte(4096) {}
            	    Dim n As Integer = -1
            	    Do While (n &lt;&gt; 0)
            		If (n &gt; 0) Then
            		    compressor.Write(buffer, 0, n)
            		End If
            		n = input.Read(buffer, 0, buffer.Length)
            	    Loop
            	End Using
                End Using
            End Using
            </code>
            </example>
            <param name="stream">The stream to be read or written while deflating or inflating.</param>
            <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode,System.Boolean)">
            <summary>
            Create a DeflateStream using the specified CompressionMode, and explicitly specify whether
            the stream should be left open after Deflation or Inflation.
            </summary>
            <remarks>
            <para>
            This constructor allows the application to request that the captive stream remain open after
            the deflation or inflation occurs.  By default, after Close() is called on the stream, the 
            captive stream is also closed. In some cases this is not desired, for example if the stream 
            is a memory stream that will be re-read after compression.  Specify true for the 
            leaveOpen parameter to leave the stream open. 
            </para>
            <para>
            The DeflateStream will use the default compression level.
            </para>
            <para>
            See the other overloads of this constructor for example code.
            </para>
            </remarks>
            <param name="stream">The stream which will be read or written. This is called the 
            "captive" stream in other places in this documentation.</param>
            <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
            <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode,Telerik.Sitefinity.Utilities.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel, 
            and explicitly specify whether
            the stream should be left open after Deflation or Inflation.
            </summary>
            <remarks>
            <para>
            This constructor allows the application to request that the captive stream remain open after
            the deflation or inflation occurs.  By default, after Close() is called on the stream, the 
            captive stream is also closed. In some cases this is not desired, for example if the stream 
            is a memory stream that will be re-read after compression.  Specify true for the 
            leaveOpen parameter to leave the stream open. 
            </para>
            </remarks>
            <example>
            This example shows how to use a DeflateStream to compress data.
            <code>
            using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
            {
                using (var raw = System.IO.File.Create(outputFile))
                {
                    using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress, true))
                    {
                        byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                        int n= -1;
                        while (n != 0)
                        {
                            if (n &gt; 0) 
                                compressor.Write(buffer, 0, n);
                            n= input.Read(buffer, 0, buffer.Length);
                        }
                    }
                }
            }
            </code>
            <code lang="VB">
            Dim outputFile As String = (fileToCompress &amp; ".compressed")
            Using input As Stream = File.OpenRead(fileToCompress)
                Using raw As FileStream = File.Create(outputFile)
            	Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, True)
            	    Dim buffer As Byte() = New Byte(4096) {}
            	    Dim n As Integer = -1
            	    Do While (n &lt;&gt; 0)
            		If (n &gt; 0) Then
            		    compressor.Write(buffer, 0, n)
            		End If
            		n = input.Read(buffer, 0, buffer.Length)
            	    Loop
            	End Using
                End Using
            End Using
            </code>
            </example>
            <param name="stream">The stream which will be read or written.</param>
            <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
            <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.  
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.BufferSize">
            <summary>
            Callers can set the buffer size of the working buffer with this property.  
            </summary>
            <remarks>
            The working buffer is used for all stream operations.
            The default size is 1024 bytes.  The minimum size is 128 bytes. You may get better 
            performance with a larger buffer.  Then again, you might not.  I don't know, I haven't tested it.  
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.Close">
            <summary>
            Close the stream.  
            </summary>
            <remarks>
            This may or may not close the captive stream. 
            See the ctor's with leaveOpen parameters for more information.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.Position">
            <summary>
            Reading or Writing this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the DeflateStream to compress data while reading, you can create a DeflateStream with 
            CompressionMode.Compress, providing an uncompressed data stream.  Then call Read() on that DeflateStream, 
            and the data read will be compressed. 
            If you wish to use the DeflateStream to decompress data while reading, you can create a DeflateStream with 
            CompressionMode.Decompress, providing a readable compressed data stream.  Then call Read() on that DeflateStream, 
            and the data read will be decompressed. 
            </para>
            <para>
            A DeflateStream can be used for Read() or Write(), but not both. 
            </para>
            </remarks>
            <param name="buffer">The buffer into which the read data should be placed.</param>
            <param name="offset">the offset within that data array to put the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the DeflateStream to compress data while writing, you can create a DeflateStream with 
            CompressionMode.Compress, and a writable output stream.  Then call Write() on that DeflateStream, 
            providing uncompressed data as input.  The data sent to the output stream will be the compressed form of the data written.
            If you wish to use the DeflateStream to decompress data while writing, you can create a DeflateStream with 
            CompressionMode.Decompress, and a writable output stream.  Then call Write() on that stream, providing previously 
            compressed data. The data sent to the output stream will be the decompressed form of the data written.   
            </para>
            <para>
            A DeflateStream can be used for Read() or Write(), but not both. 
            </para>
            </remarks>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="T:Telerik.Sitefinity.Utilities.Zlib.ZlibStream">
            <summary>
            Represents a Zlib stream for compression or decompression.
            </summary>
            <remarks>
            <para>
            Data can be compressed or decompressed, and either of those can be through reading or writing. 
            For more information on the Deflate algorithm, see IETF RFC 1951, "DEFLATE Compressed Data 
            Format Specification version 1.3." 
            </para>
            <para>
            This class is similar to <see cref="T:Telerik.Sitefinity.Utilities.Zlib.DeflateStream"/>, except that it adds the RFC1950 header 
            bytes to a compressed stream when compressing, or expects the RFC1950 header bytes when 
            decompressing.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode)">
            <summary>
            Create a ZlibStream using the specified CompressionMode.
            </summary>
            <remarks>
            <para>
            The ZlibStream will use the default compression level.
            </para>
            <para>
            See the documentation for the <see cref="T:Telerik.Sitefinity.Utilities.Zlib.DeflateStream"/> constructors for example code.
            </para>
            </remarks>
            <param name="stream">The stream which will be read or written.</param>
            <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode,Telerik.Sitefinity.Utilities.Zlib.CompressionLevel)">
            <summary>
            Create a ZlibStream using the specified CompressionMode and the specified CompressionLevel.
            </summary>
            <remarks>
            See the documentation for the <see cref="T:Telerik.Sitefinity.Utilities.Zlib.DeflateStream"/> constructors for example code.
            </remarks>
            <param name="stream">The stream to be read or written while deflating or inflating.</param>
            <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode,System.Boolean)">
            <summary>
            Create a ZlibStream using the specified CompressionMode, and explicitly specify whether
            the stream should be left open after Deflation or Inflation.
            </summary>
            <remarks>
            <para>
            This constructor allows the application to request that the captive stream remain open after
            the deflation or inflation occurs.  By default, after Close() is called on the stream, the 
            captive stream is also closed. In some cases this is not desired, for example if the stream 
            is a memory stream that will be re-read after compression.  Specify true for the 
            leaveOpen parameter to leave the stream open. 
            </para>
            <para>
            The ZlibStream will use the default compression level.
            </para>
            <para>
            See the documentation for the <see cref="T:Telerik.Sitefinity.Utilities.Zlib.DeflateStream"/> constructors for example code.
            </para>
            </remarks>
            <param name="stream">The stream which will be read or written. This is called the 
            "captive" stream in other places in this documentation.</param>
            <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.#ctor(System.IO.Stream,Telerik.Sitefinity.Utilities.Zlib.CompressionMode,Telerik.Sitefinity.Utilities.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ZlibStream using the specified CompressionMode and the specified CompressionLevel, 
            and explicitly specify whether
            the stream should be left open after Deflation or Inflation.
            </summary>
            <remarks>
            <para>
            This constructor allows the application to request that the captive stream remain open after
            the deflation or inflation occurs.  By default, after Close() is called on the stream, the 
            captive stream is also closed. In some cases this is not desired, for example if the stream 
            is a memory stream that will be re-read after compression.  Specify true for the 
            leaveOpen parameter to leave the stream open. 
            </para>
            </remarks>
            
            <example>
            <code>
            public void TestStreamCompression()
            {
                System.IO.MemoryStream msSinkCompressed;
                System.IO.MemoryStream msSinkDecompressed;
                ZlibStream zOut;
                String helloOriginal = "Hello, World!  This String will be compressed...";
            
                // first, compress:
                msSinkCompressed = new System.IO.MemoryStream();
                zOut = new ZlibStream(msSinkCompressed, CompressionMode.Compress, CompressionLevel.LEVEL9_BEST_COMPRESSION, true);
                CopyStream(StringToMemoryStream(helloOriginal), zOut);
                zOut.Close();
            
                // at this point, msSinkCompressed contains the compressed bytes
            
                // now, decompress:
                msSinkDecompressed = new System.IO.MemoryStream();
                zOut = new ZlibStream(msSinkDecompressed, CompressionMode.Decompress);
                msSinkCompressed.Position = 0;
                CopyStream(msSinkCompressed, zOut);
            
                string result = MemoryStreamToString(msSinkDecompressed);
                Console.WriteLine("decompressed: {0}", result);
            }
            
            private static void CopyStream(System.IO.Stream src, System.IO.Stream dest)
            {
                byte[] buffer = new byte[1024];
                int len = src.Read(buffer, 0, buffer.Length);
                while (len &gt; 0)
                {
                    dest.Write(buffer, 0, len);
                    len = src.Read(buffer, 0, buffer.Length);
                }
                dest.Flush();
            }
            
            static System.IO.MemoryStream StringToMemoryStream(string s)
            {
                System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();
                int byteCount = enc.GetByteCount(s.ToCharArray(), 0, s.Length);
                byte[] ByteArray = new byte[byteCount];
                int bytesEncodedCount = enc.GetBytes(s, 0, s.Length, ByteArray, 0);
                System.IO.MemoryStream ms = new System.IO.MemoryStream(ByteArray);
                return ms;
            }
            
            static String MemoryStreamToString(System.IO.MemoryStream ms)
            {
                byte[] ByteArray = ms.ToArray();
                System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();
                var s = enc.GetString(ByteArray);
                return s;
            }
            </code>
            </example>
            <param name="stream">The stream which will be read or written.</param>
            <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.  
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.BufferSize">
            <summary>
            Callers can set the buffer size of the working buffer with this property.  
            </summary>
            <remarks>
            The working buffer is used for all stream operations.
            The default size is 1024 bytes.  The minimum size is 128 bytes. You may get better 
            performance with a larger buffer.  Then again, you might not.  I don't know, I haven't tested it.  
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.Close">
            <summary>
            Close the stream.  
            </summary>
            <remarks>
            This may or may not close the captive stream. 
            See the ctor's with leaveOpen parameters for more information.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.Position">
            <summary>
            Reading or Writing this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the ZlibStream to compress data while reading, you can create a ZlibStream with 
            CompressionMode.Compress, providing an uncompressed data stream.  Then call Read() on that ZlibStream, 
            and the data read will be compressed. 
            If you wish to use the ZlibStream to decompress data while reading, you can create a ZlibStream with 
            CompressionMode.Decompress, providing a readable compressed data stream.  Then call Read() on that ZlibStream, 
            and the data read will be decompressed. 
            </para>
            <para>
            A ZlibStream can be used for Read() or Write(), but not both. 
            </para>
            </remarks>
            <param name="buffer">The buffer into which the read data should be placed.</param>
            <param name="offset">the offset within that data array to put the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Telerik.Sitefinity.Utilities.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the ZlibStream to compress data while writing, you can create a ZlibStream with 
            CompressionMode.Compress, and a writable output stream.  Then call Write() on that ZlibStream, 
            providing uncompressed data as input.  The data sent to the output stream will be the compressed form of the data written.
            If you wish to use the ZlibStream to decompress data while writing, you can create a ZlibStream with 
            CompressionMode.Decompress, and a writable output stream.  Then call Write() on that stream, providing previously 
            compressed data. The data sent to the output stream will be the decompressed form of the data written.   
            </para>
            <para>
            A ZlibStream can be used for Read() or Write(), but not both. 
            </para>
            </remarks>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler">
            <summary>
            Represents a cache scavenger that runs on a background thread.
            </summary>
            <remarks>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler"/> will make its best effort to avoid scheduling a new scavenge request 
            when it is safe to assume that it's not necessary. Since <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.NumberOfItemsToBeScavenged"/> 
            elements are scavenged each time, there should be at least one scavenge request every 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.NumberOfItemsToBeScavenged"/> elements the cache over the 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.MaximumItemsAllowedBeforeScavenging"/> threshold.
            <para/>
            Each time a scheduled scavenge task is processed the counter used to avoid superfluous scavenges is reset to 
            zero, so the next scavenge request will result in a new scheduled scavenge task.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler"/> with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask"/> and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask"/>.
            </summary>
            <param name="expirationTask">The expiration task to use.</param>
            <param name="scavengerTask">The scavenger task to use.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler.ExpirationTimeoutExpired(System.Object)">
            <summary>
            Queues a message that the expiration timeout has expired.
            </summary>
            <param name="notUsed">Ignored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler.StartScavenging">
            <summary>
            Starts the scavenging process.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore">
            <summary>
            Base class for backing stores. Contains implementations of common policies
            and utilities usable by all backing stores.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.#ctor">
            <summary>
            Inherited constructor
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Finalize">
            <summary>
            Finalizer for BaseBackingStore
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Dispose">
            <summary>
            Dispose method for all backing stores. This implementation is sufficient for any class that does not need any finalizer behavior
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Dispose(System.Boolean)">
            <summary>
            Disposing method as used in the Dispose pattern
            </summary>
            <param name="disposing">True if called during Dispose. False if called from finalizer</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Count">
            <summary>
            Number of objects stored in the backing store
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Remove(System.String)">
            <summary>
            Removes an item with the given key from the backing store
            </summary>
            <param name="key">Key to remove. Must not be null.</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Remove(System.Int32)">
            <summary>
            Removes an item with the given storage key from the backing store.
            </summary>
            <param name="storageKey">Unique storage key for the cache item to be removed</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item.
            </summary>
            <param name="key">Key to update</param>
            <param name="timestamp">Time at which item updated</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during UpdateLastAccessedTime
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.UpdateLastAccessedTime(System.Int32,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item referenced by this unique storage key
            </summary>
            <param name="storageKey">Unique storage key for cache item</param>
            <param name="timestamp">Time at which item updated</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Flush">
            <summary>
            Flushes all CacheItems from backing store. This method must meet the Strong Exception Safety guarantee.
            </summary>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Flush
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Add(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            <p>
            This method is responsible for adding a CacheItem to the BackingStore. This operation must be successful 
            even if an item with the same key already exists. This method must also meet the exception safety guarantee
            and make sure that all traces of the new or old item are gone if the add fails in any way.
            </p> 
            </summary>
            <param name="newCacheItem">CacheItem to be added</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Add
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Load">
            <summary>
            Loads all CacheItems from underlying persistence mechanism.
            </summary>
            <returns>Hashtable containing all existing CacheItems.</returns>
            <remarks>Exceptions thrown depend on the implementation of the underlying database.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.RemoveOldItem(System.Int32)">
            <summary>
            Removed existing item stored in persistence store with same key as new item
            </summary>
            <param name="storageKey">Unique key for cache item</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.AddNewItem(System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Adds new item to persistence store
            </summary>
            <param name="storageKey">Unique key for cache item</param>
            <param name="newItem">Item to be added to cache. May not be null.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.LoadDataFromStore">
            <summary>
            Responsible for loading items from underlying persistence store. This method should do
            no filtering to remove expired items.
            </summary>
            <returns>Hash table of all items loaded from persistence store</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore">
            <summary>
            Implementation of IBackingStore that stores its CacheItems into IsolatedStorage.
            </summary>
            <remarks>
            This class assumes a tree-structured storage schema. Each named instance of an Isolated Storage area creates a 
            separate, top-level directory in Isolated Storage. This is to allow a user to segregate different areas in Isolated Storage
            to allow multiple applications to use their own logically separate areas. Inside each of these areas, each CacheItem is stored
            in its own subdirectory, with separate files in those subdirectories representing the different pieces of a CacheItem. 
            The item was split like this to allow for several optimizations. The first optimization is that now, the essence of a CacheItem
            can be restored independently of the underlying value. It is the deserialization of the value object that could conceivably 
            be very time consuming, so by splitting it off into its own file, that deserialization process could be delayed until the value is 
            actually needed. The second optimization is that we are now able to update the last accessed time for a CacheItem without 
            bringing the entire CacheItem into memory, make the update, and then reserialize it.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.#ctor(System.String)">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that stores objects in Isolated Storage, identified by <paramref name="storageAreaName"/>.
            </summary>
            <param name="storageAreaName">Identifier for this Isolated Storage area. May not be null.</param>
            <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">Demanded to ensure caller has permission to access Isolated Storage.</permission>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider)">
            <summary>
            Initialize Isolated Storage for this CacheItem by creating the directory where it will be stored. This 
            constructor should only be used for testing, and never called from production code.
            </summary>
            <param name="storageAreaName">Identifier for this Isolated Storage area. May not be null.</param>
            <param name="encryptionProvider">
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> to use to encrypt data in storage. This value can be <see langword="null"/>.
            </param>
            <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">Demanded to ensure caller has permission to access Isolated Storage.</permission>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Count">
            <summary>
            Returns the number of CacheItems in the Isolated Storage segment identified by the name passed in at construction
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Flush">
            <summary>
            Removes all items from this Isolated Storage area.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Remove(System.Int32)">
            <summary>
            Removes the named item from Isolated Storage.
            </summary>
            <param name="storageKey">Identifier for CacheItem to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.UpdateLastAccessedTime(System.Int32,System.DateTime)">
            <summary>
            Updates the last accessed time for the specified CacheItem stored in Isolated Storage
            </summary>
            <param name="storageKey">Identifer for CacheItem to remove.</param>
            <param name="timestamp">New timestamp for CacheItem.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.LoadDataFromStore">
            <summary>
            Loads data from persistence store
            </summary>
            <returns>A Hashtable containing the cache items.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.RemoveOldItem(System.Int32)">
            <summary>
            Remove existing item stored in persistence store with same key as new item
            </summary>
            <param name="storageKey">Item being removed from cache.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.AddNewItem(System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Adds new item to persistence store
            </summary>
            <param name="storageKey">Unique key for storage item</param>
            <param name="newItem">Item to be added to cache. May not be null.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem">
            <summary>
            Represents a CacheItem as stored in Isolated Storage. This class is responsible for storing and
            restoring the item from the underlying file system store.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider)">
            <summary>
            Instance constructor. Ensures that the storage location in Isolated Storage is prepared
            for reading and writing. This class stores each individual field of the CacheItem into its own
            file inside the directory specified by itemDirectoryRoot.
            </summary>
            <param name="storage">Isolated Storage area to use. May not be null.</param>
            <param name="itemDirectoryRoot">Complete path in Isolated Storage where the cache item should be stored. May not be null.</param>
            <param name="encryptionProvider">Encryption provider</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.Store(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Stores specified CacheItem into IsolatedStorage at location specified in constructor
            </summary>
            <param name="itemToStore">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> to store.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.Load">
            <summary>
            Loads a CacheItem from IsolatedStorage from the location specified in the constructor
            </summary>
            <returns>CacheItem loaded from IsolatedStorage</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.UpdateLastAccessedTime(System.DateTime)">
            <summary>
            Updates the last accessed time for the CacheItem stored at this location in Isolated Storage
            </summary>
            <param name="newTimestamp">New timestamp</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField">
            <summary>
            Defines the mechanism to store and read individual fields from IsolatedStorage. This class maintains no
            state with respect to the data read from IsolatedStorage, so it may be reused to reread or rewrite the same field
            repeatedly.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider)">
            <summary>
            Instance constructor
            </summary>
            <param name="storage">IsolatedStorage area to use. May not be null.</param>
            <param name="fieldName">Name of the file in which the field value is stored. May not be null.</param>
            <param name="fileSystemLocation">Complete path to directory where file specified in fieldName is to be found. May not be null.</param>
            <param name="encryptionProvider">Encryption provider</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.Write(System.Object,System.Boolean)">
            <summary>
            Writes value to specified location in IsolatedStorage
            </summary>
            <param name="itemToWrite">Object to write into Isolated Storage</param>
            <param name="encrypted">True if item written is to be encrypted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.Overwrite(System.Object)">
            <summary>
            Overwrites given field in Isolated Storage. Item will not be encrypted
            </summary>
            <param name="itemToWrite">Object to write into Isolated Storage</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.Read(System.Boolean)">
            <summary>
            Reads value from specified location in IsolatedStorage
            </summary>
            <param name="encrypted">True if field is stored as encrypted</param>
            <returns>Value read from IsolatedStorage. This value may be null if the value stored is null.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.WriteField(System.Object,System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Boolean)">
            <summary>
            Responsible for writing value to IsolatedStorage using given IsolatedStorageFileStream reference. Subclasses
            may override this method to provide different implementations of writing to Isolated Storage.
            </summary>
            <param name="itemToWrite">Value to write. May be null.</param>
            <param name="fileStream">Stream to which value should be written. May not be null.</param>
            <param name="encrypted">True if item is to be encrypted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.ReadField(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Boolean)">
            <summary>
            Responsible for reading value from IsolatedStorage using given IsolatedStorageFileStream reference. Subclasses
            may override this method to provide different implementations of reading from IsolatedStorage.
            </summary>
            <param name="fileStream">Stream from which value should be written. May not be null.</param>
            <param name="encrypted">True if item is stored encrypted</param>
            <returns>Value read from Isolated Storage. May be null if value stored is null</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider">
            <summary>
            Not intended for direct use.  Provides symmetric encryption and decryption services 
            to Isolated and Database backing stores.  Allows this block to use 
            Security.Cryptography without having a direct reference to that assembly.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider.Encrypt(System.Byte[])">
            <summary>
            Encrypt backing store data.
            </summary>
            <param name="plaintext">Clear bytes.</param>
            <returns>Encrypted bytes.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider.Decrypt(System.Byte[])">
            <summary>
            Decrypt backing store data.
            </summary>
            <param name="ciphertext">Encrypted bytes.</param>
            <returns>Decrypted bytes.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore">
            <summary>
            This class is used when no backing store is needed to support the caching storage policy.
            Its job is to provide an implementation of a backing store that does nothing, merely enabling
            the cache to provide a strictly in-memory cache.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Count">
            <summary>
            Always returns 0
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Add(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="newCacheItem">Not used</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Remove(System.String)">
            <summary>
            Not used
            </summary>
            <param name="key">Not used</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Not used
            </summary>
            <param name="key">Not used</param>
            <param name="timestamp">Not used</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Flush">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Load">
            <summary>
            Always returns an empty hash table.
            </summary>
            <returns>Empty hash table</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Dispose">
            <summary>
            Empty dispose implementation
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache">
            <summary>
            The real worker of the block. The Cache class is the traffic cop that prevents 
            resource contention among the different threads in the system. It also will act
            as the remoting gateway when that feature is added to the cache.
            </summary>	
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialzie a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache"/> class with a backing store, and scavenging policy.
            </summary>
            <param name="backingStore">The cache backing store.</param>
            <param name="instrumentationProvider">The instrumentation provider.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Count">
            <summary>
            Gets the count of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects.
            </summary>
            <value>
            The count of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.CurrentCacheState">
            <summary>
            Gets the current cache.
            </summary>
            <returns>
            The current cache.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Contains(System.String)">
            <summary>
            Determines if a particular key is contained in the cache.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
            <see langword="true"/> if the key is contained in the cache; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Add(System.String,System.Object)">
            <summary>
            Add a new keyed object to the cache.
            </summary>
            <param name="key">The key of the object.</param>
            <param name="value">The object to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Add(System.String,System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Add a new keyed object to the cache.
            </summary>
            <param name="key">The key of the object.</param>
            <param name="value">The object to add.</param>
            <param name="scavengingPriority">One of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> values.</param>
            <param name="refreshAction">An <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction"/> object.</param>
            <param name="expirations">An array of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration"/> objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Remove(System.String)">
            <summary>
            Remove an item from the cache by key.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Remove(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Remove an item from the cache by key.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <param name="removalReason">One of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.RemoveItemFromCache(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="removalReason">One of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/> values.</param>
            <remarks>
            This seemingly redundant method is here to be called through the ICacheOperations 
            interface. I put this in place to break any dependency from any other class onto 
            the Cache class
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.GetData(System.String)">
            <summary>
            Get the object from the cache for the key.
            </summary>
            <param name="key">
            The key whose value to get.
            </param>
            <returns>
            The value associated with the specified key. 
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Flush">
            <summary>
            Flush the cache.
            </summary>
            <remarks>
            There may still be thread safety issues in this class with respect to cacheItemExpirations
            and scavenging, but I really doubt that either of those will be happening while
            a Flush is in progress. It seems that the most likely scenario for a flush
            to be called is at the very start of a program, or when absolutely nothing else
            is going on. Calling flush in the middle of an application would seem to be
            an "interesting" thing to do in normal circumstances.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Finalize">
            <summary>
            Dispose of the backing store before garbage collection.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Dispose">
            <summary>
            Dispose of the backing store before garbage collection.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Dispose(System.Boolean)">
            <summary>
            Dispose of the backing store before garbage collection.
            </summary>
            <param name="disposing">
            <see langword="true"/> if disposing; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy">
            <summary>
            Cache scavenging policy based on capacity.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy"/> class with the name of the cache manager and the proxy to the configuration data.
            </summary>
            <param name="maximumElementsInCacheBeforeScavenging">The proxy to the latest configuration data.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.MaximumItemsAllowedBeforeScavenging">
            <summary>
            Gets the maximum items to allow before scavenging.
            </summary>
            <value>
            The maximum items to allow before scavenging.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.IsScavengingNeeded(System.Int32)">
            <summary>
            Determines if scavenging is needed.
            </summary>
            <param name="currentCacheItemCount">The current number of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects in the cache.</param>
            <returns>
            <see langword="true"/> if scavenging is needed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheFactory">
            <summary>
            Static factory class used to get instances of a specified CacheManager
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheFactory.GetCacheManager">
            <summary>
            Returns the default CacheManager instance. The same instance should be returned each time this method
            is called. The name of the instance to treat as the default CacheManager is defined in the configuration file.
            Guaranteed to return an initialized CacheManager if no exception thrown
            </summary>
            <returns>Default cache manager instance.</returns>
            <exception cref="!:ConfigurationException">Unable to create default CacheManager</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheFactory.GetCacheManager(System.String)">
            <summary>
            Returns the named ICacheManager instance. Guaranteed to return an initialized ICacheManager if no exception thrown.
            </summary>
            <param name="cacheManagerName">Name defined in configuration for the cache manager to instantiate</param>
            <returns>The requested CacheManager instance.</returns>
            <exception cref="T:System.ArgumentNullException">cacheManagerName is null</exception>
            <exception cref="T:System.ArgumentException">cacheManagerName is empty</exception>
            <exception cref="!:ConfigurationException">Could not find instance specified in cacheManagerName</exception>
            <exception cref="T:System.InvalidOperationException">Error processing configuration information defined in application configuration file.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem">
            <summary>
            This class contains all data important to define an item stored in the cache. It holds both the key and 
            value specified by the user, as well as housekeeping information used internally by this block. It is public, 
            rather than internal, to allow block extenders access to it inside their own implementations of IBackingStore.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.#ctor(System.String,System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Constructs a fully formed CacheItem. 
            </summary>
            <param name="key">Key identifying this CacheItem</param>
            <param name="value">Value to be stored. May be null.</param>
            <param name="scavengingPriority">Scavenging priority of CacheItem. See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> for values.</param>
            <param name="refreshAction">Object supplied by caller that will be invoked upon expiration of the CacheItem. May be null.</param>
            <param name="expirations">Param array of ICacheItemExpiration objects. May provide 0 or more of these.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.#ctor(System.DateTime,System.String,System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Constructs a fully formed CacheItem. This constructor is to be used when restoring an existing
            CacheItem from the backing store. As such, it does not generate its own Guid for this instance,
            but allows the GUID to be passed in, as read from the backing store.
            </summary>
            <param name="lastAccessedTime">Time this CacheItem last accessed by user.</param>
            <param name="key">Key provided  by the user for this cache item. May not be null.</param>
            <param name="value">Value to be stored. May be null.</param>
            <param name="scavengingPriority">Scavenging priority of CacheItem. See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> for values.</param>
            <param name="refreshAction">Object supplied by caller that will be invoked upon expiration of the CacheItem. May be null.</param>
            <param name="expirations">Param array of ICacheItemExpiration objects. May provide 0 or more of these.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.Replace(System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Replaces the internals of the current cache item with the given new values. This is strictly used in the Cache
            class when adding a new item into the cache. By replacing the item's contents, rather than replacing the item
            itself, it allows us to keep a single reference in the cache, simplifying locking.
            </summary>
            <param name="cacheItemData">Value to be stored. May be null.</param>
            <param name="cacheItemPriority">Scavenging priority of CacheItem. See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> for values.</param>
            <param name="cacheItemRefreshAction">Object supplied by caller that will be invoked upon expiration of the CacheItem. May be null.</param>
            <param name="cacheItemExpirations">Param array of ICacheItemExpiration objects. May provide 0 or more of these.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.ScavengingPriority">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> assigned to this CacheItem
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.LastAccessedTime">
            <summary>
            Returns the last accessed time.
            </summary>
            <value>
            Gets the last accessed time.
            </value>
            <remarks>
            The set is present for testing purposes only. Should not be called by application code 
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.WillBeExpired">
            <summary>
            Intended to be used internally only. The value should be true when an item is eligible to be expired.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.EligibleForScavenging">
            <summary>
            Intended to be used internally only. The value should be true when an item is eligible for scavenging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.Value">
            <summary>
            Returns the cached value of this CacheItem
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.Key">
            <summary>
            Returns the key associated with this CacheItem
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.RefreshAction">
            <summary>
            Intended to be used internally only. Returns object used to refresh expired CacheItems.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.GetExpirations">
            <summary>
            Returns array of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration"/> objects for this instance.
            </summary>
            <returns>
            An array of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration"/> objects.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.HasExpired">
            <summary>
            Evaluates all cacheItemExpirations associated with this cache item to determine if it 
            should be considered expired. Evaluation stops as soon as any expiration returns true. 
            </summary>
            <returns>True if item should be considered expired, according to policies
            defined in this item's cacheItemExpirations.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.TouchedByUserAction(System.Boolean)">
            <summary>
            Intended to be used internally only. This method is called whenever a CacheItem is touched through the action of a user. It
            prevents this CacheItem from being expired or scavenged during an in-progress expiration or scavenging process. It has no effect
            on subsequent expiration or scavenging processes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.TouchedByUserAction(System.Boolean,System.DateTime)">
            <summary>
            Intended to be used internally only. This method is called whenever a CacheItem is touched through the action of a user. It
            prevents this CacheItem from being expired or scavenged during an in-progress expiration or scavenging process. It has no effect
            on subsequent expiration or scavenging processes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.MakeEligibleForScavenging">
            <summary>
            Makes the cache item eligible for scavenging.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.MakeNotEligibleForScavenging">
            <summary>
            Makes the cache item not eligible for scavenging.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.SetLastAccessedTime(System.DateTime)">
            <summary>
            Sets the last accessed time for the cache item.
            </summary>
            <param name="specificAccessedTime">The last accessed time.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority">
            <summary>
            Specifies the item priority levels.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.None">
            <summary>
            Should never be seen in nature.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.Low">
            <summary>
            Low priority for scavenging.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.Normal">
            <summary>
            Normal priority for scavenging.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.High">
            <summary>
            High priority for scavenging.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.NotRemovable">
            <summary>
            Non-removable priority for scavenging.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason">
            <summary>
            The reason that the cache item was removed.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Expired">
            <summary>
            The item has expired.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Removed">
            <summary>
            The item was manually removed from the cache.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Scavenged">
            <summary>
            The item was removed by the scavenger because it had a lower priority that any other item in the cache.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Unknown">
            <summary>
            Reserved. Do not use.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager">
            <summary>
            This class represents the interface to caching as shown to the user. All caching operations are performed through this class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Cache,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer)">
            <summary>
            
            </summary>
            <param name="realCache"></param>
            <param name="backgroundScheduler"></param>
            <param name="pollTimer"></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Count">
            <summary>
            Returns the number of items currently in the cache.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Contains(System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="key">Key of item to check for</param>
            <returns>True if item referenced by key is in the cache</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Item(System.String)">
            <summary>
            Returns the item identified by the provided key
            </summary>
            <param name="key">Key to retrieve from cache</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the cache items.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Add(System.String,System.Object)">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added. 
            Items added with this method will be not expire, and will have a Normal <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> priority.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Add(System.String,System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <param name="scavengingPriority">Specifies the new item's scavenging priority. 
            See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> for more information.</param>
            <param name="refreshAction">Object provided to allow the cache to refresh a cache item that has been expired. May be null.</param>
            <param name="expirations">Param array specifying the expiration policies to be applied to this item. May be null or omitted.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Remove(System.String)">
            <summary>
            Removes the given item from the cache. If no item exists with that key, this method does nothing.
            </summary>
            <param name="key">Key of item to remove from cache.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.GetData(System.String)">
            <summary>
            Returns the value associated with the given key.
            </summary>
            <param name="key">Key of item to return from cache.</param>
            <returns>Value stored in cache</returns>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Flush">
            <summary>
            Removes all items from the cache. If an error occurs during the removal, the cache is left unchanged.
            </summary>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Dispose">
            <summary>
            Not intended for public use. Only public due to requirements of IDisposable. If you call this method, your
            cache will be unusable.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory">
            <summary>
            Factory for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>s. This class is responsible for creating all the internal
            classes needed to implement a CacheManager.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory"/> class 
            with the default configuration source.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory"/> class 
            with the given configuration source.</para>
            </summary>
            <param name="configurationSource">The configuration source that contains information on how to build the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instances</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData">
            <summary>
            Configuration data defining CacheManagerData. Defines the information needed to properly configure
            a CacheManager instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>.
            </param>
            <param name="expirationPollFrequencyInSeconds">
            Frequency in seconds of expiration polling cycle
            </param>
            <param name="maximumElementsInCacheBeforeScavenging">
            Maximum number of items in cache before an add causes scavenging to take place
            </param>
            <param name="numberToRemoveWhenScavenging">
            Number of items to remove from cache when scavenging
            </param>
            <param name="cacheStorage">
            CacheStorageData object from configuration describing how data is stored 
            in the cache.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.ExpirationPollFrequencyInSeconds">
            <summary>
            Frequency in seconds of expiration polling cycle
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.MaximumElementsInCacheBeforeScavenging">
            <summary>
            Maximum number of items in cache before an add causes scavenging to take place
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.NumberToRemoveWhenScavenging">
            <summary>
            Number of items to remove from cache when scavenging
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.CacheStorage">
            <summary>
            CacheStorageData object from configuration describing how data is stored 
            in the cache.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> object needed to
            register the CacheManager represented by this config element.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.GetCacheManagerCreationExpression">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase">
            <summary>
            Base class for configuration data defining CacheManagerDataBase. Defines the information needed to properly configure
            a ICacheManager instance.
            </summary>    	
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/> class.
            </summary>
            <param name="type">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/>.
            </param>
            <param name="type">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> object needed to
            register the CacheManager represented by this config element.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.GetCacheManagerCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings">
            <summary>
            Overall configuration settings for Caching
            </summary>    
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.SectionName">
            <summary>
            Configuration key for cache manager settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.DefaultCacheManager">
            <summary>
            Defines the default manager instance to use when no other manager is specified
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.CacheManagers">
            <summary>
            Gets the collection of defined <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> objects.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.BackingStores">
            <summary>
            Gets the collection of defined <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> objects.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.EncryptionProviders">
            <summary>
            Gets the collection of defined <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> objects.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData">
            <summary>
            Configuration data defining CacheStorageData. This configuration section defines the name and type
            of the IBackingStore used by a CacheManager
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> class with a name and the type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="type">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> class with a name and the type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="name">The name of the configured <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>. </param>
            <param name="type">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> class with a name, the type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>, and a reference to a named instance of an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
            <param name="name">The name of the configured <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>. </param>
            <param name="type">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.</param>
            <param name="storageEncryption">The name of the referenced <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.StorageEncryption">
            <summary>
            Gets the name of the referenced <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData">
            <summary>
            Configuration object for Custom Providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> object needed to
            register the CacheManager represented by this config element.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData">
            <summary>
            Configuration object for Custom Providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.AddCachingSettings">
            <summary>
              Looks up a localized string similar to Add Caching Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseDescription">
            <summary>
              Looks up a localized string similar to Persists the cached data in memory, and optionally interacts with a persistent backing store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseDisplayName">
            <summary>
              Looks up a localized string similar to Cache Manager.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Cache Manager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Cache Manager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataCacheStorageDescription">
            <summary>
              Looks up a localized string similar to The name of the Backing Store to use for this Cache Manager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataCacheStorageDisplayName">
            <summary>
              Looks up a localized string similar to Backing Store.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataDescription">
            <summary>
              Looks up a localized string similar to Persists the cached data in memory, and optionally interacts with a persistent backing store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataDisplayName">
            <summary>
              Looks up a localized string similar to Cache Manager.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataExpirationPollFrequencyInSecondsDescription">
            <summary>
              Looks up a localized string similar to Time in seconds between each cycle that removes expired cached items..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataExpirationPollFrequencyInSecondsDisplayName">
            <summary>
              Looks up a localized string similar to Expiration Polling Frequency (seconds).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataMaximumElementsInCacheBeforeScavengingDescription">
            <summary>
              Looks up a localized string similar to Maximum number of items in the cache before adding another causes scavenging to occur..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataMaximumElementsInCacheBeforeScavengingDisplayName">
            <summary>
              Looks up a localized string similar to Max. Elements In Cache Before Scavenging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataNumberToRemoveWhenScavengingDescription">
            <summary>
              Looks up a localized string similar to Number of items to remove from the cache during each scavenging cycle..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataNumberToRemoveWhenScavengingDisplayName">
            <summary>
              Looks up a localized string similar to Number to Remove when Scavenging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsBackingStoresDescription">
            <summary>
              Looks up a localized string similar to Persists the cached items to a store such as a database or Isolated Storage..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsBackingStoresDisplayName">
            <summary>
              Looks up a localized string similar to Backing Stores.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsCacheManagersDescription">
            <summary>
              Looks up a localized string similar to The Cache Managers configured for the Caching Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsCacheManagersDisplayName">
            <summary>
              Looks up a localized string similar to Cache Managers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDefaultCacheManagerDescription">
            <summary>
              Looks up a localized string similar to The default Cache Manager to use when code does not specify a named Cache Manager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDefaultCacheManagerDisplayName">
            <summary>
              Looks up a localized string similar to Default Cache Manager.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for the Caching Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDisplayName">
            <summary>
              Looks up a localized string similar to Caching Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsEncryptionProvidersDescription">
            <summary>
              Looks up a localized string similar to Provide encryption of the data persisted in a backing store, but not in memory..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsEncryptionProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Encryption Providers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataDescription">
            <summary>
              Looks up a localized string similar to The name of the referenced Backing Store for this Cache Manager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataDisplayName">
            <summary>
              Looks up a localized string similar to Cache Storage.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the backing store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataStorageEncryptionDescription">
            <summary>
              Looks up a localized string similar to The name of the Encryption Provider to use for this Backing Store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataStorageEncryptionDisplayName">
            <summary>
              Looks up a localized string similar to Encryption Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Backing Store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataAddCommand">
            <summary>
              Looks up a localized string similar to Custom Cache Manager (using type picker).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataDescription">
            <summary>
              Looks up a localized string similar to Custom implementation that persists the cached data in memory, and optionally interacts with a persistent backing store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Cache Manager.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Cache Manager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Cache Manager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataAddCommand">
            <summary>
              Looks up a localized string similar to Custom Cache Store (using type picker).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataDescription">
            <summary>
              Looks up a localized string similar to A Backing Store implemented as a custom class that persists the cached data, and is added to Enterprise Library..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Cache Storage.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Backing Store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataStorageEncryptionDescription">
            <summary>
              Looks up a localized string similar to The name of the Encryption Provider for this Backing Store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataStorageEncryptionDisplayName">
            <summary>
              Looks up a localized string similar to Encryption Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Backing Store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataDescription">
            <summary>
              Looks up a localized string similar to Stores the cached data in a persistent Isolated Storage store on the local machine..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataDisplayName">
            <summary>
              Looks up a localized string similar to Isolated Storage Cache Store.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Isolated Storage Cache Store.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataPartitionNameDescription">
             <summary>
               Looks up a localized string similar to The section or partition of the Isolated Storage area for the cached data. 
            This allows different users to cache data on the same machine safely, and prevents different users accessing the same cached data..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataPartitionNameDisplayName">
            <summary>
              Looks up a localized string similar to Partition Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataStorageEncryptionDescription">
            <summary>
              Looks up a localized string similar to The name of the Encryption Provider to use for this Isolated Storage Cache Store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataStorageEncryptionDisplayName">
            <summary>
              Looks up a localized string similar to Encryption Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Isolated Storage Cache Store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataDescription">
            <summary>
              Looks up a localized string similar to Encrypts the data in the backing store (but not in memory) using a Cryptography Provider defined in the Cryptography Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Encryption Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Encryption Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Encryption Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions">
            <summary>
            Fluent interface used to further configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions.PollWhetherItemsAreExpiredIntervalSeconds(System.Int32)">
            <summary>
            Specifies the time interval, in seconds, that should be waited to see whether cache items should be expired. <br/>
            The default interval is 60 seconds.
            </summary>
            <param name="pollExperitionSeconds">The time interval, in seconds, that should be waited to see whether cache items should be expired.</param>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions.StartScavengingAfterItemCount(System.Int32)">
            <summary>
            Specifies the maximum numer of cache items after which scavenging will be performed. <br/>
            The default maximum number of cache items is 1000.
            </summary>
            <param name="numberOfElementsBeforeScavenging">The maximum numer of cache items after which scavenging will be performed.</param>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions.WhenScavengingRemoveItemCount(System.Int32)">
            <summary>
            Specifies the number of cache items that should be removed when scavenging cache items. <br/>
            The default number of cache items that should be removed is 10.
            </summary>
            <param name="numberOfElementsBeforeScavenging">The number of cache items that should be removed when scavenging cache items.</param>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData">
            <summary>
            Configuration data defining IsolatedStorageCacheStorageData. This configuration section adds the name
            of the Isolated Storage area to use to store data.
            </summary>    
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>.
            </param>
            <param name="storageEncryption">
            Storage Encryption data defined in configuration
            </param>
            <param name="partitionName">
            Name of the Isolated Storage area to use.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.PartitionName">
            <summary>
            Name of the Isolated Storage area to use.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider">
            <summary>
            <para>This type supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Represents the behavior required to provide Group Policy updates for the Caching Application Block, and it also manages
            the creation of the ADM template categories and policies required to edit Group Policy Objects for the block.
            </summary>
            <remarks>
            This class performs the actual Group Policy update for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/>
            configuration section and the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> instances contained by it. Processing for 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> and <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> instances is delegated to 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> objects registered to the configuration object data types.
            <para>
            The Group Policy directives for the Caching Application Block differ from other block's directives in that policies are
            only generated for cache managers, and these policies contain the parts used to override the settings for the
            CacheStorageData instance identified by the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.CacheStorage">CacheManagerData.CacheStorage</see> 
            property and the StorageEncryptionProviderData instance identified by the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.StorageEncryption">
            CacheStorageData.StorageEncryption</see> property, if any. Manageability providers registered for CacheStorageData and 
            StorageEncryptionProviderData subclasses must not generate policies, and the parts they generate must include the
            corresponding key name, as they will be included in the cache managers' policies. The purpose for this policy structure
            is to make the experience of editing a Group Policy Object's policies for the Caching Application Block similar to that
            of the Enterprise Library Configuration Console.
            </para>
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.BackingStoresKeyName">
            <summary>
            The name of the backing stores property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagerExpirationPollFrequencyInSecondsPropertyName">
            <summary>
            The name of the expiration poll frequency property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagerMaximumElementsInCacheBeforeScavengingPropertyName">
            <summary>
            The name of the maximum number of items in cache before scavenging property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagerNumberToRemoveWhenScavengingPropertyName">
            <summary>
            The name of the number of items to remove when scavenging property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagersKeyName">
            <summary>
            The name of the cache managers property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.DefaultCacheManagerPropertyName">
            <summary>
            The name of the default cache manager property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.EncryptionProvidersKeyName">
            <summary>
            The name of the encryption providers property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.
            </para>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider"/> class with a 
            given set of manageability providers to use when dealing with the configuration for cache storage and encryption providers.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the Caching Application Block.
            </summary>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.AddAdministrativeTemplateDirectivesForCacheManagers(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <devdoc>
            ADM templates for caching are different from the other blocks' templates to match the configuration console's 
            user experience. Instead of having separate categories with policies for cache managers, backing stores and 
            encryption providers, the policy for a cache manager includes the parts for its backing store and eventual
            encryption provider.
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationElements(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheManagerDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheManagerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheManagerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.AttributesPropertyName">
            <summary>
            The name of the attributes property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.ProviderTypePropertyName">
            <summary>
            The name of the provider type property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.PartitionNamePropertyName">
            <summary>
            The name of the partition name property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider"/> clas.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.BackingStoreSettingsPartName">
            <summary>
              Looks up a localized string similar to Backing store settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerExpirationPollFrequencyInSecondsPartName">
            <summary>
              Looks up a localized string similar to Expiration poll frequency (secs.).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerMaximumElementsInCacheBeforeScavengingPartName">
            <summary>
              Looks up a localized string similar to Maximum elements in cache before scavenging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerNumberToRemoveWhenScavengingPartName">
            <summary>
              Looks up a localized string similar to Number to remove when scavenging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for cache manager &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagersCategoryName">
            <summary>
              Looks up a localized string similar to Cache managers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerSettingsDefaultCacheManagerPartName">
            <summary>
              Looks up a localized string similar to Default cache manager.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerSettingsPolicyName">
            <summary>
              Looks up a localized string similar to Specify settings for Caching Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CachingSectionCategoryName">
            <summary>
              Looks up a localized string similar to Caching.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CustomProviderAttributesPartName">
            <summary>
              Looks up a localized string similar to Attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CustomProviderTypePartName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.IsolatedStorageCacheStorageDataPartitionNamePartName">
            <summary>
              Looks up a localized string similar to Partition name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.NullBackingStoreNoSettingsPartName">
            <summary>
              Looks up a localized string similar to In memory store - no settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.StorageEncryptionProviderSettingsPartName">
            <summary>
              Looks up a localized string similar to Encryption provider settings.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData">
            <summary>
            Base class for configuration data defined for all types of StorageEncryptionProviders
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> class with a name and the type of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
            <param name="type">
            The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> class with a name and the type of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
            <param name="name">
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </param>
            <param name="type">
            The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.GetRegistrations"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>A Expression that creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Unity.CachingBlockExtension">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtension"/> that registers the policies necessary
            to create <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/> instances described in the standard
            configuration file.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer">
            <summary>
            Represents an expiration poll timer.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="expirationPollFrequencyInMilliSeconds"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer.StartPolling(System.Threading.TimerCallback)">
            <summary>
            Start the polling process.
            </summary>
            <param name="callbackMethod">The method to callback when a cycle has completed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer.StopPolling">
            <summary>
            Stop the polling process.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask">
            <summary>
            Represents a task to perform expiration on cached items.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialize an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask"/> class with an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/> object.
            </summary>
            <param name="cacheOperations">An <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/> object.</param>
            <param name="instrumentationProvider">An instrumentation provider.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.DoExpirations">
            <summary>
            Perform the cacheItemExpirations.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.MarkAsExpired(System.Collections.Hashtable)">
            <summary>
            Mark each <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> as expired. 
            </summary>
            <param name="liveCacheRepresentation">The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects to expire.</param>
            <returns>
            The number of items marked.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.SweepExpiredItemsFromCache(System.Collections.Hashtable)">
            <summary>
            Sweep and remove the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/>s.
            </summary>
            <param name="liveCacheRepresentation">
            The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects to remove.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.PrepareForSweep">
            <summary>
            Prepare to sweep the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/>s.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore">
            <summary>
            <P>This interface defines the contract that must be implemented by all backing stores. 
            Implementors of this method are responsible for interacting with their underlying
            persistence mechanisms to store and retrieve CacheItems. All methods below must guarantee 
            Weak Exception Safety. This means that operations must complete entirely, or they must completely
            clean up from the failure and leave the cache in a consistent state. The mandatory
            cleanup process will remove all traces of the item that caused the failure, causing that item
            to be expunged from the cache entirely.
            </P>
            </summary>
            <remarks>
            Due to the way the Caching class is implemented, implementations of this class will always be called in 
            a thread-safe way. There is no need to make derived classes thread-safe.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Count">
            <summary>
            Number of objects stored in the backing store
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Add(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            <p>
            This method is responsible for adding a CacheItem to the BackingStore. This operation must be successful 
            even if an item with the same key already exists. This method must also meet the Weak Exception Safety guarantee
            and remove the item from the backing store if any part of the Add fails.
            </p> 
            </summary>
            <param name="newCacheItem">CacheItem to be added</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Add
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Remove(System.String)">
            <summary>
            Removes an item with the given key from the backing store
            </summary>
            <param name="key">Key to remove. Must not be null.</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item.
            </summary>
            <param name="key">Key to update</param>
            <param name="timestamp">Time at which item updated</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during UpdateLastAccessedTime
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Flush">
            <summary>
            Flushes all CacheItems from backing store. This method must meet the Weak Exception Safety guarantee.
            </summary>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Flush
            </p>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Load">
            <summary>
            Loads all CacheItems from backing store. 
            </summary>
            <returns>Hashtable filled with all existing CacheItems.</returns>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Load
            </p>
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration">
            <summary>
            Allows end users to implement their own cache item expiration schema.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>Returns true if the item has expired, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration.Notify">
            <summary>
            Called to tell the expiration that the CacheItem to which this expiration belongs has been touched by the user
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration.Initialize(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Called to give the instance the opportunity to initialize itself from information contained in the CacheItem.
            </summary>
            <param name="owningCacheItem">CacheItem that owns this expiration object</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction">
            <summary>
            This interface defines the contract that must be implemented to create an object that can be used to refresh 
            an expired item from the cache. The implementing class must be serializable. Care must be taken when implementing 
            this interface not to create an object that maintains too much state about its environment, as all portions of its
            environment will be serialized as well, creating possibly a huge object graph.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction.Refresh(System.String,System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Called when an item expires from the cache. This method can be used to notify an application that
            the expiration occured, cause the item to be refetched and refreshed from its original location, or 
            perform any other application-specific action. 
            </summary>
            <param name="removedKey">Key of item removed from cache. Will never be null.</param>
            <param name="expiredValue">Value from cache item that was just expired</param>
            <param name="removalReason">Reason the item was removed from the cache. See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/></param>
            <remarks>This method should catch and handle any exceptions thrown during its operation. No exceptions should leak
            out of it.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager">
            <summary>
            This interface defines the contract that must be implemented by all cache managers. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Add(System.String,System.Object)">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added. 
            Items added with this method will be not expire, and will have a Normal <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> priority.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Add(System.String,System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <param name="scavengingPriority">Specifies the new item's scavenging priority. 
            See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority" /> for more information.</param>
            <param name="refreshAction">Object provided to allow the cache to refresh a cache item that has been expired. May be null.</param>
            <param name="expirations">Param array specifying the expiration policies to be applied to this item. May be null or omitted.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Contains(System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="key">Key of item to check for</param>
            <returns>True if item referenced by key is in the cache</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Count">
            <summary>
            Returns the number of items currently in the cache.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Flush">
            <summary>
            Removes all items from the cache. If an error occurs during the removal, the cache is left unchanged.
            </summary>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.GetData(System.String)">
            <summary>
            Returns the value associated with the given key.
            </summary>
            <param name="key">Key of item to return from cache.</param>
            <returns>Value stored in cache</returns>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Remove(System.String)">
            <summary>
            Removes the given item from the cache. If no item exists with that key, this method does nothing.
            </summary>
            <param name="key">Key of item to remove from cache.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Item(System.String)">
            <summary>
            Returns the item identified by the provided key
            </summary>
            <param name="key">Key to retrieve from cache</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the cache items.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations">
            <summary>
            Represents cache operations.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations.CurrentCacheState">
            <summary>
            Gets the current cache state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations.RemoveItemFromCache(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Removes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/>.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <param name="removalReason">One of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/> values.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations.Count">
            <summary>
            Returns the number of items contained in the cache.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheScavenger">
            <summary>
            Represents a cache scavenger.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheScavenger.StartScavenging">
            <summary>
            Starts the scavenging process.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer">
            <summary>
            Sorts the cache items in data for scavenging
            </summary>>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer.#ctor(System.Collections.Hashtable)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer"/> class with a list of unsorted cache items.
            </summary>
            <param name="unsortedItems">
            A set of unsorted cache items.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects and returns a value indicating whether one is less than, equal to or greater than the other in priority by date.
            </summary>
            <param name="x">
            First <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> to compare.
            </param>
            <param name="y">
            Second <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> to compare.
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/></description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/></description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/></description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.BackgroundSchedulerProducerConsumerQueueFailure">
            <summary>
              Looks up a localized string similar to Internal ProducerConsumerQueue thread failed..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.BlockName">
            <summary>
              Looks up a localized string similar to Enterprise Library Caching Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessAttemptsCounterHelpResource">
            <summary>
              Looks up a localized string similar to Total # of Cache Access Attempts is the number of reads from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedExpiredItemsRatioBaseCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Accessed Expired Items Ratio Base is the total number of items expired from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedExpiredItemsRatioCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Accessed Expired Items Ratio is the ratio between expired items accessed by the user and total items expired from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedScavengedItemsRatioBaseCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Accessed Scavenged Items Ratio Base is the total number of items scavenged from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedScavengedItemsRatioCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Accessed Scavenged Items Ratio is the ratio between scavenged items accessed by the user and total items scavenged from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheExpiriesPerSecCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Expiries/sec is the rate at which items were expired from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheHitRatioCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Hit Ratio is the ratio between hits and reads from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheHitsPerSecCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Hits/sec is the rate at which requests for existing items were received by the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheMissesPerSecCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Misses/sec is the rate at which requests for non existing items were received by the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheNotInitializedException">
            <summary>
              Looks up a localized string similar to Add called without setting BackgroundScheduler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheScavengedItemsPerSecCounterHelpResource">
            <summary>
              Looks up a localized string similar to Cache Scavenged Items/sec is the rate at which items were scavenged from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheTotalEntriesCounterHelpResource">
            <summary>
              Looks up a localized string similar to Total Cache Entries is the total number of entries in the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheUpdatedEntriesPerSecHelpResource">
            <summary>
              Looks up a localized string similar to Updated Entries/sec is the rate at which items were updated in the cache. An update can be either an &quot;add&quot; or a &quot;remove&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.EmptyParameterName">
            <summary>
              Looks up a localized string similar to Parameter name cannot be null or an empty string..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ErrorCacheCallbackFailedMessage">
            <summary>
              Looks up a localized string similar to The error occurred executing the removal callback for key &quot;{1}&quot; in the the &quot;{0}&quot; instance..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ErrorCacheConfigurationFailedMessage">
            <summary>
              Looks up a localized string similar to The error occurred retrieving the configuration for instance &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ErrorCacheOperationFailedMessage">
            <summary>
              Looks up a localized string similar to The error occurred using the &quot;{0}&quot; instance..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionBackingStoresWithNonDefaultConstructorsShouldOverrideGetRegistrations">
            <summary>
              Looks up a localized string similar to Backing Stores with non-default constructors should override GetRegistrations()..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionInvalidExtendedFormatArguments">
            <summary>
              Looks up a localized string similar to The format length is invalid..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionInvalidFileName">
            <summary>
              Looks up a localized string similar to The file does not exist..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionMethodMustBeImplementedBySubclasses">
            <summary>
              Looks up a localized string similar to Must be implemented by subclasses..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionNullFileName">
            <summary>
              Looks up a localized string similar to The file name cannot be null..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionNullTimeFormat">
            <summary>
              Looks up a localized string similar to Time format cannot be null..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionParameterMustImplement">
            <summary>
              Looks up a localized string similar to Parameter must implement type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeAbsoluteTime">
            <summary>
              Looks up a localized string similar to Absolute time cannot be less than current time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeDay">
            <summary>
              Looks up a localized string similar to Day of Week in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeHour">
            <summary>
              Looks up a localized string similar to Hour in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeMinute">
            <summary>
              Looks up a localized string similar to Minutes in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeMonth">
            <summary>
              Looks up a localized string similar to Month of Year in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeSlidingExpiration">
            <summary>
              Looks up a localized string similar to Sliding time should be greater than or equal to 1s..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionStorageAreaNullOrEmpty">
            <summary>
              Looks up a localized string similar to The storage are name for the Isolated Storage Backing Store can not be null or an empty string..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionTypeForCustomBackingStoreMustDeriveFrom">
            <summary>
              Looks up a localized string similar to The Custom Backing Store &apos;{0}&apos; with Type &apos;{1}&apos; must derive from IBackingStore..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionTypeForCustomCacheManagerMustDeriveFrom">
            <summary>
              Looks up a localized string similar to The Custom Cache Manager &apos;{0}&apos; with Type &apos;{1}&apos; must derive from ICacheManager..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.FailureToRemoveCacheItemInBackground">
            <summary>
              Looks up a localized string similar to Failure while removing item from cache in background..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.FailureToSpawnUserSpecifiedRefreshAction">
            <summary>
              Looks up a localized string similar to Failure while starting application-specified refresh action..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.InvalidExpirationPollFrequencyInMilliSeconds">
            <summary>
              Looks up a localized string similar to Expiration poll frequency time must be at least 1 millisecond..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.InvalidPollingStopOperation">
            <summary>
              Looks up a localized string similar to Cannot stop polling before it is started..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheExpiriesCounterHelpResource">
            <summary>
              Looks up a localized string similar to Total Cache Expiries is the total number of items expired from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheHitsCounterHelpResource">
            <summary>
              Looks up a localized string similar to Total Cache Hits is the total number of requests for existing items received by the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheMissesCounterHelpResource">
            <summary>
              Looks up a localized string similar to Total Cache Misses is the total number for non existing items received by the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheScavengedItemsCounterHelpResource">
            <summary>
              Looks up a localized string similar to Total Cache Scavenged Items is the total number of items scavenged from the cache..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheUpdatedEntriesHelpResource">
            <summary>
              Looks up a localized string similar to Total Updated Entries is the total number of items updated in the cache. An update can be either an &quot;add&quot; or a &quot;remove&quot;..
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.RefreshActionInvoker">
            <summary>
            Purpose of this class is to encapsulate the behavior of how ICacheItemRefreshActions
            are invoked in the background.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.RefreshActionInvoker.InvokeRefreshAction(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Invokes the refresh action on a thread pool thread
            </summary>
            <param name="removedCacheItem">Cache item being removed. Must never be null.</param>
            <param name="removalReason">The reason the item was removed.</param>	
            <param name="instrumentationProvider">The instrumentation provider.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask">
            <summary>
            Represents the task to start scavenging items in a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.#ctor(System.Int32,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask"/> with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> name, the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy"/> and the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/>.
            </summary>
            <param name="numberToRemoveWhenScavenging">The number of items that should be removed from the cache when scavenging.</param>
            <param name="maximumElementsInCacheBeforeScavenging"></param>
            <param name="cacheOperations">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/> to perform.</param>
            <param name="instrumentationProvider">An instrumentation provider.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.DoScavenging">
            <summary>
            Performs the scavenging.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.SerializationUtility">
            <summary>
            Utility class for serializing and deserializing objects to and from byte streams
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.SerializationUtility.ToBytes(System.Object)">
            <summary>
            Converts an object into an array of bytes. Object must be serializable.
            </summary>
            <param name="value">Object to serialize. May be null.</param>
            <returns>Serialized object, or null if input was null.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.SerializationUtility.ToObject(System.Byte[])">
            <summary>
            Converts a byte array into an object. 
            </summary>
            <param name="serializedObject">Object to deserialize. May be null.</param>
            <returns>Deserialized object, or null if input was null.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime">
            <summary>
            This class tests if a data item was expired using a absolute time 
            schema.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            Create an instance of the class with a time value as input and 
            convert it to UTC.
            </summary>
            <param name="absoluteTime">
            The time to be checked for expiration
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.AbsoluteExpirationTime">
            <summary>
            Gets the absolute expiration time.
            </summary>
            <value>
            The absolute expiration time.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.#ctor(System.TimeSpan)">
            <summary>
            Creates an instance based on a time interval starting from now.
            </summary>
            <param name="timeFromNow">Time interval</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <remarks>
            bool isExpired = ICacheItemExpiration.HasExpired();
            </remarks>
            <returns>
            "True", if the data item has expired or "false", if the data item 
            has not expired
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.Notify">
            <summary>
            Called to notify this object that the CacheItem owning this expiration was just touched by a user action
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.Initialize(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Called to give this object an opportunity to initialize itself from data inside a CacheItem
            </summary>
            <param name="owningCacheItem">CacheItem provided to read initialization information from. Will never be null.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat">
             <summary>
             Represents the extended format for the cache.
             </summary>    
             <remarks>
             Extended format syntax : <br/><br/>
             
             Minute       - 0-59 <br/>
             Hour         - 0-23 <br/>
             Day of month - 1-31 <br/>
             Month        - 1-12 <br/>
             Day of week  - 0-6 (Sunday is 0) <br/>
             Wildcards    - * means run every <br/>
             Examples: <br/>
             * * * * *    - expires every minute<br/>
             5 * * * *    - expire 5th minute of every hour <br/>
             * 21 * * *   - expire every minute of the 21st hour of every day <br/>
             31 15 * * *  - expire 3:31 PM every day <br/>
             7 4 * * 6    - expire Saturday 4:07 AM <br/>
             15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            	Therefore 6 6 6 6 1 means:
            	•	have we crossed/entered the 6th minute AND
            	•	have we crossed/entered the 6th hour AND 
            	•	have we crossed/entered the 6th day AND
            	•	have we crossed/entered the 6th month AND
            	•	have we crossed/entered A MONDAY?
            
            	Therefore these cases should exhibit these behaviors:
            
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE, ALL CROSSED/ENTERED
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 *", getTime, nowTime );
            	TRUE
            	
            			
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2005 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we did not cross 6th hour, nor did we cross Monday
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE, we cross/enter Friday
            
            
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we don’t cross Monday but all other conditions satisfied
             </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.Validate(System.String)">
            <summary>
            Validates the format.
            </summary>
            <param name="timeFormat">
            The format to validate.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.#ctor(System.String)">
            <summary>
            Initializes a new instnace of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat"/> class with a format.
            </summary>
            <param name="format">The extended format time.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.Format">
            <summary>
            Gets the exteneded format.
            </summary>
            <value>
            The extended format.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetMinutes">
            <summary>
            Gets the minutes to expire.
            </summary>
            <value>
            The minutes to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of minutes to expire.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetHours">
            <summary>
            Gets the hours to expire.
            </summary>
            <value>
            The hours to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of hours to expire.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetDays">
            <summary>
            Gets the days to expire.
            </summary>
            <value>
            The days to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of days to expire.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetMonths">
            <summary>
            Gets the months of the year to expire.
            </summary>
            <value>
            The months of the year to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of months to expire.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetDaysOfWeek">
            <summary>
            Gets the days of the week to expire.
            </summary>
            <value>
            The days of the week to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of the days of the week to expire.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryMinute">
            <summary>
            Determines if should expire every minute.
            </summary>
            <value>
            <see langword="true"/> if should expire every minute; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryDay">
            <summary>
            Determines if item should expire every day.
            </summary>
            <value>
            <see langword="true"/> if should expire every day; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryHour">
            <summary>
            Determines if should expire every hour.
            </summary>
            <value>
            <see langword="true"/> if should expire every hour; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryMonth">
            <summary>
            Determines if should expire every month.
            </summary>
            <value>
            <see langword="true"/> if should expire every month; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryDayOfWeek">
            <summary>
            Determines if should expire every day of the week.
            </summary>
            <value>
            <see langword="true"/> if should expire every day of the week; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.IsExpired(System.DateTime,System.DateTime)">
            <summary>
            Determines if the time has expired.
            </summary>
            <param name="getTime">The time to compare.</param>
            <param name="nowTime">The current time.</param>
            <returns>
            <see langword="true"/> if the time is expired; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime">
            <summary>
            This provider tests if a item was expired using a extended format.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.#ctor(System.String)">
            <summary>
            Convert the input format to the extented time format.
            </summary>
            <param name="timeFormat">
            This contains the expiration information
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.TimeFormat">
            <summary>
            Gets the extended time format.
            </summary>
            <value>
            The extended time format.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>
            Returns true if the data is expired otherwise false
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.Initialize(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency">
            <summary>
            This class tracks a file cache dependency.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.#ctor(System.String)">
            <summary>
            Constructor with one argument.
            </summary>
            <param name="fullFileName">
            Indicates the name of the file
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.FileName">
            <summary>
            Gets the name of the dependent file.
            </summary>
            <value>
            The name of the dependent file.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.LastModifiedTime">
            <summary>
            Gets the last modifed time of the file.
            </summary>
            <value>
            The last modifed time of the file
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.HasExpired">
            <summary>
            Specifies if the item has expired or not.
            </summary>
            <returns>Returns true if the item has expired, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.Initialize(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired">
            <summary>
            This class reflects an expiration policy of never being expired.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired.HasExpired">
            <summary>
            Always returns false
            </summary>
            <returns>False always</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired.Notify">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired.Initialize(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime">
            <summary>
            This provider tests if a item was expired using a time slice schema.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.#ctor(System.TimeSpan)">
            <summary>
            Create an instance of this class with the timespan for expiration.
            </summary>
            <param name="slidingExpiration">
            Expiration time span
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.#ctor(System.TimeSpan,System.DateTime)">
            <summary>
            For internal use only.
            </summary>
            <param name="slidingExpiration"/>
            <param name="originalTimeStamp"/>
            <remarks>
            This constructor is for testing purposes only. Never, ever call it in a real program
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.ItemSlidingExpiration">
            <summary>
            Returns sliding time window that must be exceeded for expiration to occur
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.TimeLastUsed">
            <summary>
            Returns time that this object was last touched
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>Returns true if the item has expired otherwise false.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.Initialize(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Used to set the initial value of TimeLastUsed. This method is invoked during the reinstantiation of
            an instance from a persistent store. 
            </summary>
            <param name="owningCacheItem">CacheItem to which this expiration belongs.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.CheckSlidingExpiration(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Check whether the sliding time has expired.
            </summary>
            <param name="nowDateTime">Current time </param>
            <param name="lastUsed">The last time when the item has been used</param>
            <param name="slidingExpiration">The span of sliding expiration</param>
            <returns>True if the item was expired, otherwise false</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller">
            <summary>
            Let the system know that the InstallUtil.exe tool will be run against this assembly
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.#ctor">
            <summary>
            Represents the installer for the instrumentation events. Not intended for direct use.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider">
            <summary>
            Implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider"/> that generates
            performance counter updates in response to instrumentation activities.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.CounterCategoryName">
            <summary>
            The name of the caching counters.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.EventLogSourceName">
            <summary>
            The name of the event log source.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheExpiriesCounterName">
            <summary>
            The total cache expires counter name.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheHitsCounterName">
            <summary>
            The total cache hits counter name.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheMissesCounterName">
            <summary>
            The total cache misses counter name.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheScavengedItemsCounterName">
            <summary>
            The total cache scavenged items counter name.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalUpdatedEntriesItemsCounterName">
            <summary>
            The total updated entries counter name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance this instrumentation listener is created for.</param>
            <param name="performanceCountersEnabled"><b>true</b> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><b>true</b> if event log entries should be written.</param>
            <param name="applicationInstanceName">The application instance name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance this instrumentation listener is created for.</param>
            <param name="performanceCountersEnabled"><b>true</b> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><b>true</b> if event log entries should be written.</param>
            <param name="nameFormatter">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter"/> that is used to creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheUpdated(System.Int64,System.Int64)">
            <summary>
            Fires the CacheUpdated event - reported when items added or
            removed from the cache.
            </summary>
            <param name="updatedEntriesCount">The number of entries updated.</param>
            <param name="totalEntriesCount">The total number of entries in cache.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheAccessed(System.String,System.Boolean)">
            <summary>
            Fires the CacheAccessed event - reported when an item is retrieved from the
            cache, or if an item was requested but not found.
            </summary>
            <param name="key">The key which was used to access the cache.</param>
            <param name="hit"><code>true</code> if accessing the cache was successful</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheExpired(System.Int64)">
            <summary>
            Fires the CacheExpired event - reported when items are expired from the cache.
            </summary>
            <param name="itemsExpired">The number of items that are expired.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheScavenged(System.Int64)">
            <summary>
            Fires the CacheScavenged event - reported when the cache is scavenged.
            </summary>
            <param name="itemsScavenged">The number of items scavenged from cache.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheCallbackFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheCallbackFailed event - reported when an exception occurs during
            a cache callback.
            </summary>
            <param name="key">The key that was used accessing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> when this failure occurred.</param>
            <param name="exception">The exception causing the failure.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheFailed event - reported when an exception is thrown during a cache operation.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
            <param name="exception">The message that represents the exception causing the failure.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument the caching events for the specified instance names.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger">
            <summary>
            The instrumentation gateway when no instances of the objects from the block are involved.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger.EventLogSourceName">
            <summary>
            The event log source name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger"/> class, specifying whether 
            logging to the event log is allowed.
            </summary>
            <param name="eventLoggingEnabled"><b>true</b> if writing to the event log is allowed, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger.LogConfigurationError(System.String,System.Exception)">
            <summary>
            Logs the occurrence of a configuration error for the Enterprise Library Caching Application Block through the 
            available instrumentation mechanisms.
            </summary>
            <param name="instanceName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance in which the configuration error was detected.</param>
            <param name="exception">The exception raised for the configuration error.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider">
            <summary>
            This interface defines the instrumentation events that can be raised from a
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheUpdated(System.Int64,System.Int64)">
            <summary>
            Fires the CacheUpdated event - reported when items added or
            removed from the cache.
            </summary>
            <param name="updatedEntriesCount">The number of entries updated.</param>
            <param name="totalEntriesCount">The total number of entries in cache.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheAccessed(System.String,System.Boolean)">
            <summary>
            Fires the CacheAccessed event - reported when an item is retrieved from the
            cache, or if an item was requested but not found.
            </summary>
            <param name="key">The key which was used to access the cache.</param>
            <param name="hit"><code>true</code> if accessing the cache was successful</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheExpired(System.Int64)">
            <summary>
            Fires the CacheExpired event - reported when items are expired from the cache.
            </summary>
            <param name="itemsExpired">The number of items that are expired.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheScavenged(System.Int64)">
            <summary>
            Fires the CacheScavenged event - reported when the cache is scavenged.
            </summary>
            <param name="itemsScavenged">The number of items scavenged from cache.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheCallbackFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheCallbackFailed event - reported when an exception occurs during
            a cache callback.
            </summary>
            <param name="key">The key that was used accessing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> when this failure occurred.</param>
            <param name="exception">The exception causing the failure.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheFailed event - reported when an exception is thrown during a cache operation.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
            <param name="exception">The message that represents the exception causing the failure.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension">
            <summary>
            Base class for fluent interface builders that extend the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager)">
            <summary>
            Creates an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension"/> passing the current <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/>'s fluent interface builder.
            </summary>
            <param name="context">The current <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/>'s fluent interface builder.<br/>
            This interface must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.AddBackingStoreToCachingConfigurationAndCurrentCacheManager(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> as well as adds a reference to the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/> instance currently being configured.
            </summary>
            <param name="backingStore">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> that should be added to configuration.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> instance that corresponds to the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/> being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension">
            <summary>
            Allows access to the underlying configuration classes that are used for the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CacheManager"/> instance being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CacheManager">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> instance that corresponds to the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CacheManager"/> being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension">
            <summary>
            Base class for fluent interface builders that extend the caching configuration fluent interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension"/> passing the caching configuration's fluent interface builder.
            </summary>
            <param name="context">The current caching configuration's fluent interface builder.<br/>
            This interface must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationExtension"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationExtension">
            <summary>
            Allows access to the underlying <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension">
            <summary>
            Base class for fluent interface builders that extend the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing)">
            <summary>
            Creates an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension"/> passing the current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>'s fluent interface builder.
            </summary>
            <param name="context">The current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>'s fluent interface builder.<br/>
            This interface must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.AddEncryptionProviderToCachingConfigurationAndBackingStore(Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> as well as adds a reference to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance currently being configured.
            </summary>
            <param name="storageEncyption">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> that should be added to configuration.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.CacheStorage">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> instance that corresponds to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension">
            <summary>
            Allows access to the underlying configuration classes that are used for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension.CacheStorage">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> instance that corresponds to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing">
            <summary>
            Fluent interface used to add an encryption provider to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance being configured.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing.SharedEncryptionProviderNamed(System.String)">
            <summary>
            Specifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance being configured should use the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> by the name of <paramref name="cacheStorageEncryptionProviderName"/>.
            </summary>
            <param name="cacheStorageEncryptionProviderName">The name od the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> that should be used.</param>
            <returns>A fluent interface that can be used to further configure caching settings.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration">
            <summary>
            Root fluent interface for building up caching configuration.<br/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.UseAsDefaultCache">
            <summary>
            Specifies the current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> as the default cache manager instance.
            </summary>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.WithOptions">
            <summary>
            Returns a fluent interface to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.StoreInSharedBackingStore(System.String)">
            <summary>
            Specifies cache items should be stored using a previously configured <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> of name <paramref name="backingStoreName"/>.
            </summary>
            <param name="backingStoreName">The name of the backing store that should be used to store cache items.</param>
            <returns>Fluent interface that can be used to further configure caching configuration.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.StoreInMemory">
            <summary>
            Specifies cache items should not be persisted, but kept in memory using a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore"/>.
            </summary>
            <returns>Fluent interface that can be used to further configure caching configuration.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCustomCacheManager">
            <summary>
            Fluent interface used to configure a custom cache manager.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCustomCacheManager.UseAsDefaultCache">
            <summary>
            Specifies the current custom cache manager as the default cache manager instance.
            </summary>
            <returns>Fluent interface that can be used to further configure this custom cache manager.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInCustomStore">
            <summary>
            Fluent interface used to configure a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInCustomStore.EncryptUsing">
            <summary>
            Returns a fluent interface that can be used to set up encryption for the current custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInIsolatedStorage">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInIsolatedStorage.UsePartition(System.String)">
            <summary>
            Specifies the which partition should be used for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance being configured.
            </summary>
            <param name="partitionName">The name of the partition that should be used.</param>
            <returns>A fluent interface that can be used to further configure the current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInIsolatedStorage.EncryptUsing">
            <summary>
            Returns a fluent interface that can be used to set up encryption for the current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistrations">
            <summary>
            Fluent interface that allows to add <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instances.
            </summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistrations.AddTypeRegistrationsProviderNamed(System.String)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance to configuration source builder. <br/>
            </summary>
            <param name="typeRegistrationsProviderName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance.
            </summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration.ForType``1">
            <summary>
            Specifies the type of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.
            </summary>
            <typeparam name="TTypeRegistrationsProvider">The type of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.</typeparam>
            <returns>Fluent interface that allows to add more type registration providers.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration.ForType(System.Type)">
            <summary>
            Specifies the type of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.
            </summary>
            <param name="typeRegistrationProvider">The type of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.</param>
            <returns>Fluent interface that allows to add more type registration providers.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration.ForSection(System.String)">
            <summary>
            Specifies the name of the configuration section that implements <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>. <br/>
            </summary>
            <param name="sectionName">The name of the configuration section that implements <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>. </param>
            <returns>Fluent interface that allows to add more type registration providers.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers">
            <summary>
            This interface provides the extension point for handlers that provide a fluent configuration interface.
            </summary>
            <remarks>
            Handlers providing a fluent interface should provide extension methods to this interface.
            <example>
             public static class ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions
             {
                public static IExceptionConfigurationReplaceWithProvider ReplaceWith(this IExceptionConfigurationAddExceptionHandlers context, Type replacingExceptionType)
                { }
             }
            </example>
            
            The context implementer offers additional interfaces that are useful in continuing the configuration of Exception Handling (<see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling"/>
            or in adding your custom handler information to the currently building exception type (<see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension"/>).  In lieu of casting to these
            interfaces directly, consider using the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension"/> as a base class for your custom handler builder.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionType">
            <summary>
            Fluent interface extensions for configuring an exception type on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionType.ForExceptionType(System.Type)">
            <summary>
            The <see cref="T:System.Exception"/> handled under the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>.
            </summary>
            <param name="exceptionType">The type of <see cref="T:System.Exception"/> handled for this policy.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionType.ForExceptionType``1">
            <summary>
            The <see cref="T:System.Exception"/> handled under the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Exception"/> handled for this policy.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling">
            <summary>
            This interface supports the configuration of the Exception Handling Application Block.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName">
            <summary>
            Defines an exception policy with a given name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName.GivenPolicyWithName(System.String)">
            <summary>
            Defines new policy with a given name.
            </summary>
            <param name="name">Name of policy</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationReplaceWithProvider">
            <summary>
             This interface supports the fluent configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction">
            <summary>
            This interface supports the fluent configuration of the Exception Handling Application Block.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction.ThenDoNothing">
            <summary>
            End the current exception handling chain by doing nothing more.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction.ThenNotifyRethrow">
            <summary>
            End the current exception handling chain by notifying the caller that an exception should be rethrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction.ThenThrowNewException">
            <summary>
            End the current exception handling chain by throwing a new exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage">
            <summary>
            Defines interface for adding messages when configuring a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> for an exception.
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage.UsingMessage(System.String)">
            <summary>
            Use the provided message as part of the new exception.
            </summary>
            <param name="message">Message to use when providing an alternative exception, typically through wrapping or replacing.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage.UsingResourceMessage(System.Type,System.String)">
            <summary>
            Use the message in the specified resource file and name.
            </summary>
            <param name="resourceType">The type from the assembly with the resource to use for a message</param>
            <param name="resourceName">The name of the resource.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWrapWithProvider">
            <summary>
             This interface supports the fluent configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationLoggingProvider">
            <summary>
            Defines the fluent configuration extensions for the logging provider.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationLoggingProvider.UsingTitle(System.String)">
            <summary>
            Title to use when logging an exception.
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationLoggingProvider.UsingEventId(System.Int32)">
            <summary>
            EventId to use when logging an exception.
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationLoggingProvider.UsingExceptionFormatter(System.Type)">
            <summary>
            Type of exception formatter to use when logging.
            </summary>
            <param name="exceptionFormatterType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationLoggingProvider.UsingExceptionFormatter``1">
            <summary>
            Type of exception formatter to use when logging.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationLoggingProvider.WithSeverity(System.Diagnostics.TraceEventType)">
            <summary>
            Severity to use when logging an exception.
            </summary>
            <param name="severity"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationLoggingProvider.WithPriority(System.Int32)">
            <summary>
            Priority to use when logging an exception.
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.BinaryFormatterBuilder">
            <summary>
            Builder class used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.BinaryFormatterBuilder.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.BinaryFormatterBuilder.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.BinaryFormatterBuilder.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CustomFormatterBuilder">
            <summary>
            Builder class used to configure a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CustomFormatterBuilder.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CustomFormatterBuilder.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CustomFormatterBuilder.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder">
            <summary>
            Interface for builder classes used to configure <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder.GetFormatterData">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> instance that contains the configuration for an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryContd">
            <summary>
            Fluent interface that allows tracelisteners to be configured for a Category Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryContd.SendTo">
            <summary>
            Entry point for attaching Trace Listeners to a Category Source.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryOptions">
            <summary>
            Fluent interface to further configure a logging category source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryOptions.ToSourceLevels(System.Diagnostics.SourceLevels)">
            <summary>
            Specifed the default <see cref="T:System.Diagnostics.SourceLevels"/> for this Category.<br/>
            By default the source level is set to <see cref="F:System.Diagnostics.SourceLevels.All"/>.
            </summary>
            <param name="sourceLevels">The <see cref="T:System.Diagnostics.SourceLevels"/> to be set as default.</param>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryOptions.DoNotAutoFlushEntries">
            <summary>
            Specifies that Flush doesnt have to be called after every write to a listener.<br/>
            By default a Flush will be called after every write to a listener.
            </summary>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryStart">
            <summary>
            Fluent interface that allows settings to be configured for a Category Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCategoryStart.WithOptions">
            <summary>
            Returns a fluent interface for further configuring a logging category.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd">
            <summary>
            Fluent interface that allows log categories to be set up.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.LogToCategoryNamed(System.String)">
            <summary>
            Creates a Category Source in the configuration schema with the specified name.
            </summary>
            <param name="categoryName">The name of the Category Source.</param>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd.SpecialSources">
            <summary>
            Returns an interface that can be used to configure special logging categories.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions">
            <summary>
            Fluent interface used to configure a custom logging category.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions.ToSourceLevels(System.Diagnostics.SourceLevels)">
            <summary>
            Specifed the default <see cref="T:System.Diagnostics.SourceLevels"/> for this Category.<br/>
            By default the source level is set to <see cref="F:System.Diagnostics.SourceLevels.All"/>.
            </summary>
            <param name="sourceLevels">The <see cref="T:System.Diagnostics.SourceLevels"/> to be set as default.</param>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions.DoNotAutoFlushEntries">
            <summary>
            Specifies that Flush doesnt have to be called after every write to a listener.<br/>
            By default a Flush will be called after every write to a listener.
            </summary>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryOptions.SetAsDefaultCategory">
            <summary>
            Specifies that this category will be the default category.
            </summary>
            <returns>Fluent interface that allows for this Category Source to be configured further.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryStart">
            <summary>
            Fluent interface that allows settings to be configured for a custom category source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationCustomCategoryStart.WithOptions">
            <summary>
            Returns a fluent interface that can be used to further configure a custom category source.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension">
            <summary>
            Allows access to the internal configuration classes used to configure the logging application block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingOptions">
            <summary>
            Returns a fluent interface that can be used to configure global logging application block settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingSettings">
            <summary>
            Returns the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationExtension.LoggingSettings"/> that are being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterLogEnabled">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/> instance.
            </summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterLogEnabled.Enable">
            <summary>
            Specifies that all logging should be enabled. <br/>
            The default for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/> is that all logging is disabled.
            </summary>
            <returns>Fluent interface used to further configure the logging application block.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnCategory">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instance.
            </summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnCategory.AllowAllCategoriesExcept(System.String[])">
            <summary>
            Specifies that logging is enabled for the specified categories.<br/>
            Disabled for all other categories.
            </summary>
            <param name="categories">The categories for which logging should be enabled.</param>
            <returns>Fluent interface for further configuring logging settings.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnCategory.DenyAllCategoriesExcept(System.String[])">
            <summary>
            Specifies that logging is disabled for the specified categories.<br/>
            Enabled for all other categories.
            </summary>
            <param name="categories">The categories for which logging should be disabled.</param>
            <returns>Fluent interface for further configuring logging settings.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnPriority">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> instance.
            </summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnPriority.StartingWithPriority(System.Int32)">
            <summary>
            Specifies that log messages with a priority below <paramref name="minimumPriority"/> should not be logged.
            </summary>
            <param name="minimumPriority">The minimum priority for log messages to pass this filter</param>
            <returns>Fluent interface to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> instance.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationFilterOnPriority.UpToPriority(System.Int32)">
            <summary>
            Specifies that log messages with a priority above <paramref name="maximumPriority"/> should not be logged.
            </summary>
            <param name="maximumPriority">The maximum priority for log messages to pass this filter</param>
            <returns>Fluent interface to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> instance.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions">
            <summary>
            Fluent interface that allows global logging settings to be configured.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DisableTracing">
            <summary>
            Disables tracing in the configuration schema. <br/>
            Tracing is enabled by deault.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DoNotRevertImpersonation">
            <summary>
            Disables temporarily reverting impersonation when logging. <br/>
            Impersonation is temporarily reverted by default.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions.DoNotLogWarningsWhenNoCategoryExists">
            <summary>
            Specifies that no warnings should be logged for non-existant categories. <br/>
            Warnings are logged for non-existant categories by default.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo">
            <summary>
            Fluent interface that allows tracelisteners to be configured.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo.SharedListenerNamed(System.String)">
            <summary>
            Creates a reference to an existing Trace Listener with a specific name.
            </summary>
            <param name="listenerName">The name of the Trace Listener a reference should be made for.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToCustomTraceListener">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToCustomTraceListener.FormatWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.<br/>
            </summary>
            <param name="formatBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> used to create an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter"/> .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToCustomTraceListener.FormatWithSharedFormatter(System.String)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.<br/>
            </summary>
            <param name="formatterName">The name of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> configured elsewhere in this section.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToCustomTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToCustomTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToCustomTraceListener.UsingInitData(System.String)">
            <summary>
            Specifies the intialization data passed to the custom trace listener type.
            </summary>
            <param name="initData">The intialization data.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.UsingSmtpServer(System.String)">
            <summary>
            Specifies the smtp server this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> uses to send email.<br/>
            The default smtp server is 127.0.0.1.
            </summary>
            <param name="smtpServer">The smtp server used to send email.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.UsingSmtpServerPort(System.Int32)">
            <summary>
            Specifies the port on the smtp server used by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> to send email.<br/>
            The default smtp server port is 25.
            </summary>
            <param name="smtpServerPort">The smtp server port used to send email.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.To(System.String)">
            <summary>
            Specifies the email address of the recipient used by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> to send email to.<br/>
            </summary>
            <param name="toEmailAddress">The email address of the email recipient.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.From(System.String)">
            <summary>
            Specifies the email address of the recipient used by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> to send email from.<br/>
            </summary>
            <param name="fromEmailAddress">The email address used to send email from.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.WithSubjectStart(System.String)">
            <summary>
            Specifies the prefix of the subject set on emails send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.<br/>
            </summary>
            <param name="subjectLineStart">The prefix used for subjects on emails.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.WithSubjectEnd(System.String)">
            <summary>
            Specifies the postfix of the subject set on emails send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.<br/>
            </summary>
            <param name="subjectLineEnd">The postfix used for subjects on emails.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.FormatWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder)">
            <summary>
            Specifies the formatter used to format email messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.<br/>
            </summary>
            <param name="formatBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> used to create an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter"/> .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.FormatWithSharedFormatter(System.String)">
            <summary>
            Specifies the formatter used to format email messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.<br/>
            </summary>
            <param name="formatterName">The name of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> configured elsewhere in this section.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.UseSSL(System.Boolean)">
            <summary>
            Specifies if the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> should use SSL when connecting to the mail server.
            </summary>
            <param name="useSSL">true to use SSL to connect, false to use unsecured connection.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.Unauthenticated">
            <summary>
            Do not authenticate when logging into the mail server.
            </summary>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.WithWindowsCredentials">
            <summary>
            Send the current process Windows credentials when logging into the mail server.
            </summary>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEmailTraceListener.WithUserNameAndPassword(System.String,System.String)">
            <summary>
            Authenticate against the mail server with this user name and password.
            </summary>
            <param name="userName">User name to send to mail server.</param>
            <param name="password">Password to send to mail server.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener.ToLog(System.String)">
            <summary>
            Specifies the event log that should be used to send messages to by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.<br/>
            </summary>
            <param name="logName">The event log that should be used to send messages to.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener.ToMachine(System.String)">
            <summary>
            Specifies the machine that should be used to send messages to by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.<br/>
            The default machine is '.'.
            </summary>
            <param name="machineName">The machine that should be used to send messages to.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener.UsingEventLogSource(System.String)">
            <summary>
            Specifies the source that should be used when sending messages by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.<br/>
            The default source is 'Enterprise Library Logging'.
            </summary>
            <param name="source">The source that should be used when sending messages.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener.FormatWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.<br/>
            </summary>
            <param name="formatBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> used to create an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter"/> .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener.FormatWithSharedFormatter(System.String)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.<br/>
            </summary>
            <param name="formatterName">The name of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> configured elsewhere in this section.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToEventLogTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension">
            <summary>
            Allows access to the configuration classes used to configure <see cref="T:System.Diagnostics.TraceListener"/> instances.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension.LoggingCategoryContd">
            <summary>
            Returns an interface that can be used to configure a logging category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension.CurrentTraceSource">
            <summary>
            Returns the logging category configuration currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener.ToFile(System.String)">
            <summary>
            Specifies the file name that should be used to send messages to by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.<br/>
            The default file name is 'trace.log'.
            </summary>
            <param name="filename">The file name that should be used to send message to.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener.WithFooter(System.String)">
            <summary>
            Specifies a footer for messages that are send to this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.<br/>
            </summary>
            <param name="footer">The footer that should be used when sending messages.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener.WithHeader(System.String)">
            <summary>
            Specifies a header for messages that are send to this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.<br/>
            </summary>
            <param name="header">The header that should be used when sending messages.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener.FormatWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.<br/>
            </summary>
            <param name="formatBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> used to create an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter"/> .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener.FormatWithSharedFormatter(System.String)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.<br/>
            </summary>
            <param name="formatterName">The name of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> configured elsewhere in this section.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToFlatFileTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.WithTransactionType(System.Messaging.MessageQueueTransactionType)">
            <summary>
            Specifies the <see cref="T:System.Messaging.MessageQueueTransactionType"/> that should be used when sending messages by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.<br/>
            The default is <see cref="F:System.Messaging.Message.InfiniteTimeout"/>.
            </summary>
            <param name="TransactionType">The <see cref="T:System.Messaging.MessageQueueTransactionType"/> that should be used.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.SetTimeToReachQueue(System.TimeSpan)">
            <summary>
            Specifies the maximum time for messages to reach the queue for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.<br/>
            The default is <see cref="F:System.Messaging.Message.InfiniteTimeout"/>.
            </summary>
            <param name="maximumTimeToReachQueue">The maximum time for messages to reach the queue.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.SetTimeToBeReceived(System.TimeSpan)">
            <summary>
            Specifies the maximum time to be received for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>. <br/>
            The default is 
            </summary>
            <param name="maximumTimeToBeReceived">The maximum time to be received.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.AsRecoverable">
             <summary>
            
             </summary>
             <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
             <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
             <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.UseQueue(System.String)">
            <summary>
            Specifies the queue that should be used by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.
            </summary>
            <param name="queuePath">The queue path that should be used.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.UseDeadLetterQueue">
            <summary>
            TODOC: review
            </summary>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.UseEncryption">
            <summary>
            Specifies that messages send to Msmq by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/> should be encrypted.
            </summary>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.UseAuthentication">
            <summary>
            Specifies that authentication should be used when sending messages to Msmq by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.
            </summary>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.FormatWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.<br/>
            </summary>
            <param name="formatBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> used to create an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter"/> .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.FormatWithSharedFormatter(System.String)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.<br/>
            </summary>
            <param name="formatterName">The name of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> configured elsewhere in this section.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToMsmqTraceListener.Prioritize(System.Messaging.MessagePriority)">
            <summary>
            Specifies the <see cref="T:System.Messaging.MessagePriority"/> that will be used to send messages to msmq by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.<br/>
            The default priority is <see cref="F:System.Messaging.MessagePriority.Normal"/>
            </summary>
            <param name="priority">The <see cref="T:System.Messaging.MessagePriority"/> that will be used to send messages to msmq.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
            <seealso cref="T:System.Messaging.MessagePriority"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.RollEvery(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval)">
            <summary>
            Specifies the time interval used for rolling of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="interval">The time interval used for rolling.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.WhenRollFileExists(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior)">
            <summary>
            Specifies the behavior that should be used when a file already exists.<br/>
            </summary>
            <param name="behavior">The behavior that should be used when a file already exists.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.RollAfterSize(System.Int32)">
            <summary>
            Specifies the threshold in file size used for rolling of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="rollSizeInKB">The threshold in file size used for rolling.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.UseTimeStampPattern(System.String)">
            <summary>
            Specifies the timestamp pattern used to create an archived file by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="timeStampPattern">The timestamp pattern used to create an archived file when logging.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.WithFooter(System.String)">
            <summary>
            Specifies the footer used when logging by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="footer">The footer used by logging.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.WithHeader(System.String)">
            <summary>
            Specifies the header used when logging by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="header">The header used by logging.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.ToFile(System.String)">
            <summary>
            Specifies the filename used to log to by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            The default is rolling.log.
            </summary>
            <param name="filename">The filename used to log.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.FormatWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IFormatterBuilder)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="formatBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> used to create an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter"/> .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.FormatWithSharedFormatter(System.String)">
            <summary>
            Specifies the formatter used to format log messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="formatterName">The name of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> configured elsewhere in this section.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToRollingFileTraceListener.CleanUpArchivedFilesWhenMoreThan(System.Int32)">
            <summary>
            Specifies the maximum number of archived files for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.
            </summary>
            <param name="maximumArchivedFiles">the maximum number of archived files for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToSystemDiagnosticsTraceListener">
            <summary>
            Fluent interface used to configure a <see cref="T:System.Diagnostics.TraceListener"/> instance.
            </summary>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToSystemDiagnosticsTraceListener.ForTraceListenerType(System.Type)">
            <summary>
            Specifies the type of <see cref="T:System.Diagnostics.TraceListener"/> that should be used to log messages.
            </summary>
            <param name="tracelistenerType">The type of <see cref="T:System.Diagnostics.TraceListener"/> that should be used to log messages.</param>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToSystemDiagnosticsTraceListener.ForTraceListenerType``1">
            <summary>
            Specifies the type of <see cref="T:System.Diagnostics.TraceListener"/> that should be used to log messages.
            </summary>
            <typeparam name="TTraceListener">The type of <see cref="T:System.Diagnostics.TraceListener"/> that should be used to log messages.</typeparam>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToSystemDiagnosticsTraceListener.UsingInitData(System.String)">
            <summary>
            Specifies the initialization data, which, when specified will be passed to the <see cref="T:System.Diagnostics.TraceListener"/>'s contructor.<br/>
            </summary>
            <param name="initData">The <see cref="T:System.String"/> used as initizalition data.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>. </returns>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToSystemDiagnosticsTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>. </returns>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToSystemDiagnosticsTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:System.Diagnostics.TraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>. </returns>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToWmiTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToWmiTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToWmiTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToXmlTraceListener">
            <summary>
            Fluent interface used to specify settings on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToXmlTraceListener.ToFile(System.String)">
            <summary>
            Specifies the filename used to log to by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>.<br/>
            The default is trace-xml.log.
            </summary>
            <param name="filename">The filename used to log.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToXmlTraceListener.Filter(System.Diagnostics.SourceLevels)">
            <summary>
            Specifies the <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>.
            </summary>
            <param name="sourceLevel">The <see cref="T:System.Diagnostics.SourceLevels"/> that should be used to filter trace output .</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToXmlTraceListener.WithTraceOptions(System.Diagnostics.TraceOptions)">
            <summary>
            Specifies which options, or elements, should be included in messages send by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>.<br/>
            </summary>
            <param name="traceOptions">The options that should be included in the trace output.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>
            <seealso cref="T:System.Diagnostics.TraceOptions"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources">
            <summary>
            Fluent interface used to configure pre defined logging categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources.LoggingErrorsAndWarningsCategory">
            <summary>
            Returns an interface to configure the category source used for internal errors and warnings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources.UnprocessedCategory">
            <summary>
            Returns an interface to configure the category source used to log messages that could not be processed
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSpecialSources.AllEventsCategory">
            <summary>
            Returns an interface to configure the category source used to log all events.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationStart">
            <summary>
            Fluent interface that allows global logging settings to be configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationStart.WithOptions">
            <summary>
            Returns an fluent interface that can be used to further configure logging settings.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ITextFormatterBuilder">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ITextFormatterBuilder.UsingTemplate(System.String)">
            <summary>
            
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationContd)">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension.LoggingSettings">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.LoggingConfigurationExtension.LoggingOptions">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension">
            <summary>
            Base Class for extension points that configure Trace Listeners within Category Sources.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension"/>.
            </summary>
            <param name="context">The fluent interface extesion used to configure Trace Listeners. <br/>
            Must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendToExtension"/>.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.AddTraceListenerToSettingsAndCategory(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> instance to the logging settings and adds a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData"/> to the current Category Source.
            </summary>
            <param name="traceListenerData">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> that sould be added to configuration.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.LoggingSettings">
            <summary>
            The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.LoggingSettings"/> Configuration Section that is currently being build.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.SendToTraceListenerExtension.CurrentTraceSource">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> Configuration Section that is currently being build.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.TextFormatterBuilder">
            <summary>
            Builder class used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.TextFormatterBuilder.UsingTemplate(System.String)">
            <summary>
            Specifies the text template that should be used when formatting a log message.
            </summary>
            <param name="template">The text template that should be used when formatting a log message.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.TextFormatterBuilder.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.TextFormatterBuilder.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.TextFormatterBuilder.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCacheStore">
            <summary>
            Fluent interface that is used to configure <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCacheStore.SetAsDefault">
            <summary>
            Specifies this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> will be used as the default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCacheStore.WithOptions">
            <summary>
            Returns a fluent interface to further configure this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCacheStoreOptions">
            <summary>
            Fluent interface that is further configure <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCacheStoreOptions.AbsoluteExpiration(System.TimeSpan)">
            <summary>
            Specified the absolute expiration for security information added to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>. 
            </summary>
            <param name="timeSpan">The absolute expiration for security information added to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCacheStoreOptions.SlidingExpiration(System.TimeSpan)">
            <summary>
            Specified the sliding expiration for security information added to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>. 
            </summary>
            <param name="timeSpan">The sliding expiration for security information added to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCacheStoreOptions.UseSharedCacheManager(System.String)">
            <summary>
            Specifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/> instance that should be used to store security information.
            </summary>
            <param name="cacheManagerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/> instance that should be used to store security information.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ConfigureSecuritySettingsExtension">
            <summary>
            Base class for fluent interface builders that extend the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ConfigureSecuritySettingsExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings)">
            <summary>
            Creates an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ConfigureSecuritySettingsExtension"/> passing the security configuration's fluent interface builder.
            </summary>
            <param name="context">The current security configuration's fluent interface builder.<br/>
            This interface must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettingsExtension"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ConfigureSecuritySettingsExtension.SecuritySettings">
            <summary>
            Returns the current security configuration's <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ConfigureSecuritySettingsExtension.SecuritySettings"/> instance.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettingsExtension">
            <summary>
            Allows access to the underlying configuration classes that are used for the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettingsExtension.SecuritySettings"/> instance being configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettingsExtension.SecuritySettings">
            <summary>
            Returns the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettingsExtension.SecuritySettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IAuthorizeUsingCustomProvider">
            <summary>
            Fluent interface used to configure a custom authorization provider.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IAuthorizeUsingCustomProvider.SetAsDefault">
            <summary>
            Specifies the current custom authorization provider as the default authorization provider instance.
            </summary>
            <returns>Fluent interface that can be used to further configure security settings.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IAuthorizeUsingRuleProvider">
            <summary>
            Fluent interface used to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IAuthorizeUsingRuleProvider.SetAsDefault">
            <summary>
            Specifies this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/> instance as the default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IAuthorizeUsingRuleProvider.SpecifyRule(System.String,System.String)">
            <summary>
            Adds a named rule to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>'s configuration.
            </summary>
            <param name="ruleName">The name of the rule.</param>
            <param name="ruleExpression">The expression that makes up the authorization rule.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCustomStore">
            <summary>
            Fluent interface used to configure a custom security cache provider.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICacheSecurityInCustomStore.SetAsDefault">
            <summary>
            Specifies the current custom security cache provider as the default security cache provider instance.
            </summary>
            <returns>Fluent interface that can be used to further configure security settings.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings">
            <summary>
            Root fluent interface for building up security configuration.<br/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CachingConfigurationSourceBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of caching configuration settings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CachingConfigurationSourceBuilderExtensions.ConfigureCaching(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to create a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns>A fluent interface to further configure the caching configuration section.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCacheManagerNamedExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration"/> extensions to support configuring <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> intances.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCacheManagerNamedExtension.ForCacheManagerNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> to the caching configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration"/> extensions to support configuring custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String)">
            <summary>
            Adds a custom cache mananger of type <typeparamref name="TCustomCacheManager"/> to the caching configuration.
            </summary>
            <typeparam name="TCustomCacheManager">The concrete type of the custom cache manager.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String,System.Type)">
            <summary>
            Adds a custom cache mananger of type <paramref name="customCacheManagerType"/> to the caching configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <param name="customCacheManagerType">The concrete type of the custom cache manager. This type must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom cache mananger of type <typeparamref name="TCustomCacheManager"/> to the caching configuration.<br/>
            Specifying additional conifguration attributes.
            </summary>
            <typeparam name="TCustomCacheManager">The concrete type of the custom cache manager.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomCacheManager"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom cache mananger of type <paramref name="customCacheManagerType"/> to the caching configuration.<br/>
            Specifying additional conifguration attributes.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <param name="customCacheManagerType">The concrete type of the custom cache manager. This type must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customCacheManagerType"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager"/> extension that allows a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> to be configured.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String)">
            <summary>
            Specifies that current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <typeparam name="TCustomCacheStorageType">The implementation type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String,System.Type)">
            <summary>
            Specifies that current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <param name="customCacheStoreType">The implementation type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Specifies that current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <typeparam name="TCustomCacheStorageType">The implementation type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomCacheStorageType"/> when creating an instance.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Specifies that current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <param name="customCacheStoreType">The implementation type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customCacheStoreType"/> when creating an instance.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInIsolatedStorageExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager"/> extension that allows an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> to be configured.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInIsolatedStorageExtension.StoreInIsolatedStorage(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String)">
            <summary>
            Specifies that current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.
            </summary>
            <param name="backingStoreName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance</param>
            <param name="context">Fluent interface extension point.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter">
            <summary>
            Represents a configuration converter that converts a string to <see cref="T:System.Type"/> based on a fully qualified name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Returns the assembly qualified name for the passed in Type.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Type to convert to.</param>
            <returns>Assembly Qualified Name as a string</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns a type based on the assembly qualified name passed in as data.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly.</param>
            <param name="value">Data to convert.</param>
            <returns>Type of the data</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames">
            <summary>
            A set of string constants listing the names of the configuration
            sections used by the standard set of Entlib blocks.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Cryptography">
            <summary>
            Crypto block section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Data">
            <summary>
            Data Access Application Block custom settings
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.ExceptionHandling">
            <summary>
            Exception Handling Application Block section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Caching">
            <summary>
            Caching Application Block section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Security">
            <summary>
            Security Application Block section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Logging">
            <summary>
            Logging Application Block section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Instrumentation">
            <summary>
            Instrumentation section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.PolicyInjection">
            <summary>
            Policy injection section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Validation">
            <summary>
             Validation section name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.DataRegistrationProviderLocatorType">
            <summary>
            Not actually a section name, this is the type name used to get the
            TypeRegistrationProviderLocatorStrategy used to retrieve information
            for the Data Access Application Block.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.ValidationRegistrationProviderLocatorType">
            <summary>
            Not actually a section name, this is the type name used to get the
            TypeRegistrationProviderLocatorStrategy used to retrieve information
            for the Validation Application Block.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter">
            <summary>
            Represents a configuration converter that converts a byte array to and from a string representation by using base64 encoding.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="falase"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">An <see cref="T:System.Object"/> that represents the converted value. </param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to..</param>
            <returns><b>true</b> if the converter can convert to the specified type, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConstructData(System.String)">
            <summary>
            Returns a deserialized object
            </summary>
            <param name="strVal">The serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData">
            <summary>
            Base class for configuration information stored about a call handler.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of handler entry.</param>
            <param name="handlerType">Type of handler to create.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of handler entry.</param>
            <param name="handlerType">Type of handler to create.</param>
            <param name="order">The order of the handler.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.Order">
            <summary>
            Gets or sets the Order in which the call handler will be executed
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler">
            <summary>
            Implements compositional merge behavior to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementations.<br/>
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>.
            </summary>
            <param name="mainConfigurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance that should be extended.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.Initialize">
            <summary>
            Performs intialization logic for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoRefresh">
            <summary>
            Performs re-intialization logic for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoCheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether the result of a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be deferred to a subordinate source.<br/>
            If the call should be deferred, returns the <see cref="T:System.Configuration.ConfigurationSection"/> intance from the approriate source.<br/>
            If the call should not be deferred returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The resulting <see cref="T:System.Configuration.ConfigurationSection"/> instance.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException">Thrown if a section does not exist in a registered source.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoCheckAddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> should be deferred to a subordinate source.<br/>
            If the call should be deferred, adds the <paramref name="configurationSection"/> to the appropriate source and returns <see langword="true"/>.<br/>
            If the call should not be deferred returns <see langword="true"/>.
            </summary>
            <param name="sectionName">The name of the section that should be added to configuration.</param>
            <param name="configurationSection">The section that should be added to configuration.</param>
            <returns><see langword="true"/> if the section was added in a subordinate source, otherwise <see langword="false"/>.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoCheckRemoveSection(System.String)">
            <summary>
            Checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> should be deferred to a subordinate source.<br/>
            If the call should be deferred, removes the section from the appropriate source and returns <see langword="true"/>.<br/>
            If the call should not be deferred returns <see langword="true"/>.
            </summary>
            <param name="sectionName">The name of the section that should be removed from configuration.</param>
            <returns><see langword="true"/> if the section was removed from a subordinate source, otherwise <see langword="false"/>.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler">
            <summary>
            Event handler called after a configuration has changed.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> class with the section name</para>
            </summary>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.SectionName">
            <summary>
            <para>Gets the section name where the changes occurred.</para>
            </summary>
            <value>
            <para>The section name where the changes occurred.</para>
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute">
            <summary>
            Indicates the configuration object type that is used for the attributed object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class with the configuration object type.
            </summary>
            <param name="configurationType">The <see cref="T:System.Type"/> of the configuration object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class with the configuration object type.
            </summary>
            <param name="typeName">The <see cref="T:System.Type"/> name of the configuration object.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.ConfigurationType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the configuration object.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the configuration object.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.TypeName">
            <summary>
            Gets <see cref="T:System.Type"/> name of the configuration object.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> class with the 
            configuration file and the section name.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that changed.</para>
            </summary>
            <value>
            <para>The configuration file of the data that changed.</para>
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher">
            <summary>
            Watcher for configuration sections in configuration files.
            </summary>
            <remarks>
            This implementation uses a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to watch for changes 
            in the configuration files.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.#ctor(System.String,System.String,System.Boolean,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher"/> class.
            </summary>
            <param name="configurationFilepath">The path for the configuration file to watch.</param>
            <param name="configSource">The identification of the configuration source.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.GetFullFileName(System.String,System.String)">
            <summary>
            Gets the full file name associated to the configuration source.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="configSource">The configuration source to watch.</param>
            <returns>The path to the configuration file to watch. It will be the same as <paramref name="configurationFilepath"/>
            if <paramref name="configSource"/> is empty, or the full path for <paramref name="configSource"/> considered as a 
            file name relative to the main configuration file.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.Watcher">
            <summary>
            Gets the watcher over the serialization medium.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner">
            <summary>
            Clones a <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <remarks>
            This will perform a clone of a <see cref="T:System.Configuration.ConfigurationSection"/> by evaluating each element in
            the <see cref="P:System.Configuration.ElementInformation.Properties"/>.  If these properties are themselves <see cref="T:System.Configuration.ConfigurationElement"/> they will 
            be cloned as well.
            
            As <see cref="T:System.Configuration.ConfigurationElementCollection"/> items do not expose the ability to add and remove, any configuration collections
            must implement <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> to be cloned.  If they do not implement this, they will be skipped
            during cloning. The enterprise library collections implement this interface and the cloner will properly handle the cloning 
            of <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> and <see cref="T:System.Configuration.KeyValueConfigurationCollection"/> with an internal wrapper that 
            implements <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> for these collections.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner.Clone(System.Configuration.ConfigurationSection)">
            <summary>
             Clones a <see cref="T:System.Configuration.ConfigurationSection"/>
            </summary>
            <param name="section">The <see cref="T:System.Configuration.ConfigurationSection"/> to clone.</param>
            <returns>A new, cloned <see cref="T:System.Configuration.ConfigurationSection"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner.CloneElement(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement)">
            <summary>
            
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder">
            <summary>
            Entry point that is used for programatically building up a configution source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.AddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the builder.
            </summary>
            <param name="sectionName">Name of section to add.</param>
            <param name="configurationSection">Configuration section to add.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.Contains(System.String)">
            <summary>
            Determines if a section name is contained in the builder.
            </summary>
            <param name="sectionName"></param>
            <returns>True if contained in the builder, false otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.Get(System.String)">
            <summary>
            Returns a configuration section with the given name, if present in the builder.
            </summary>
            <param name="sectionName">Name of section to return.</param>
            <returns>A valid configuration section or null.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.Get``1(System.String)">
            <summary>
             Returns a configuration section of type <typeparamref name="T"/>, if present in the builder.
            </summary>
            <param name="sectionName">Section name to retrieve</param>
            <typeparam name="T"><see cref="T:System.Configuration.ConfigurationSection"/> type to return.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.UpdateConfigurationWithReplace(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Updates a configuration source replacing any existing sections with those 
            built up with the builder.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.ToString">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder">
            <summary>
            Defines a configuration source builder.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.AddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the builder.
            </summary>
            <param name="sectionName">Name of section to add.</param>
            <param name="section">Configuration section to add.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.Contains(System.String)">
            <summary>
            Determines if a section name is contained in the builder.
            </summary>
            <param name="sectionName"></param>
            <returns>True if contained in the builder, false otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.Get(System.String)">
            <summary>
            Returns a configuration section with the given name, if present in the builder.
            </summary>
            <param name="sectionName">Name of section to return.</param>
            <returns>A valid configuration section or null.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.Get``1(System.String)">
            <summary>
             Returns a configuration section of type <typeparamref name="T"/>, if present in the builder.
            </summary>
            <param name="sectionName">Section name to retrieve</param>
            <typeparam name="T"><see cref="T:System.Configuration.ConfigurationSection"/> type to return.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.UpdateConfigurationWithReplace(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Updates a configuration source replacing any existing sections with those 
            built up with the builder.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs">
            <summary>
            Event arguments describing which sections have changed in a configuration source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs"/> class.
            </summary>
            <param name="configurationSource">Configuration source that changed.</param>
            <param name="changedSectionNames">Sequence of the section names in <paramref name="configurationSource"/>
            that have changed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs"/> class.
            </summary>
            <param name="configurationSource">Configuration source that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object that has been configured with the
            contents of <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Sequence of the section names in <paramref name="configurationSource"/>
            that have changed.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.ConfigurationSource">
            <summary>
            The configuration source that has changed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.Container">
            <summary>
            The container that has been configured with the new
            configuration.
            </summary>
            <remarks>If this event is received directly from a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> this property will
            be null. Otherwise it will reference a valid container
            that has been configured with the contents of the updated
            configuration source.</remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.ChangedSectionNames">
            <summary>
            The set of section names that have changed.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
            <param name="type">The type for the represented <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.CreateDesignSource(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource)">
            <summary>
             Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> configured based on this configuration element.
            </summary>
            <returns>Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> or null if this source does not have design-time support.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException">
            <summary>
            Exception class for exceptions that occur when reading configuration metadata from a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="message">A message that describes why this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="message">A message that describes why this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
            <param name="innerException">The inner exception that caused this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception to be thrown.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.String,System.Exception,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="message">A message that describes why this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
            <param name="innerException">The inner exception that caused this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception to be thrown.</param>
            <param name="filename">The path to the configuration file that caused this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception to be thrown.</param>
            <param name="line">The line number within the configuration file at which this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="info">The object that holds the information to be serialized.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory">
            <summary>
            Contains factory methods to create configuration sources.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create(System.String)">
            <summary>
            Creates a new configuration sources based on the configuration information from the application's default
            configuration file.
            </summary>
            <param name="name">The name for the desired configuration source.</param>
            <returns>The new configuration source instance described in the configuration file.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when no configuration information is found for name <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create">
            <summary>
            Creates a new configuration sources based on the default configuration information from the 
            application's default configuration file.
            </summary>
            <returns>The new configuration source instance described as the default in the configuration file,
            or a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> if the is no configuration sources configuration.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">when there is a configuration section but it does not define
            a default configurtion source, or when the configuration for the defined default configuration source is not found.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler">
            <summary>
            Implements common behavior for classes that add extended functionality to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementations.<br/>
            This class can create subordinate sources based on the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> configuration and propagates change events 
            From these sources to the main source.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/> passing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementation
            That contains the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> configuration.
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementation that should be extended.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.CheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior and returns the modified <see cref="T:System.Configuration.ConfigurationSection"/> intance.<br/>
            If the call should not be extended returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The resulting <see cref="T:System.Configuration.ConfigurationSection"/> instance.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoCheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            When overridden in a derived class, checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior and returns the modified <see cref="T:System.Configuration.ConfigurationSection"/> intance.<br/>
            If the call should not be extended returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> instance passed as <paramref name="configurationSection"/>.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.CheckAddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be stored in configuration.</param>
            <param name="configurationSection">The section that should be stored in configuration.</param>
            <returns><see langword="true"/> if the call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> was handled by the extension.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoCheckAddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            When overridden in a derived class, checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be stored in configuration.</param>
            <param name="configurationSection">The section that should be stored in configuration.</param>
            <returns><see langword="false"/></returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.CheckRemoveSection(System.String)">
            <summary>
            Checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be removed from configuration.</param>
            <returns><see langword="true"/> if the call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> was handled by the extension.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoCheckRemoveSection(System.String)">
            <summary>
            When overridden in a derived class, checks whether a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be removed from configuration.</param>
            <returns><see langword="false"/></returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.Initialize">
            <summary>
            Performs intialization logic for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.Refresh">
            <summary>
            Performs re-intialization logic for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoRefresh">
            <summary>
            Perform required refresh actions as needed when source changes.
            </summary>
            <returns>Sequence of changed sections</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoConfigurationSourceChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Raises the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSectionChanged"/> event.
            </summary>
            <param name="affectedSections">The names of the sections that are changed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoConfigurationSectionChanged(System.String)">
            <summary>
            Raises the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSectionChanged"/> event.
            </summary>
            <param name="sectionName">The name of the section that was changed.</param>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSectionChanged">
            <summary>
            Indicate that a mapped section from one of the subordinate <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>'s was changed.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSourceChanged">
            <summary>
            Indicate a subordinate <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>'s was changed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.AddCustomSubordinateSource(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Adds a subordinate <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>.
            This <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> will not be refreshed or disposed.
            </summary>
            <param name="sourceName">The name under which the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> will be added.</param>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that will be added.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.GetSubordinateSource(System.String)">
            <summary>
            Returns a subordinate <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> with the specified name.<br/>
            Throws <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> if the source was not found.
            </summary>
            <param name="sourceName">The name of the source that should be returned.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.EnsurePropagatingSectionChangeEvents(System.String,System.String)">
            <summary>
            Ensures <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSourceChanged"/> events are raised for 
            Changes in a subordinate section.
            </summary>
            <param name="sourceName">The name of the subordinate configuration source that contains the section.</param>
            <param name="sectionName">The name of the section events should be propagated for.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.StopPropagatingSectionChangeEvents(System.String)">
            <summary>
            Stops raising <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSourceChanged"/> events for 
            Changes in a subordinate section.
            </summary>
            <param name="sectionName">The name of the section events are propagated for.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.Dispose">
            <summary>
            Releases resources managed by this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/> instance.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">
            <summary>
            Configuration section for the configuration sources.
            </summary>
            <remarks>
            This configuration must reside in the application's default configuration file.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SectionName">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.GetConfigurationSourceSection">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> from the application's default configuration file.
            </summary>
            <returns>The section from the configuration file, or <see langword="null"/> (<b>Nothing</b> in Visual Basic) if the section is not present in the configuration file.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SelectedSource">
            <summary>
            Gets or sets the name for the default configuration source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.ParentSource">
            <summary>
            Gets or sets the name for the parent configuration source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.Sources">
            <summary>
            Gets the collection of defined configuration sources.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.RedirectedSections">
            <summary>
            Gets the collection of redirected sections.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher">
            <summary>
            Reacts to changes on the medium on which a set of configuration sections are serialized.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.#ctor(System.String,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher"/> class.
            </summary>
            <param name="configSource">The identification of the medium.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.ConfigSource">
            <summary>
            Gets or sets the identification of the medium where the watched set of configuration sections is stored.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.WatchedSections">
            <summary>
            Gets or sets the collection of watched sections.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StartWatching">
            <summary>
            Starts watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StopWatching">
            <summary>
            Stops watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.Watcher">
            <summary>
            Gets the watcher over the serialization medium.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator">
            <summary>
            Base class that manages the logic for tracking configuration source changes and
            reconfiguring the container, and raising all the appropriate events.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.ContainerReconfiguring">
            <summary>
            The event raised when this container must be reconfigured.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.Dispose">
            <summary>
            Deregister for change notification on the configuration source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.ChangeEventSource">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/> implementation that should
            be registered with the container. This object will be used to signal interested
            objects that the container has completed reconfiguration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.RegisterAll(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            Consume the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects and
            configure the associated container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.RegisterAllCore(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            When overridden in a derived class, this method should perform the actual registration with the container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.RegisterUpdates(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration})">
            <summary>
            When overridden in a derived class, this method should reconfigure the container
            with the provided <paramref name="updatedRegistrations"/>.
            </summary>
            <param name="updatedRegistrations">The new type registrations to apply to the container.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.GetLocator">
            <summary>
            When overridden in a derived class, this method should return an implementation
            of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that wraps the actual container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that objects can use to re-resolve
            dependencies after the container has been reconfigured.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.OnConfigurationSourceChanged(System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.ContainerReconfiguring"/> event in response to a configuration source change.
            </summary>
            <param name="sender">Source of the event - the configuraton source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> implementation that looks up
            a provider by looking for the named configuration section in the given <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            If found, tries to cast the config section to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.#ctor(System.String)">
            <summary>
            Construct an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator"/> that will
            look for the given <paramref name="sectionName"/>.
            </summary>
            <param name="sectionName">Section name in configuration to look for.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Construct an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator"/> that
            will look for the given <paramref name="sectionName"/>. It also
            registers for the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource.ContainerReconfiguring"/>
            event, and will request updated type registrations from the section
            at that time.
            </summary>
            <param name="sectionName">Section name in configuration to look for.</param>
            <param name="reconfiguringEventSource">Event source to signal when reconfiguration is needed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that can be configured through a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory.CreateProvider">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that contains all the default registration
            providers, ignoring any configuration section.
            </summary>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that will return all registrations.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory.CreateProvider(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that contains all the default registration
            providers, honoring any configuration overrides of locators.
            </summary>
            <param name="configurationSource">The configuration source to use when creating <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/>s</param>
            <param name="reconfiguringEventSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource"/> responsible for raising container reconfiguration events.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that will return all registrations.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory.CreateTypeRegistrationsProviderLocators(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            public for unittesting purposes.
            </summary>
            <param name="configurationSource"></param>
            <param name="reconfiguringEventSource"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource">
            <summary>
            An object that can be injected into various entlib objects
            that supplies events that indicate when the current configuration
            source has changed. This provides some isolation from the actual
            configuration source.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged">
            <summary>
            Event raised when the underlying configuration source has changed
            any section.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.ISourceChangeEventSource`1">
            <summary>
            A helper interface used as the return type of the GetSection method.
            </summary>
            <typeparam name="TSection"></typeparam>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.ISourceChangeEventSource`1.SectionChanged">
            <summary>
            The event raised when the section of type TSection is
            changed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.GetSection``1">
            <summary>
            Used to get an object that lets you register a change handler for a
            particular configuration section.
            </summary>
            <typeparam name="TSection">Type of the configuration section to register against.</typeparam>
            <returns>The object that implements the SectionChanged event.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.OnSourceChanged(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Utility function to raise the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged"/> event.
            </summary>
            <param name="configurationSource">Configuration source that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object that has been configured with the
            contents of <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Sequence of the section names in <paramref name="configurationSource"/>
            that have changed.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl">
            <summary>
            The primary implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl.GetSection``1">
            <summary>
            Used to get an object that lets you register a change handler for a
            particular configuration section.
            </summary>
            <typeparam name="TSection">Type of the configuration section to register against.</typeparam>
            <returns>The object that implements the SectionChanged event.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl.ConfigurationSourceChanged(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to raise the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged"/> event,
            supplying the appropriate event args.
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> which has been configured with the
            contents of the <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Section names in the <paramref name="configurationSource"/>
            that have changed, as reported by the configuration source.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl.ConfigurationSourceChanged(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.String[])">
            <summary>
            Used to raise the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged"/> event,
            and the associated section changed events.
            </summary>
            <remarks>This overload is primarily provided for test convenience.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> which has been configured with the
            contents of the <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Section names in the <paramref name="configurationSource"/>
            that have changed, as reported by the configuration source.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue">
            <summary>
            Represents an injected parameter value that can be determined at the time of container configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a value parameter with the specified expression to be evaluated when providing the value parameter.
            </summary>
            <param name="expression">The expression representing the value to provide to the parameter.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue.Value">
            <summary>
            The parameter value to inject.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container">
            <summary>
            A static marker class to denote types constructed by the container when registering a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.Resolved``1">
            <summary>
            Indicates a type to be resolved from a container.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <returns>The type resolved</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.Resolved``1(System.String)">
            <summary>
            Indicates a type to be resolved by name from a container.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <param name="name">The name to use when resolving the type.</param>
            <returns>The type resolved.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.ResolvedIfNotNull``1(System.String)">
            <summary>
            Indicates a type to be resolved by name from a container, if the name is not null.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <param name="name">The name to use when resolving the type.</param>
            <returns>The type resolved.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.ResolvedEnumerable``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Indicates an enumberable set to be resolved from a container using the names supplied
            in <paramref name="names"/>.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <param name="names">The set of names to use when resolving from the container.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1">
            <summary>
            Class that can be used as a base class for instance factories.
            </summary>
            <remarks>
            This class is used to create instances of types compatible with <typeparamref name="T"/> described 
            by a configuration source.
            </remarks>
            <typeparam name="T">Type of instance to create</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1"/> that resolves objects
            using the supplied <paramref name="container"/>.
            </summary>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to use to resolve objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1"/>. A container will be
            constructed under the hood and be initialized with the information in <paramref name="configurationSource"/>.
            </summary>
            <param name="configurationSource">Configuration information.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.#ctor">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1"/> that resolves objects
            through the Entlib default container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.CreateDefault">
            <summary>
            Returns a new instance of <typeparamref name="T"/> based on the default instance configuration.
            </summary>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.Create(System.String)">
            <summary>
            Returns an new instance of <typeparamref name="T"/> based on the configuration for <paramref name="name"/>.
            </summary>
            <param name="name">The name of the required instance.</param>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.Dispose">
            <summary>
            Releases resources currently held by this object.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs">
            <summary>
            This class is the event arguments received when a container is being
            reconfigured due to a configuration source change. This class is a
            collecting argument: new type registrations should be added via the
            AddTypeRegistrations method.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs"/> class.
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that changed,
            causing the need to reconfigure the container.</param>
            <param name="changedSectionNames">Sequence of changed section names in 
            <paramref name="configurationSource"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.ConfigurationSource">
            <summary>
            The updated configuration source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.ChangedSectionNames">
            <summary>
            The section names that have changed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.AddTypeRegistrations(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration})">
            <summary>
            Called by event receivers to collect the set of type registrations that
            must be used to update the container.
            </summary>
            <param name="newRegistrations">The new set of type registrations.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter">
            <summary>
            A parameter representing a set of named items to be resolved by the container.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter.Names">
            <summary>
            The set of names to resolve in the container.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter.ElementType">
            <summary>
            Enumeration type
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter">
            <summary>
            Represents a construction parameter resolved through the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter.#ctor(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Initializes the construction parameter from the <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.  This method call expression 
            expected to be respresented through the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container"/> static marker class.
            </summary>
            <remarks>
            
            Given a class Example defined as:
            
            public class Example
            {
                public Example(Argument arg); 
            }
            
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration`1"/> and <see cref="T:System.Linq.Expressions.LambdaExpression"/> for this configuration might appear as follows:
              new TypeRegistration&lt;Example&gt;(() => new Example(Container.Resolved&lt;Argument&gt;("SomeName"));
            
            During construction of the Example class, Argument will be resolved and injected by the container.
            The <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.Resolved``1"/> marker interface is used to represent
            this requirement to a container configurator and is translated to a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/>.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container"/>
            <param name="expression">The method expression representing the type to resolve and named value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter.Name">
            <summary>
            The name to use when resolving the type represented by the method call expression.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator">
            <summary>
            Implement this interface to create an object that can read a set
            of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects representing the current
            Enterprise Library configuration and configure a dependency injection
            container with that information.
            
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator.RegisterAll(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            Consume the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects and
            configure the associated container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource">
            <summary>
            A interface describing objects that raise events when a
            container's type registrations need to updated due to
            a configuration source change.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource.ContainerReconfiguring">
            <summary>
            The event raised when a container must be reconfigured.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty">
            <summary>
            Represents a property injected in a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty.PropertyName">
            <summary>
            Gets the name of the injected property.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty.PropertyValue">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> describing the value injected through the property.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider">
            <summary>
            This interface represents an object that can return configuration information
            used to configure a container to resolve Entlib objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.NullContainerReconfiguringEventSource">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource"/> that does
            nothing. Saves null checking everywhere.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.NullContainerReconfiguringEventSource.ContainerReconfiguring">
            <summary>
            The event raised when the configuration source changes.
            </summary>
            <remarks>With this implementation the event is never raised.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue">
            <summary>
            Represents a strategy to retrieve a value to inject. 
            </summary>
            <remarks>
            These strategies can either represent values known at container configuration time or 
            values that need to be resolved during object construction.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> class with a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression"/>.
            </summary>
            <param name="expression">The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression"/> representing the value to inject.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression">
            <summary>
            Gets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression"/> representing the value to inject.
            </summary>
            <remarks>
            Concrete strategies interpret the expression to provide relevant registration data.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Type">
            <summary>
            Gets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Type"/> of the value to inject.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor">
            <summary>
            This class implements the Visitor pattern over the hierarchy of
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> types. This makes it easier for container
            authors to figure out which type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> they're
            dealing with and centralize processing without manually having to switch
            on the runtime type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.Visit(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue)">
            <summary>
            Main entry point. When this method is called, this class will figure out
            the current runtime type of the passed <paramref name="parameterValue"/>
            and then call the corresponding strongly-typed visit method based on that runtime
            type.
            </summary>
            <param name="parameterValue">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> object to process.</param>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitConstantParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue)"/>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitResolvedParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter)"/>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitEnumerableParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter)"/>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitConstantParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue)">
            <summary>
            The method called when a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue"/> object is visited.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing.</remarks>
            <param name="parameterValue">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue"/> to process.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitResolvedParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter)">
            <summary>
            The method called when a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/> object is visited.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing.</remarks>
            <param name="parameterValue">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/> to process.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitEnumerableParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter)">
            <summary>
            The method called when a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter"/> object is visited.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing.</remarks>
            <param name="parameterValue">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter"/> to process.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitParameterValue(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue)">
            <summary>
            The method called when a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> object is visited and we haven't
            been able to otherwise identify the runtime type as a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue"/>,
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/>, or <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter"/>.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing or do further type checking if you have extended the type hierarchy.</remarks>
            <param name="parameterValue">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> to process.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.RegistrationExpressionBuilder">
            <summary>
             Builds expression used in <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for custom and standard Enterprise Library objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.RegistrationExpressionBuilder.BuildExpression(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
             Builds a <see cref="T:System.Linq.Expressions.LambdaExpression"/> expected for custom Enterprise Library objects based on the supplied type's object
             and provide attributes.
            </summary>
             <remarks>
             The <paramref name="typeToBuild"/> must supply an accessible constructor that takes a single parameter of type <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
             </remarks>
            <param name="typeToBuild">The object type to build the expression around.</param>
            <param name="attributes">Attributes to pass to the constructor of <paramref name="typeToBuild"/></param>
            <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"/> that defines the construction of <paramref name="typeToBuild"/> in a <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Is thrown if the <paramref name="typeToBuild"/> does not provide a proper constructor.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.RegistrationExpressionBuilder.BuildNewExpression(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
             Builds a <see cref="T:System.Linq.Expressions.NewExpression"/> expected for custom Enterprise Library objects based on the supplied type's object
             and provide attributes.
            </summary>
             <remarks>
             The <paramref name="typeToBuild"/> must supply an accessible constructor that takes a single parameter of type <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
             </remarks>
            <param name="typeToBuild">The object type to build the expression around.</param>
            <param name="attributes">Attributes to pass to the constructor of <paramref name="typeToBuild"/></param>
            <returns>A <see cref="T:System.Linq.Expressions.NewExpression"/> that defines the construction of <paramref name="typeToBuild"/> in a <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Is thrown if the <paramref name="typeToBuild"/> does not provide a proper constructor.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> implementation that
            loads a type by name, and returns an instance of that type as the provider.
            </summary>
            <remarks>
            This is primarily used to support the Data Access Application Block's configuration provider, which
            has to pull stuff from several spots. Also, we load by name rather than
            using a type object directly to avoid a compile time dependency from Common on the
            Data assembly.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator"/> that will use the
            type named in <paramref name="typeName"/> as the provider.
            </summary>
            <param name="typeName">type to construct as a provider. This type must have a single argument
            constructor that takes an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> parameter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator"/> that will use the
            type named in <paramref name="typeName"/> as the provider.
            </summary>
            <param name="typeName">type to construct as a provider. This type must have a single argument
            constructor that takes an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> parameter.</param>
            <param name="reconfiguringEventSource">The event source containing events raised when the configuration source is changed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration">
            <summary>
            Represents a container registration entry as a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> and additional metadata.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> class with a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/>
            as the model for injection.
            </summary>
            <param name="expression">The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> representing the injection.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.#ctor(System.Linq.Expressions.LambdaExpression,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> class with a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/>
            as the model for injection.
            </summary>
            <param name="expression">The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> representing the injection.</param>
            <param name="serviceType">The service type to register the implementation against.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ImplementationType">
            <summary>
            Gets the <see cref="T:System.Type"/> for the registration entry.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.NewExpressionBody">
            <summary>
            Returns the expression body representing the creation constructor call.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ServiceType">
            <summary>
            Gets the <see cref="T:System.Type"/> for which the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ImplementationType"/> provides an implementation.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.Name">
            <summary>
            Gets the name under which the entry should be registered to the container.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.IsPublicName">
            <summary>
            Is this registration for a type that is part of a public API? If
            true, configurators should not transform the name in any way. If
            false, this is an internal implementation class that users will not
            be resolving directly, and as such the name can be manipulated safely
            without interfering with the public API.
            </summary>
            <remarks>Some containers have restrictions on the allowed names (for example,
            many require names to be globally unique). Some object names need to be
            left alone (for example, Database or Exception policies) becuase that is
            what the user will use to get those objects. Other names (like for instrumentation
            providers) are internal and can be freely changed by the configurator as
            needed to fit into the container.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.DefaultName(System.Type)">
            <summary>
            Returns the default name for a type that will be returned if no name
            is otherwise specified.
            </summary>
            <param name="serviceType">Type that was registered.</param>
            <returns>Default name that will be used.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.DefaultName``1">
            <summary>
            Returns the default name for a type that will be returned if no name
            is otherwise specified.
            </summary>
            <typeparam name="TServiceType">Type that was registered.</typeparam>
            <returns>Default name that will be used.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression">
            <summary>
            Gets <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> representing the injection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.IsDefault">
            <summary>
            Gets <see langword="true"/> if the registration is to be considered the default for the service type, 
            <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.Lifetime">
            <summary>
            The required lifetime for this service implementation.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ConstructorParameters">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> instances describing values injected through the constructor.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.InjectedProperties">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty"/> instances describing values injected to properties.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration`1">
            <summary>
            Represents a container registration entry as a <see cref="T:System.Linq.Expressions.LambdaExpression"/> and additional metadata for constructing a specific type.
            </summary>
            <typeparam name="T">The service type registered with the container</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Initializes the TypeRegistration with a <see cref="T:System.Linq.Expressions.LambdaExpression"/> for T.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> that providing the construction model for T.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationLifetime">
            <summary>
            A set of values indicating what the lifetime of service implementations
            in the container should be.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationLifetime.Singleton">
            <summary>
            This implementation should be stored by the container and it should return
            the same object for each request.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationLifetime.Transient">
            <summary>
            A new instance should be returned for each request.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider">
            <summary>
            This class encapsulates the logic used to find the type registration providers
            in the current application.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.#ctor">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> instance
            without a name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.Name">
            <summary>
            Every locator has a name associated with it so that it can be added and removed
            from composites. This property returns that name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.CreateDefaultProvider">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that will return all the
            configuration for entlib blocks.
            </summary>
            <returns>The locator.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.CreateDefaultProvider(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that will return all the
            configuration for entlib blocks.
            </summary>
            <param name="configurationSource">Configuration source containing any customizations
            to the locator list.</param>
            <param name="reconfiguringEventSource">Event source notifying of container reconfiguration events.</param>
            <returns>The locator.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that provides a composite
            over a collection of individual <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/>s.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider})">
            <summary>
            Create the composite with the list of locators to use.
            </summary>
            <param name="locators">The locators.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider[])">
            <summary>
            Create the composite with the list of locators to use.
            </summary>
            <param name="locators">The locators.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> specific configurator for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.#ctor(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializer for the configurator.
            </summary>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.RegisterAllCore(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            Consume the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects and
            configure the associated container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.RegisterUpdates(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration})">
            <summary>
            When overridden in a derived class, this method should reconfigure the container
            with the provided <paramref name="updatedRegistrations"/>.
            </summary>
            <param name="updatedRegistrations">The new type registrations to apply to the container.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.GetLocator">
            <summary>
            When overridden in a derived class, this method should return an implementation
            of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that wraps the actual container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that objects can use to re-resolve
            dependencies after the container has been reconfigured.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.Register(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration)">
            <summary>
            Registers the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry with the container.
            </summary>
            <param name="registrationEntry">The type registration entry to add to the container.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData">
            <summary>
            A configuration element that allows you to configure arbitrary
            call handlers that don't otherwise have configuration support.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="type">Type of handler to configure.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="typeName">Name of the handler type to configure.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="typeName">Name of the handler type to configure.</param>
            <param name="handlerOrder">Order of the handler type to configure.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
            <value>Collection of attributes.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Gets the given property value.</param>
            <returns>the requested property's value</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Sets the given property.</param>
            <param name="value">New value for the property.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="sourceElement">Source configuration element</param>
            <param name="parentElement">Parent configuration element</param>
            <param name="saveMode">ConfigurationSaveMode</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="parentElement">Parent element</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
            <returns>True if element has been modified, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2">
            <summary>
            Represents a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object this collection contains.</typeparam>
            <typeparam name="TCustomElementData">The type used for Custom configuration elements in this collection.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Get the configuration object for each <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1">
            <summary>
            Generic helper class for custom provider configuration objects.
            </summary>
            <remarks>
            The helper class encapsulates the logic to manage an unknown set of properties in <see cref="T:System.Configuration.ConfigurationElement"/>s.
            This logic cannot be inherited by the configuration objects because these objects must inherit from the base configuration 
            object type for the hierarchy of providers the configuration object represents.
            </remarks>
            <typeparam name="T">The type of the custom provider configuration object.</typeparam>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.propertiesCollection">
            <summary>
            Collection of managed properties
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> class for a configuration object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleIsModified">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.IsModified"/>.
            </summary>
            <returns><b>true</b> if the managed element has been modified.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleOnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)"/>.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><code>true</code> when an unknown attribute is encountered while deserializing.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleReset(System.Configuration.ConfigurationElement)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)"/>.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleSetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value to the specified attribute and updates the properties collection.
            </summary>
            <param name="key">The key of the attribute to set.</param>
            <param name="value">The value to set for the attribute.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)"/>.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object, or a <see langword="null"/> reference if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Attributes">
            <summary>
            Gets the collection of custom attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.IsKnownPropertyName(System.String)">
            <summary>
            Returns whether the property name is known in advance, i.e. it is not a dynamic property.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns><b>true</b> if the property is known in advance, <b>false</b> otherwise.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AddApplicationSettingsTitle">
            <summary>
              Looks up a localized string similar to Add Application Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AddConfigurationSourcesTitle">
            <summary>
              Looks up a localized string similar to Add Configuration Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AddInstrumentationSettingsTitle">
            <summary>
              Looks up a localized string similar to Add Instrumentation Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AppSettingsSectionMetadataDescription">
            <summary>
              Looks up a localized string similar to Application Settings .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AppSettingsSectionMetadataDisplayName">
            <summary>
              Looks up a localized string similar to Application Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CallHandlerDataOrderDescription">
             <summary>
               Looks up a localized string similar to The position of the handler within the policy handler chain, starting from 1. 
            The default value is zero, which means that there is no explicit order specified for 
            the handler in relation to other handlers in the same handler chain..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CallHandlerDataOrderDisplayName">
            <summary>
              Looks up a localized string similar to Order.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CategoryGeneral">
            <summary>
              Looks up a localized string similar to General.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CategoryLocalization">
            <summary>
              Looks up a localized string similar to Localization.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CategoryName">
            <summary>
              Looks up a localized string similar to (name).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataDescription">
            <summary>
              Looks up a localized string similar to A manageability provider for a configuration element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Configuration Element Manageability Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Configuration Element Manageability Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTargetTypeDescription">
            <summary>
              Looks up a localized string similar to The type that is managed by the manageability provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTargetTypeDisplayName">
            <summary>
              Looks up a localized string similar to Target Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Configuration Element Manageability Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataDescription">
            <summary>
              Looks up a localized string similar to A manageability provider for a configuration section..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Configuration Section Manageability Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataManageabilityProvidersDescription">
             <summary>
               Looks up a localized string similar to A collection of Manageability Providers that the receiver might require to provide 
            manageability to configuration elements..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataManageabilityProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Manageability Providers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Manageability Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Manageability Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementDescription">
            <summary>
              Looks up a localized string similar to The element that represents a configuration source ..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementDisplayName">
            <summary>
              Looks up a localized string similar to An element that contains configurtain information..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Configuration Source Element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Configuration Source Element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionDescription">
            <summary>
              Looks up a localized string similar to Configuration settings that determine the sources of configuration information for an application..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionDisplayName">
            <summary>
              Looks up a localized string similar to Configuration Sources.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionParentSourceDescription">
            <summary>
              Looks up a localized string similar to The name of the Configuration Source containing the section that this Redirected Section will override..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionParentSourceDisplayName">
            <summary>
              Looks up a localized string similar to Parent Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionRedirectedSectionsDescription">
            <summary>
              Looks up a localized string similar to The list of Redirected Sections for this application configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionRedirectedSectionsDisplayName">
            <summary>
              Looks up a localized string similar to Redirected Sections.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSelectedSourceDescription">
            <summary>
              Looks up a localized string similar to The name of the default Configuration Source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSelectedSourceDisplayName">
            <summary>
              Looks up a localized string similar to Selected Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSourcesDescription">
            <summary>
              Looks up a localized string similar to The collection of defined configuration sources..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSourcesDisplayName">
            <summary>
              Looks up a localized string similar to Sources.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataDescription">
            <summary>
              Looks up a localized string similar to A custom implementation of a Call Handler that is added to Enterprise Library..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Call Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementDescription">
             <summary>
               Looks up a localized string similar to A Configuration Source that reads configuration information from a disk file. 
            The file must contain XML data in the standard .NET configuration format..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementDisplayName">
            <summary>
              Looks up a localized string similar to File-based Configuration Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementFilePathDescription">
            <summary>
              Looks up a localized string similar to The full path and name of the configuration file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementFilePathDisplayName">
            <summary>
              Looks up a localized string similar to File Path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementFilePathFilter">
            <summary>
              Looks up a localized string similar to Configuration files (*.config)|*.config|All Files (*.*)|*.*.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementNameDescription">
            <summary>
              Looks up a localized string similar to The name of the File-based Configuration Source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the File-based Configuration Source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionApplicationInstanceNameDescription">
            <summary>
              Looks up a localized string similar to The unique name for the Application Instance to be used by the Instrumentation providers..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionApplicationInstanceNameDisplayName">
            <summary>
              Looks up a localized string similar to Application Instance Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for Instrumentation for the entire application..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionDisplayName">
            <summary>
              Looks up a localized string similar to Instrumentation Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionEventLoggingEnabledDescription">
             <summary>
               Looks up a localized string similar to Specifies if logging to Windows Event Log will take place when instrumented 
            events occur within Enterprise Library..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionEventLoggingEnabledDisplayName">
            <summary>
              Looks up a localized string similar to Event Logging Enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionPerformanceCountersEnabledDescription">
             <summary>
               Looks up a localized string similar to Specifies if the Enterprise Library Performance Counters will be exposed and updated 
            when instrumented events occur within Enterprise Library..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionPerformanceCountersEnabledDisplayName">
            <summary>
              Looks up a localized string similar to Performance Counters Enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationCollectionMetadataDescription">
            <summary>
              Looks up a localized string similar to Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationCollectionMetadataDisplayName">
            <summary>
              Looks up a localized string similar to Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataDescription">
            <summary>
              Looks up a localized string similar to A custom application settings, such as file paths or XML Web service URLs..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataDisplayName">
            <summary>
              Looks up a localized string similar to Setting.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataKeyDescription">
            <summary>
              Looks up a localized string similar to Key.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataKeyDisplayName">
            <summary>
              Looks up a localized string similar to Key.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataValueDescription">
            <summary>
              Looks up a localized string similar to Value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataValueDisplayName">
            <summary>
              Looks up a localized string similar to Value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementApplicationNameDescription">
             <summary>
               Looks up a localized string similar to The name of the application. 
            This used to determine the Registry path for the configuration information. 
            This value is required..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementApplicationNameDisplayName">
            <summary>
              Looks up a localized string similar to Application Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementConfigurationManageabilityProvidersDescription">
            <summary>
              Looks up a localized string similar to The collection of registered types necessary to provide manageability by the configuration source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementConfigurationManageabilityProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Configuration Manageability Providers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementDescription">
             <summary>
               Looks up a localized string similar to A configuration source that integrates with Group Policy to apply domain-wide or 
            local machine policy overrides to provide centralized configuration management capabilities..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementDisplayName">
            <summary>
              Looks up a localized string similar to Manageable Configuration Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementEnableGroupPoliciesDescription">
             <summary>
               Looks up a localized string similar to Specifies if the configuration source will take account of domain-wide or 
            local machine policy overrides configured in the Registry through Group Policy settings..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementEnableGroupPoliciesDisplayName">
            <summary>
              Looks up a localized string similar to Group Policy Enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementFilePathDescription">
            <summary>
              Looks up a localized string similar to The full path and name of the configuration file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementFilePathDisplayName">
            <summary>
              Looks up a localized string similar to File Path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Manageable Configuration Source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Manageable Configuration Source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementDescription">
            <summary>
              Looks up a localized string similar to A configuration element in a collection that is keyed by the name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementDisplayName">
            <summary>
              Looks up a localized string similar to Named Configuration Element.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementNameDescription">
            <summary>
              Looks up a localized string similar to The name used to identify this item..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedElementCollectionDescription">
            <summary>
              Looks up a localized string similar to A collection of Named Configuration elements..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedElementCollectionDisplayName">
            <summary>
              Looks up a localized string similar to Named Element Collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementCollectionDescription">
            <summary>
              Looks up a localized string similar to A collection of Name Type Configuration elements..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementCollectionDisplayName">
            <summary>
              Looks up a localized string similar to Name Type Configuration Element Collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementDescription">
            <summary>
              Looks up a localized string similar to A configuration element in a collection that contains both a type and a name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementDisplayName">
            <summary>
              Looks up a localized string similar to Name Type Configuration Element.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Name Type Configuration Element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Name Type Configuration Element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.PolymorphicConfigurationElementCollectionDescription">
            <summary>
              Looks up a localized string similar to A base class from which all implementations of polymorphic configuration collections derive..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.PolymorphicConfigurationElementCollectionDisplayName">
            <summary>
              Looks up a localized string similar to Polymorphic Configuration Element Collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementDescription">
             <summary>
               Looks up a localized string similar to A redirected section for the application configuration. 
            Each section of the configuration can be loaded from a different configuration source if required. 
            Each Redirected Section configured in this list will override the same entire section in 
            the default Configuration Source..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementDisplayName">
            <summary>
              Looks up a localized string similar to Redirected Section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Redirected Section..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementSourceNameDescription">
             <summary>
               Looks up a localized string similar to The name of the Configuration Source that will handle the redirected section. 
            Must be one of the Configuration Sources defined for the application..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementSourceNameDisplayName">
            <summary>
              Looks up a localized string similar to Configuration Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SerializableConfigurationSectionDescription">
            <summary>
              Looks up a localized string similar to Represents a configuration section that can be serialized and deserialized to XML..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SerializableConfigurationSectionDisplayName">
            <summary>
              Looks up a localized string similar to Serializable Configuration Section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementDescription">
             <summary>
               Looks up a localized string similar to A configuration source that reads configuration data from the default configuration file. 
            Typically this is App.config or Web.config, depending on the application type..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementDisplayName">
            <summary>
              Looks up a localized string similar to System Configuration Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementNameDescription">
            <summary>
              Looks up a localized string similar to The name of the System Configuration Source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the System Configuration Source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementCollectionDescription">
            <summary>
              Looks up a localized string similar to A collection of Type Registration Provider elements..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementCollectionDisplayName">
            <summary>
              Looks up a localized string similar to Type Registration Provider Element Collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementDescription">
            <summary>
              Looks up a localized string similar to A provider for registering types..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementDisplayName">
            <summary>
              Looks up a localized string similar to Type Registration Provider Element.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Type Registration Provider Element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementProviderTypeNameDescription">
            <summary>
              Looks up a localized string similar to The name of the type that implements the Type Registration Provider Element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementProviderTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Provider Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementSectionNameDescription">
            <summary>
              Looks up a localized string similar to The name of the configuration section within the configuration file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementSectionNameDisplayName">
            <summary>
              Looks up a localized string similar to Section Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionDescription">
            <summary>
              Looks up a localized string similar to The section of the configuration that specifies the Type Registration Providers for the application..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionDisplayName">
            <summary>
              Looks up a localized string similar to Type Registration Providers Configuration Section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDescription">
            <summary>
              Looks up a localized string similar to A collection of Type Registration providers..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Type Registration Providers.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute">
            <summary>
            Attribute class used to decorate the design time view model with a Add Application Block command. <br/>
            Add Application Block commands are added to the configuration tools main menu, underneath the 'Blocks' menu item.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute"/> class.
            </summary>
            <param name="sectionName">The name of the configuration section that belongs to the application block that will be added.</param>
            <param name="configurationSectionType">The type of the configuration section that belongs to the application block that will be added.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute.SectionName">
            <summary>
            Gets the name of the configuration section that belongs to the application block that will be added.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute.ConfigurationSectionType">
            <summary>
            Gets the type of the configuration section that belongs to the application block that will be added.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute">
            <summary>
            Attribute used to overwrite the Add Command for providers that depend on the availability of another block (Sattelite Providers).
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute"/> specifying the block dependency by its configuration section name.<br/>
            </summary>
            <param name="sectionName">The name of the configuran section, used to identify the block dependency.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute"/> specifying the block dependency by its configuration section name and will assign the value of a default provider to the added element.<br/>
            </summary>
            <param name="sectionName">The name of the configuran section, used to identify the block dependency.</param>
            <param name="defaultProviderConfigurationType">The configuration type of the element that declares the default proviiders name.</param>
            <param name="defaultProviderConfigurationPropertyName">The property that will be used to determine the name of the default provider.</param>
            <param name="sateliteProviderReferencePropertyName">The property on the created element that will be assigned the name of the default provider.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.SectionName">
            <summary>
            Gets the section name of the block dependency.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.DefaultProviderConfigurationType">
            <summary>
            If a configuration element exists that specifies a default property, gets the configuration type of the declaring element.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.DefaultProviderConfigurationPropertyName">
            <summary>
            If a configuration element exists that specifies a default property, gets the property that contains the name of the default value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.SateliteProviderReferencePropertyName">
            <summary>
            If the provider has a property that should be assigned the name of the default provider, gets the name of the property.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime">
            <summary>
            Container class for types and identifiers used to decorate the appSettings configuration schema with designtime information.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.AppSettingsSectionName">
            <summary>
            Name of appSettings section.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.ViewModelTypeNames">
            <summary>
            Container class for View Model Types used to decorate the appSettings configuration schema with designtime information.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.ViewModelTypeNames.AppSettingsSectionViewModel">
            <summary>
            Type Name of the Section View Model used to display application settings.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.AppSettingsSectionMetadata">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationCollectionMetadata">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationElementMetadata">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationElementMetadata.Key">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationElementMetadata.Value">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute">
            <summary>
            Indicates the base class or interface that must be assignable from the type specified in the property that this attribute decorates.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the  <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified <see cref="T:System.Type"/> object.
            </summary>
            <param name="baseType">
            The <see cref="T:System.Type"/> to filter selections.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the  <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified base <see cref="T:System.Type"/> object and configuration <see cref="T:System.Type"/>.
            </summary>
            <param name="baseType">The base <see cref="T:System.Type"/> to filter.</param>
            <param name="configurationType">The configuration object <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified <see cref="T:System.Type"/> object and <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.TypeSelectorIncludes"/>.
            </summary>
            <param name="baseType">
            The <see cref="T:System.Type"/> to filter selections.
            </param>
            <param name="typeSelectorIncludes">
            One of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.TypeSelectorIncludes"/> values.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes,System.Type)">
            <summary>
            Initializes a new instance of the  <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified base <see cref="T:System.Type"/> object and configuration <see cref="T:System.Type"/>.
            </summary>
            <param name="typeSelectorIncludes">
            One of the <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.typeSelectorIncludes"/> values.
            </param>
            <param name="baseType">The base <see cref="T:System.Type"/> to filter.</param>
            <param name="configurationType">The configuration object <see cref="T:System.Type"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.TypeSelectorIncludes">
            <summary>
            Gets the includes for the type selector.
            </summary>
            <value>
            The includes for the type selector.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.BaseType">
            <summary>
            Gets the <see cref="T:System.Type"/> to filter selections.
            </summary>
            <value>
            The <see cref="T:System.Type"/> to filter selections.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.ConfigurationType">
            <summary>
            Gets the configuration object <see cref="T:System.Type"/>.
            </summary>
            <value>
            The configuration object <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute">
            <summary>
            Attribute class used to associate a <see cref="T:System.Configuration.ConfigurationElement"/> class with an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> implementation.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute"/> class.
            </summary>
            <param name="cloneableConfigurationElementType">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElement"/> class.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute.CloneableConfigurationElementType">
            <summary>
            Gets the type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElement"/> class.
            </summary>
            <value>
            The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElement"/> class.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CollectionEditorTemplateAttribute">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CollectionEditorTemplateAttribute.#ctor(System.String,System.String)">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CollectionEditorTemplateAttribute.ItemTemplate">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CollectionEditorTemplateAttribute.HeaderTemplate">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute">
            <summary>
            Attribute used to decorate a designtime View Model element with an executable command. E.g. a context menu item that allows
            the user to perform an action in the elements context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute"/> class, specifying the Command Model Type.
            </summary>
            <remarks>
            The Command Model Type should derive from the CommandModel class in the Configuration.Design assembly. <br/>
            As this attribute can be applied to the configuration directly and we dont want to force a dependency on the Configuration.Design assembly <br/>
            You can specify the Command Model Type in a loosy coupled fashion.
            </remarks>
            <param name="commandModelTypeName">The fully qualified name of the Command Model Type.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute"/> class, specifying the Command Model Type.
            </summary>
            <remarks>
            The Command Model Type should derive from the CommandModel class in the Configuration.Design assmbly. <br/>
            As this attribute can be applied to the configuration directly and we dont want to force a dependency on the Configuration.Design assembly <br/>
            You can specify the Command Model Type in a loosy coupled fashion.
            </remarks>
            <param name="commandModelType">The Command Model Type.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.TitleResourceName">
            <summary>
            Gets or sets the name of the resource, used to return a localized title that will be shown for this command in the UI (User Interface).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.TitleResourceType">
            <summary>
            Gets or sets the type of the resource, used to return a localized title that will be shown for this command in the UI (User Interface).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.Title">
            <summary>
            Gets the title that will be shown for this command in the UI (User Interface).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.Replace">
            <summary>
            Gets or sets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement"/> options for this command.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandPlacement">
            <summary>
            Gets or sets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandPlacement"/> options for this command.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandModelTypeName">
            <summary>
            Gets or Sets the Command Model Type Name for this command. <br/>
            The Command Model Type will be used at runtime to display and execute the command.<br/>
            Command Model Types should derive from the CommandModel class in the Configuration.Design assembly. 
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandModelType">
            <summary>
            Gets the Command Model Type for this command. <br/>
            The Command Model Type will be used at runtime to display and execute the command.<br/>
            Command Model Types should derive from the CommandModel class in the Configuration.Design assembly. 
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.KeyGesture">
            <summary>
            Defines the keyboard gesture for this command.
            </summary>
            <example>
                command.KeyGesture = "Ctrl+1";
            </example>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is a unique identifier for the attribute.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement">
            <summary>
            Specifies whether a command replaces a default command.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement.DefaultAddCommandReplacement">
            <summary>
            Specifies that the command should be used to replace the default add command.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement.DefaultDeleteCommandReplacement">
            <summary>
            Specifies that the command should be used to replace the default delete command.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement.NoCommand">
            <summary>
            Specifies that the command should not be used to replace any default command.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement">
            <summary>
            Specifies the placement of a command. This can be either a top level menu, e.g.: <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.FileMenu"/> or <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.BlocksMenu"/> or
            a context menu, e.g.: <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextAdd"/>,  <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextCustom"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.FileMenu">
            <summary>
            Specifies placement of the command in the top level file menu.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.BlocksMenu">
            <summary>
            Specifies placement of the command in the top level blocks menu.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.WizardMenu">
            <summary>
            Specifies placement of the command in the top level wizards menu.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextAdd">
            <summary>
            Specifies placement of the command in the contextual add menu for an configuration element.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextCustom">
            <summary>
            Specifies placement of the command in the custom commands menu for an configuration element.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextDelete">
            <summary>
            Specifies placement of the command in the delete commands menu for an configuration element.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime">
            <summary>
            Class that contains common type names and metadata used by the designtime.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames">
            <summary>
            Class that contains common command types used by the designtime.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.WizardCommand">
            <summary>
            Type name of the WizardCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddSatelliteProviderCommand">
            <summary>
            Type name of the AddSatelliteProviderCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddApplicationBlockCommand">
            <summary>
            Type name of the AddApplicationBlockCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddProviderUsingTypePickerCommand">
            <summary>
            Type name of the TypePickingCollectionElementAddCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.ExportAdmTemplateCommand">
            <summary>
            Type name of the ExportAdmTemplateCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.HiddenCommand">
            <summary>
            Type name of the HiddenCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddInstrumentationApplicationBlockCommand">
            <summary>
            Type name of the AddInstrumentationBlockCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes">
            <summary>
            Class that contains common editor types used by the designtime.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.DatePickerEditor">
            <summary>
            Type name of the DatePickerEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.CollectionEditor">
            <summary>
            Type name of the ElementCollectionEditor, declared class in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.UITypeEditor">
            <summary>
            Type name of the UITypeEditor class, declared in the System.Drawing Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.TypeSelector">
            <summary>
            Type name of the TypeSelectionEditor, declared class in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.FilteredFilePath">
            <summary>
            Type name of the FilteredFileNameEditor, declared class in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.FrameworkElement">
            <summary>
            Type name of the FrameworkElement, declared class in the PresentationFramework Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.MultilineText">
            <summary>
            Type name of the MultilineTextEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.PopupTextEditor">
            <summary>
            Type name of the PopupTextEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.Flags">
            <summary>
            Type name of the FlagsEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.RegexTypeEditor">
            <summary>
            Type name of the RegexTypeEditor class, declared in the System.Design Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.ConnectionStringEditor">
            <summary>
            Type name of the ConnectionStringEditor class, declared in the System.Design Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.TemplateEditor">
            <summary>
            Type name of the TemplateEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.OverridesEditor">
            <summary>
            Type name of the IEnvironmentalOverridesEditor interface, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames">
            <summary>
            Class that contains common view model types used by the designtime.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.TypeNameProperty">
            <summary>
            Type name of the TypeNameProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.ConfigurationPropertyViewModel">
            <summary>
            Type name of the ConfigurationProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.SectionViewModel">
            <summary>
            Type name of the SectionViewModel class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.InstrumentationViewModel">
            <summary>
            Type name of the InstrumentationViewModel class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.ManageableConfigurationSourceViewModel">
            <summary>
            Type name of the ManageableConfigurationSourceViewModel class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.CollectionEditorContainedElementProperty">
            <summary>
            Type name of the CollectionEditorContainedElementProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.CollectionEditorContainedElementReferenceProperty">
            <summary>
            Type name of the CollectionEditorContainedElementReferenceProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.RedirectedSectionSourceProperty">
            <summary>
            Type name of the RedirectedSectionSourceProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ConverterTypeNames">
            <summary>
            Class that contains common converter types used by the designtime runtime.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ConverterTypeNames.RedirectedSectionNameConverter">
            <summary>
            Type name of the RedirectedSectionNameConverter class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.MetadataTypes">
            <summary>
            Class that contains common metadata classes used by the designtime.<br/>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.MetadataTypes.RedirectedSectionElementMetadata">
            <summary>This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.MetadataTypes.RedirectedSectionElementMetadata.Name">
            <summary>This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames">
            <summary>
            Class that contains common validation types used by the designtime.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.FileWritableValidator">
            <summary>
            Type name of the FileWritableValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.FileValidator">
            <summary>
            Type name of the FilePathValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.PathExistsValidator">
            <summary>
            Type name of the FilePathExistsValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.RequiredFieldValidator">
            <summary>
            Type name of the RequiredFieldValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.TypeValidator">
            <summary>
            Type name of the TypeValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.SelectedSourceValidator">
            <summary>
            Type name of the SelectedSourceValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.NameValueCollectionValidator">
            <summary>
            Type name of the NameValueCollectionValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType">
            <summary>
            Type names for well known Enterprise Library <see cref="T:System.Configuration.ConfigurationSection"/> elements.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType.LoggingSettings">
            <summary>
            Type name for the LoggingSettings section.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType.DatabaseSettings">
            <summary>
            Type name for the DatabaseSettings section.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType.ExceptionHandlingSettings">
            <summary>
            Type name for the ExceptionHandlingSettings section.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.ViewModelTypeNames">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.ViewModelTypeNames.ConfigurationSourcesSectionViewModel">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.ViewModelTypeNames.ConfigurationSourceSectionViewModel">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.CommandTypeNames">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.CommandTypeNames.AddConfigurationSourcesBlockCommand">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.CommandTypeNames.ConfigurationSourceElementDeleteCommand">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource">
            <summary>
            configuration source to support design-time configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.#ctor(System.String)">
            <summary>
             Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource"/> based on file path.
            </summary>
            <param name="configurationFilePath"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.GetLocalSection(System.String)">
            <summary>
             Retrieves a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
            <returns>The configuration section or null if it does not contain the section.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.AddLocalSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a local section to the configuration source.
            </summary>
            <param name="sectionName"></param>
            <param name="section"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.RemoveLocalSection(System.String)">
            <summary>
             Removes a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.ConfigurationFilePath">
            <summary>
            Gets the path of the configuration file for the configuration source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.CreateDesignSource(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource"/> based on <paramref name="rootSource"/> and <paramref name="filePath"/>.
            </summary>
            <param name="rootSource">The source that was used to open the main conifguration file.</param>
            <param name="filePath">An absolute of relative path to the file to which the source should be created.</param>
            <returns>A new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute">
            <summary>
            Specifies a default value for a configuration property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute"/> class.
            </summary>
            <remarks>
            The default value is a string representation which will be converted using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <param name="bindableDefaultValue">The string representation of the default value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute.BindableDefaultValue">
            <summary>
            Gets the string reprentation of the default value.
            </summary>
            <value>
            The string reprentation of the default value.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute">
            <summary>
             Determines if the corresponding property is read-only at designtime.
            </summary>
            <remarks>
             This attribute is used to mark properties that should be presented as read-only, but underlying code may change the value on.
             <seealso cref="T:System.ComponentModel.ReadOnlyAttribute"/></remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute"/> class.
            </summary>
            <param name="readOnly"><see langword="true"/> if the property should be read-only at designtime.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute.ReadOnly">
            <summary>
             Determines if the property is read-only by design-time.
             Returns <see langword="true" /> if the property is read-only at design-time
             and <see langword="false" /> otherwise.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeTypeAttribute">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeTypeAttribute.#ctor(System.Type,System.Type)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeTypeAttribute.#ctor(System.String,System.String)">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeTypeAttribute.DesignTimeType">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeTypeAttribute.DesignTimeTypeConverter">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute">
            <summary>
            Attribute that instructs the designtime to make the textbox for a property readonly. <br/>
            This property can is used together with an <see cref="T:System.ComponentModel.EditorAttribute"/>, in which the created text box is readonly, 
            though the property can be edited by the editor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute"/>.
            </summary>
            <param name="readonlyText"><see langword="true"/> if the textbox created for this property should be readonly, otherwise <see langword="false"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute.ReadonlyText">
            <summary>
            Returns <see langword="true"/> if the textbox created for this property should be readonly, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute">
            <summary>
            Attribute class used to indicate whether a property can be overwritten per environment.<br/>
            The default behavior is that any property can be overwritten.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute"/> class.
            </summary>
            <param name="canOverride"><see langword="true"/> to specify the property can be overwritten per environment. Otherwise <see langword="false"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.CanOverride">
            <summary>
            <see langword="true"/> if the property can be overwritten per environment. Otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.CustomOverridesPropertyType">
            <summary>
            Specifies a custom property type for the overrides property.<br/>
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.StorageConverterType">
            <summary>
            Specifies a <see cref="T:System.ComponentModel.TypeConverter"/> that should be used to serialize the overriden value to the delta configuration file. <br/>
            This can be used to overwrite a property that doesnt implement <see cref="T:System.IConvertible"/>.  <br/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute">
            <summary>
            Specifies additional metadata for the FilteredFileNameEditor editor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute"/> class with the <see cref="T:System.Type"/> containing the resources and the resource key.
            </summary>
            <param name="resourceType">The <see cref="T:System.Type"/> containing the resources.</param>
            <param name="resourceKey">The resource key.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute.Filter">
            <summary>
            Gets the filter for the dialog.
            </summary>
            <value>
            The filter for the dialog.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute.CheckFileExists">
            <summary>
            Gets or sets whether the Open File Dialog should only allow existing files to be selected.
            </summary>
            <value>
            <see langword="true"/> if the Open File Dialog is used to open existing files. Otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute">
            <summary>
             Indicates that this assembly handles the <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute"/> class.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute.SectionName">
            <summary>
             Name of the section handled by this assembly.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute.ClearOnly">
            <summary>
            Indicates this section should be cleared during save, but there is no 
            direct handler for it.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource">
            <summary>
             Supports Enterprise Library design-time by providing ability to 
             retrieve, add, and remove sections.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource.GetLocalSection(System.String)">
            <summary>
             Retrieves a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
            <returns>The configuration section or null if it does not contain the section.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource.AddLocalSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a local section to the configuration source.
            </summary>
            <param name="sectionName"></param>
            <param name="section"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource.RemoveLocalSection(System.String)">
            <summary>
             Removes a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute">
            <summary>
            Attribute class used to associate a <see cref="T:System.Configuration.ConfigurationElementCollection"/> class with an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> implementation.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute"/> class.
            </summary>
            <param name="mergeableConfigurationCollectionType">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElementCollection"/> class.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute.MergeableConfigurationCollectionType">
            <summary>
            Gets the type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElementCollection"/> class.
            </summary>
            <value>
            The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElementCollection"/> class.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute">
            <summary>
            Attribute class that allows to specify a property that should be used as the Element View Model's name.<br/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute"/> class.
            </summary>
            <param name="propertyName">The reflection name of the property that will be used as the Element View Model's name.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute.PropertyName">
            <summary>
            Gets the reflection name of the property that will be used as the Element View Model's name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute.NamePropertyDisplayFormat">
            <summary>
            Gets the Display Format that will be used to display the name property.<br/>
            The Display Format should be a Format-string with 1 argument:<Br/>
            The token '{0}' will be replaced with the Name Properties value.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.OmitCustomAttributesPropertyAttribute">
            <summary>
            This attribute supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.PromoteCommandsAttribute">
            <summary>
            Attribute class that can be oved to offer a properties add-commands to the containing Element View Model.<br/>
            This can be usefull for properties that contain a collection of providers, of which the Element Collection View Model is not shown in the UI (User Interface).
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute">
            <summary>
            Attribute class used to indicate that the property is a reference to provider. <br/>
            Reference properties will show an editable dropdown that allows the referred element to be selected.<br/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="targetTypeName">The configuration type name of the provider that used as a reference.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="scopeTypeName">The name of a configuration type that contains the references.</param>
            <param name="targetTypeName">The configuration type name of the provider that used as a reference.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="targetType">The configuration type of the provider that used as a reference.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="scopeType">The configuration type that contains the references.</param>
            <param name="targetType">The configuration type of the provider that used as a reference.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.ScopeType">
            <summary>
            Gets the configuration type that contains the references.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.ScopeIsDeclaringElement">
            <summary>
            Gets or sets a boolean indicating whether only providers can be used that are contained in the current Element View Model.
            </summary>
            <value>
            <see langword="true"/> if only providers can be used that are contained in the current Element View Model. Otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.TargetType">
            <summary>
            Gets the configuration type of the provider that used as a reference.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute">
            <summary>
            Registers a class as a metadata body class for another class.
            </summary>
            <remarks>
            When applying metadata attributes to classes, the target class might not always allow itself to be anotated. <br/>
            This attribute can be used to nominate another class to contain the metadata attributes. <br/>
            The metadata type should follow the same structure as the target type and its members cab be decorated with the metadata attributes.<br/>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute"/>.
            </summary>
            <param name="targetType">The type for which this class should contain metadata attributes.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute.TargetType">
            <summary>
            Gets the type for which this class should contain metadata attributes.
            </summary>
            <value>
            The type for which this class should contain metadata attributes.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute">
            <summary>
            Represents a localized <see cref="T:System.ComponentModel.CategoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:System.SRCategoryAttribute"/> class with the <see cref="T:System.Type"/> containing the resources and the resource name.
            </summary>
            <param name="category">The resources string name.</param>
            <param name="resourceType">The <see cref="T:System.Type"/> containing the resource strings.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.ResourceType">
            <summary>
            Gets the type that contains the resources.
            </summary>
            <value>
            The type that contains the resources.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Gets the localized string based on the key.
            </summary>
            <param name="value">The key to the string resources.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.General">
            <summary>
            Returns a localized <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute"/> for the General category.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute">
            <summary>
            A customized version of <see cref="T:System.ComponentModel.DescriptionAttribute"/> that can
            load the string from assembly resources instead of just a hard-wired
            string.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.#ctor">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute"/> where
            the type and name of the resource is set via properties.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute"/> class.
            </summary>
            <param name="resourceType">Type used to locate the assembly containing the resources.</param>
            <param name="resourceName">Name of the entry in the resource table.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.ResourceType">
            <summary>
            A type contained in the assembly we want to get our display name from.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.ResourceName">
            <summary>
            Name of the string resource containing our display name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.Description">
            <summary>
            Gets the description for a property, event, or public void method that takes no arguments stored in this attribute.
            </summary>
            <returns>
            The display name.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute">
            <summary>
            A customized version of <see cref="T:System.ComponentModel.DisplayNameAttribute"/> that can
            load the string from assembly resources instead of just a hard-wired
            string.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.#ctor">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute"/> where
            the type and name of the resource is set via properties.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute"/> class.
            </summary>
            <param name="resourceType">Type used to locate the assembly containing the resources.</param>
            <param name="resourceName">Name of the entry in the resource table.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.ResourceType">
            <summary>
            A type contained in the assembly we want to get our display name from.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.ResourceName">
            <summary>
            Name of the string resource containing our display name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name for a property, event, or public void method that takes no arguments stored in this attribute.
            </summary>
            <returns>
            The display name.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute">
            <summary>
            Attribute class that is used to add a custom add command for a Element View Model.<br/>
            The Type Picking Command displays a type picker prior to adding the target element and can use its result to initialize the added element.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute"/> class.
            </summary>
            <param name="property">The clr-name of the property to which the selected type should be assigned. This property is expected to be of type <see cref="T:System.String"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute.Property">
            <summary>
            Gets the clr-name of the property to which the selected type should be assigned.
            </summary>
            <value>
            The clr-name of the property to which the selected type should be assigned.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes">
            <summary>
            Provides attributes for the filter of types.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.None">
            <summary>
            No filter are applied to types.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.AbstractTypes">
            <summary>
            Inclue abstract types in the filter.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.Interfaces">
            <summary>
            Inclue interfaces in the filter.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.BaseType">
            <summary>
            Inclue base types in the filter.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.NonpublicTypes">
            <summary>
            Inclue non public types in the filter.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.All">
            <summary>
            Include all types in the filter.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute">
            <summary>
             Defines the type of attribute to apply this configuration property or field.
            </summary>
             <remarks>
             This attribute is applied to create validators for use in the configuration design-time.
             </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.#ctor(System.String)">
            <summary>
             Creates an instance of ValidationAttribute with the validator type specified by <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.#ctor(System.Type)">
            <summary>
             Creates an instance of the ValidationAttribute with the validator type specified by <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.ValidatorType">
            <summary>
             Retrieves the validator <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.CreateValidator">
            <summary>
             Creates a validator objects.   This is expected to return a Validator type from
             the Telerik.Microsoft.Practices.EnterpriseLibrary.Configuration.Design namespace.  
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is a unique identifier for the attribute.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute">
            <summary>
            Indicates an element level validator.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.#ctor(System.String)">
            <summary>
             Creates an instance of ElementValidationAttribute with the validator type specified by <see cref="T:System.String"/>.
            </summary>
            <param name="validatorTypeName"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.#ctor(System.Type)">
            <summary>
             Creates an instance of the ElementValidationAttribute with the validator type specified by <see cref="T:System.Type"/>
            </summary>
            <param name="validatorType"></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.ValidatorType">
            <summary>
             Retrieves the validator <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.CreateValidator">
            <summary>
             Creates a validator objects.   This is expected to return a Validator type from
             the Telerik.Microsoft.Practices.EnterpriseLibrary.Configuration.Design namespace.  
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is a unique identifier for the attribute.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute">
             <summary>
             Attribute class used to specify a specific View Model derivement or visual representation to be used on the target element.
             </summary>
             <remarks>
             
             <para>The View Model Type should derive from the ElementViewModel or Property class in the Configuration.Design assembly. <br/>
             As this attribute can be applied to the configuration directly and we dont want to force a dependency on the Configuration.Design assembly <br/>
             You can specify the View Model Type in a loosy coupled fashion, passing a qualified name of the type.</para>
            
             </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute.#ctor(System.Type)">
            <summary>
             Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute"/> class.
            </summary>
            <param name="modelType">The type of the View Model that should be used for the annotated element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute"/> class.
            </summary>
            <param name="modelTypeName">The type name of the View Model that should be used for the annotated element.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute.ModelType">
            <summary>
             Gets the View Model Type that should be used to bind the annotated element to its view.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute">
            <summary>
            Marks the annotated class as a configuration wizard that can be found
            by the configuration design time tools.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute"/>
             with the default wizard command model type specified.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute"/>
             with the command model type specified as a string.
            </summary>
            <param name="commandModelTypeName"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute"/> with 
            the command model type specified by <see cref="T:System.Type"/>.
            </summary>
            <param name="commandModelType"></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.WizardType">
            <summary>
            The type of the wizard to instantiate must derive from WizardModel or will result on an error at runtime.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.WizardTypeName">
            <summary>
            The name of the type of the wizard to instantiate.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource">
            <summary>
            Represents a configuration source that is backed by a dictionary of named objects.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.sections">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.eventHandlers">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.SourceChanged">
            <summary>
            Raised when anything in the source changes.
            </summary>
            <remarks>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource"/> does not report any
            configuration change events.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="name">The name by which the <paramref name="section"/> should be added.</param>
            <param name="section">The configuration section to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Contains(System.String)">
            <summary>
            Determines if a section name exists in the source.
            </summary>
            <param name="name">The section name to find.</param>
            <returns><b>true</b> if the section exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.OnSourceChangedEvent(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.SourceChanged"/> event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer">
            <summary>
            Entry point for the container infrastructure for Enterprise Library.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.Current">
            <summary>
            Get or set the current container used to resolve Entlib objects (for use by the
            various static factories).
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.ConfigureContainer(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Read the current Enterprise Library configuration in the given <paramref name="configSource"/>
            and supply the corresponding type information to the <paramref name="configurator"/>.
            </summary>
            <param name="configurator"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator"/> object used to consume the configuration
            information.</param>
            <param name="configSource">Configuration information.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.ConfigureContainer(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Read the current Enterprise Library configuration in the given <paramref name="configSource"/>
            and supply the corresponding type information to the <paramref name="configurator"/>.
            </summary>
            <param name="locator"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> used to identify what information
            to pull from the configuration file.</param>
            <param name="configurator"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator"/> object used to consume the configuration
            information.</param>
            <param name="configSource">Configuration information.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.CreateDefaultContainer">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that has been configured
            with the information in the default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.CreateDefaultContainer(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that has been configured
            with the information in the given <paramref name="configurationSource"/>.
            </summary>
            <param name="configurationSource"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing Enterprise Library
            configuration information.</param>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1">
            <summary>
            Type converter used to work around enums with enums wrongly marked as "flags".
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates where the standard values are exclusive.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource">
            <summary>
            Represents the implementation details for file-based configuration sources.
            </summary>
            <remarks>
            This implementation deals with setting up the watcher over the configuration files to detect changes and update
            the configuration representation. It also manages the change notification features provided by the file based 
            configuration sources.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.NullConfigSource">
            <summary>
            ConfigSource value for sections that existed in configuration but were later removed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> class.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="refresh"><b>true</b>if runtime changes should be refreshed, <b>false</b> otherwise.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file, and starts watching for 
            its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.SourceChanged">
            <summary>
            Event raised when any section in this configuration source has changed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            If a configuration section was retrieved from an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/>, a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
            <exception cref="T:System.InvalidOperationException">The configuration section was retrieved from an instance of  <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> or <see cref="N:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration"/> and cannot be added to the current source.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            When implemented in a derived class, adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it should be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.DoRemove(System.String)">
            <summary>
            When implemented in a derived class, removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.ConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configSource">The name of the updated configuration source.</param>
            <devdoc>
            Only needs to deal with concurrency to get the current sections and to update the watchers.
            
            Rationale:
            - Sections' are only added or updated.
            - For this notification, all sections in the configuration file must be updated, and sections in external 
            files must be refreshed only if the config source changed.
            - why not check after the original set of sections is retrieved?
            -- Sections might have been added to the listener set after the original set is retrieved, but...
            -- If they were added after the original set was retrieved, then they are up to date.
            --- For this to happen, they couldn't have been read before the o.s., otherwise they would be a listener for them.
            --- So, the retrieved information must be fresh (checked this with a test). 
            -- What about other changes?
            --- Erased sections: only tested in the configuration file watching thread, because the meta configuration 
            is kept in the configuration file.
            ---- Even if the external file an external is deleted because of the deletion, and this change is processed
            before the configuration file change, the refresh for the external section will refresh all the sections for the file and 
            notify a change, without need for checking the change. The change would later be picked up by the configuration file watcher 
            which will notify again. This shouldn't be a problem.
            --- External sections with changed sources. If they existed before, they must have been in the configuration file and there 
            was an entry in the bookeeping data structures.
            - Concurrent updates for sections values should be handled by the system.config fx
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the change watchers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Dispose">
            <summary>
            Releases the resources used by the change watchers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.NotifyUpdatedSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.OnSourceChanged(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.SourceChanged"/> event.
            </summary>
            <param name="configurationSourceChangedEventArgs">The argument for the raised event.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.ConfigurationFilePath">
            <summary>
            Gets the path of the configuration file for the configuration source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.ValidateArgumentsAndFileExists(System.String,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Validates the parameters required to save a configuration section.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize 
            configuration, so the configuration file must be a valid .NET Framework configuration file.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> class.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter, polling every 
            <paramref name="refreshInterval"/> milliseconds.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.DoRemove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source using encryption.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.<br/>
            If a configuration section was retrieved from an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/>, a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
            <param name="protectionProviderName">The name of the protection provider to use when encrypting the section.</param>
            <exception cref="T:System.InvalidOperationException">The configuration section was retrieved from an instance of  <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> or <see cref="N:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration"/> and cannot be added to the current source.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration and saves the configuration file.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file and saves the configuration file using encryption.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
            <param name="protectionProvider">The name of the protection provider to use when encrypting the section.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have 
            suffered notifications and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main 
            configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external 
            files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and 
            should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections 
            that have changed their location.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should 
            be refreshed.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a default name and an empty path.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a name and an path.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.FilePath">
            <summary>
            Gets or sets the file path. This is a required field.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.CreateDesignSource(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource)">
            <summary>
             Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> configured based on this configuration element.
            </summary>
            <returns>Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> or null if this source does not have design-time support.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderConfigurationSourceBuilderExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of type registration provider settings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderConfigurationSourceBuilderExtension.ConfigureTypeRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns>A fluent interface that allows to add <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instances.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderConfigurationSourceBuilderExtension.ConfigureEmptyTypeRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configure a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection"/> section with no 
            default type registrations.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns>A fluent interface that allows to add <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instances.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.GenericEnumeratorWrapper`1">
            <devdoc>
            Represents a genereic enumerator for the NamedElementCollection.
            </devdoc>	
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler">
            <summary>
            Implements hierarchical merge behavior to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementations.<br/>
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
            <param name="localSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance that should be extended.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
            <param name="localSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance that should be extended.</param>
            <param name="parentSource">An <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance the <paramref name="localSource"/> should be merged with.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.Initialize">
            <summary>
            Performs intialization logic for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.DoRefresh">
            <summary>
            Performs re-intialization logic for this <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.DoCheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether the result of a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be merged.<br/>
            If the call should be merged, performs the merge behavior and returns the resulting <see cref="T:System.Configuration.ConfigurationSection"/> intance.<br/>
            If the call should not be merged returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The resulting <see cref="T:System.Configuration.ConfigurationSection"/> instance.</returns>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement">
            <summary>
            Interface used to implement custom clone behavior for a <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement.CreateFullClone">
            <summary>
            Creates a deep clone of the current <see cref="T:System.Configuration.ConfigurationElement"/> instance.
            </summary>
            <returns>
            A deep clone of the current <see cref="T:System.Configuration.ConfigurationElement"/> instance.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource">
            <summary>
            Represents a source for getting configuration information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.SourceChanged">
            <summary>
            Event raised when any section in this configuration source changes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest">
            <summary>
            This interface supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Augmented version of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> interface intended to be used by unit tests.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ExternalConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ConfigSourceWatcherMappings">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.WatchedConfigSources">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.WatchedSections">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData">
            <summary>
            Represents the configuration settings for a custom provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Name">
            <summary>
            Gets the name for the represented provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Attributes">
            <summary>
            Gets the attributes for the represented provider.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1">
            <summary>
            This interface must be implemented by configuration objects for custom providers that rely
            on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> to perform the dynamic properties management.
            </summary>
            <remarks>
            This interface is generic so that the helper can be strongly-typed.
            </remarks>
            <typeparam name="T">The configuration object type. It must match the type implementing the interface.</typeparam>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.Helper">
            <summary>
            Gets the helper that manages the configuration information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to get the value from.</param>
            <returns>The value for the property.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseIsModified">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the modification status using the inherited implementation.
            </summary>
            <returns><b>true</b> if the configuration element has been modified, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseReset(System.Configuration.ConfigurationElement)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Resets the internal state of the configuration object using the inherited implementation.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Sets the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to set the value to.</param>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Modifies the <b>ConfigurationElement</b> object to remove all values that should not be saved using the inherited implementation.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <b>ConfigurationElement</b> object, or a null reference (Nothing in Visual Basic) if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection">
            <summary>
            Interface that allows a <see cref="T:System.Configuration.ConfigurationElementCollection"/> to be merged.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection.ResetCollection(System.Collections.Generic.IEnumerable{System.Configuration.ConfigurationElement})">
            <summary>
            Resets the elements in the <see cref="T:System.Configuration.ConfigurationElementCollection"/> to the <see cref="T:System.Configuration.ConfigurationElement"/>s passed as <paramref name="configurationElements" />.
            </summary>
            <param name="configurationElements">The new contents of this <see cref="T:System.Configuration.ConfigurationElementCollection"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection.CreateNewElement(System.Type)">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/> for the specifies <paramref name="configurationType" />.
            </summary>
            <param name="configurationType">The type of <see cref="T:System.Configuration.ConfigurationElement"/> that should be created.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName">
            <summary>
            Represents the abstraction of an object with a name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType">
            <summary>
            Represents the abstraction of an object with a name and a type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IProtectedConfigurationSource">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IProtectedConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            </summary>
            <param name="sectionName"></param>
            <param name="configurationSection"></param>
            <param name="protectionProviderName"></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory">
            <summary>
            Represents a category on an ADM template file.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory"/> class.
            </summary>
            <param name="categoryName">
            The categor name.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Categories">
            <summary>
            Gest the list of sub categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Policies">
            <summary>
            Gets the list of policies in a category.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart">
            <summary>
            Represents a CHECKBOX part on an ADM template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.CheckedByDefault">
            <summary>
            Gets the indication of whether the checkbox should be checked by default.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.ValueForOn">
            <summary>
            Gets the indication of whether a value for the checked state should be added.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.ValueForOff">
            <summary>
            Gets the indication of whether a value for the unchecked state should be added.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart">
            <summary>
            Represents a COMBOBOX part on an ADM template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.Suggestions">
            <summary>
            Gets the list of suggested values for the part.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent">
            <summary>
            Represents the contents of an ADM template file.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.AddCategory(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory)">
            <summary>
            Add a category to the content
            </summary>
            <param name="category">The category to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.Write(System.IO.TextWriter)">
            <summary>
            Writes the contents represented by the receiver to <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the contents should be written.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder">
            <summary>
            Represents the process of building the contents of an ADM file.
            </summary>
            <remarks>
            During the building process categories and policies are started and ended: several levels of nested categories
            can be started, but only one level of policies are allowed. When a category or policy is started, it becomes the current
            until it is ended.
            Parts are added to the current policy; parts are not started and stopped.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AvailableValueName">
            <summary>
            String representing the name of the registry value that represents the availability of a configuration element.
            </summary>
            <remarks>
            The value names for policies are set to this name.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.NoneListItem">
            <summary>
            String representing the value for a <see langword="null"/> value in a drop down list. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
            <param name="content">The content that will be built.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy, with values for "on" and "off" states.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <param name="valueForOn">Whether a value should be set for the checked state.</param>
            <param name="valueForOff">Whether a value should be set for the unchecked state.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <param name="valueForOn">Whether a value should be set for the checked state.</param>
            <param name="valueForOff">Whether a value should be set for the unchecked state.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddComboBoxPart(System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a combo box part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <param name="suggestions">The suggested values for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddComboBoxPart(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a combo box part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <param name="suggestions">The suggested values for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPart(System.String,System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Adds a new drop down list part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="items">The list of items to include in the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPart(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Adds a new drop down list part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="items">The list of items to include in the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForEnumeration``1(System.String,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForEnumeration``1(System.String,System.String,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForNamedElementCollection``1(System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean)">
            <summary>
            Adds a new drop down list part to the current policy with items representing the elements in a configuration 
            elements collection.
            </summary>
            <typeparam name="T">The base class for the configuration elements in the collection.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="defaultElementName">The name for the default element, or <see langword="null"/> if there is no such default name.</param>
            <param name="allowNone">Whether an additional entry to represent that no element is selected should be added.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForNamedElementCollection``1(System.String,System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean)">
            <summary>
            Adds a new drop down list part to the current policy with items representing the elements in a configuration 
            elements collection.
            </summary>
            <typeparam name="T">The base class for the configuration elements in the collection.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="defaultElementName">The name for the default element, or <see langword="null"/> if there is no such default name.</param>
            <param name="allowNone">Whether an additional entry to represent that no element is selected should be added.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddEditTextPart(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a new edit text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddEditTextPart(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a new edit text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/>
            if there is no such default value.</param>
            <param name="minValue">The minimum value, or <see langword="null"/>
            if there is no minimum value.</param>
            <param name="maxValue">The maximum value, or <see langword="null"/>
            if there is no maximum value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddPart(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart)">
            <summary>
            Add a part to the builder.
            </summary>
            <param name="part">
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart"/> to add.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddTextPart(System.String)">
            <summary>
            Adds a new text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.EndCategory">
            <summary>
            Ends the current category.
            </summary>
            <remarks>
            If the current category has a parent category, the parent category is made the current category.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when there is no current category.</exception>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.EndPolicy">
            <summary>
            Ends the current policy.
            </summary>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.GetContent">
            <summary>
            Gets the content for the builder.
            </summary>
            <returns>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent"/> object.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.StartCategory(System.String)">
            <summary>
            Starts a new category in the built content and makes it the current category.
            </summary>
            <param name="categoryName">The name for the new category</param>
            <remarks>
            The category is created as a child of the current category, or as a top level category if there is
            no such current category.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.StartPolicy(System.String,System.String)">
            <summary>
            Starts a new policy on the current category.
            </summary>
            <param name="policyName">The name for the new policy.</param>
            <param name="policyKey">The registry key for the new policy.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current category.</exception>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem">
            <summary>
            Represents an item in a drop down list.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem"/> class.
            </summary>
            <param name="name">The item name.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.Value">
            <summary>
            Gets the value of the item.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart">
            <summary>
            Represents a DROPDOWNLIST part on an ADM template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DropDownListTemplate">
            <summary>
            The drop down list template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ItemListStartTemplate">
            <summary>
            The item list start template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ListItemTemplate">
            <summary>
            The list item template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DefaultListItemTemplate">
            <summary>
            The default list item template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ItemListEndTemplate">
            <summary>
            The end list template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart"/> class.
            </summary>
            <param name="partName">The part name.</param>
            <param name="keyName">The key name.</param>
            <param name="valueName">The value name.</param>
            <param name="items">The items.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DefaultValue">
            <summary>
            Gets the default value for the part.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.Items">
            <summary>
            Gets the list of name/value pairs for the part.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart">
            <summary>
            Represents an EDITTEXT part on an ADM template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart"/> class.
            </summary>
            <param name="partName">The name for the part.</param>
            <param name="keyName">The registry key for part, or <see langword="null"/> 
            if no key name is required for the part.</param>
            <param name="valueName">The name for the registry value for the part.</param>
            <param name="defaultValue">The default value for the part, or <see langword="null"/> 
            if no default value is available.</param>
            <param name="maxlen">The maximum length for the part's value.</param>
            <param name="required">The indication of whether values for the part are required.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.DefaultValue">
            <summary>
            Gets the default value for the part, or <see langword="null"/> 
            if no default value is available.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.Maxlen">
            <summary>
            Gets the maximum length for the part's value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.Required">
            <summary>
            Gets the indication of whether values for the part are required.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdministrativeTemplateGenerator">
            <summary>
            Encapsulates the process to generate the ADM template contents to represent the configuration 
            information contained in a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>, delegating to registered
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instances the generation of the
            specific contents for each section.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdministrativeTemplateGenerator.GenerateAdministrativeTemplateContent(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider})">
            <summary>
            Generates the ADM template contents that represent the configuration information in 
            <paramref name="configurationSource"/> 
            </summary>
            <param name="configurationSource">The configuration source holding the configuration sections.</param>
            <param name="applicationName">The ApplicationName to be used when generating the ADM policy keys.</param>
            <param name="manageabilityProviders">The mapping from section names to the
            <returns>The generated content.</returns>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instances that generate the ADM contents.</param>
            <remarks>Both MACHINE and USER policies are generated.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart">
            <summary>
            Represents a NUMERIC part in an ADM template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.DefaultValue">
            <summary>
            Gets the default value for the part, or <see langword="null"/> 
            if no default value is available.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.MaxValue">
            <summary>
            Gets the maximum value for the part, or <see langword="null"/> 
            if no maximum value is available.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.MinValue">
            <summary>
            Gets the minimum value for the part, or <see langword="null"/> 
            if no minimum value is available.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart">
            <summary>
            Represents a part in an ADM template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartStartTemplate">
            <summary>
            The part start template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartEndTemplate">
            <summary>
            The part end template.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.ValueNameTemplate">
            <summary>
            The part value name.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.KeyNameTemplate">
            <summary>
            The part key name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart"/> class.
            </summary>
            <param name="partName">The name for the part.</param>
            <param name="keyName">The registry key for part, or <see langword="null"/> 
            if no key name is required for the part.</param>
            <param name="valueName">The name for the registry value for the part.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.Write(System.IO.TextWriter)">
            <summary>
            Writes the part the <paramref name="writer"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.TextWriter"/> to write.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.KeyName">
            <summary>
            Gets the registry key for the part, or <see langword="null"/> if no key name is required for the part.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartName">
            <summary>
            Gets the name for the part.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.ValueName">
            <summary>
            Gets the name for the registry value for the part.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy">
            <summary>
            Represents a policy in an ADM template.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.KeyName">
            <summary>
            Gets the registry key for the policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.Parts">
            <summary>
            Gets the parts for the policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.Name">
            <summary>
            Gets the name for the policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.ValueName">
            <summary>
            Gets the registry value name for the policy, or <see langword="null"/> if no value name is required for the policy.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart">
            <summary>
            Represents a TEXT part in an ADM template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart"/> class.
            </summary>
            <param name="partName">
            The name of the part.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator">
            <summary>
            Represents a coordinator for configuration change notifications.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Add a section handler for a section.
            </summary>
            <param name="sectionName">
            The name of the section.
            </param>
            <param name="handler">
            The handler to add.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.NotifyUpdatedSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notify updated configuration sections.
            </summary>
            <param name="sectionsToNotify">
            The name of the sections to notify.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a section change handler.
            </summary>
            <param name="sectionName">
            The section to remove the handler.
            </param>
            <param name="handler">
            The handler to remove.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator">
            <summary>
            Manages the configuration file watchers for a collection of configuration sections.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.MainConfigurationFileSource">
            <summary>
            The main configuration file source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator"/> class.
            </summary>
            <param name="mainConfigurationFileName">The main configuration file.</param>
            <param name="refresh">true to refresh configuration; otherwise, false.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.WatchedConfigSources">
            <summary>
            Gets a collection of watch configuration sources.
            </summary>
            <value>
            A collection of watch configuration sources.
            </value>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.ConfigurationChanged">
            <summary>
            Event to notify when configuration changes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.IsWatchingConfigSource(System.String)">
            <summary>
             Determines if the configuration source is being watched.
            </summary>
            <param name="configSource">
             The configuration source.
             </param>
            <returns>
             true if the source is being watched; otherwise, false.
             </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.OnConfigurationChanged(System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.ConfigurationChanged"/> event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.RemoveWatcherForConfigSource(System.String)">
            <summary>
            Removes a watcher for the configuration source.
            </summary>
            <param name="configSource">
            The source to remove the watcher.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.SetWatcherForConfigSource(System.String)">
            <summary>
            Sets a watcher for a configuration source.
            </summary>
            <param name="configSource">
            The configuration source to watch.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider">
            <summary>
            Represents the behavior required to provide Group Policy updates for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </summary>
            <remarks>
            Subclasses define the implementation necessary to provide manageability for a specific type of configuration
            element.
            Element providers are usually necessary when dealing with collections of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>,
            as the concrete type of the elements in the collections is only known at runtime, and it is possible that 
            the elements are defined in 'extension' assemblies.
            Element providers are registered with the configuration element types they provide manageability to using 
            the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> attribute, which is bound to assemblies.
            Element providers are also responsible for generating the ADM instructions that describe the policies that can be
            used to override the values in the configuration elements. Usually the ADM instructions generated by element providers
            consist of a single policy with parts that map to the specific configuration element instance of the type the provider 
            manages. This is not mandatory, however, and the ADM instructions generated by element providers must be consistent 
            with the ADM structure determined by the section provider that interacts with them.
            ADM instructions must be generated for each element instance in a given context, using the elements' names to build
            each instruction key.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.PolicyValueName">
            <summary>
            The name of the value used to hold policy enablement status.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationElement,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be subKeys of.</param>
            <remarks>
            ADM instructions are generated on a per-instance basis.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.OverrideWithGroupPolicies(System.Configuration.ConfigurationElement,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry, if any.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute">
            <summary>
            Specifies which <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> must be used to provide manageability
            for instances a given <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> subclass.
            </summary>
            <remarks>
            Manageability providers for configuration elements are registered both to the configuration element type 
            and the manageability provider for the configuration section where the configuration element resides.
            The attribute is bound to assemblies.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> class.
            </summary>
            <param name="manageabilityProviderType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.</param>
            <param name="targetType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type.
            </param>
            <param name="sectionManageabilityProviderType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.ManageabilityProviderType">
            <summary>
            Gets the registered <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.TargetType">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type 
            for which the registered <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type provides manageability.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.SectionManageabilityProviderType">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> registered to manage the 
            section where the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> 
            instances managed by the registered <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type reside.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1">
            <summary>
            Provides a default implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
            <typeparam name="T">The managed configuration element type. Must inherit from <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.#ctor">
            <summary>
            
            </summary>
            <remarks>Default to ReadOnly</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationElement,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be subKeys of.</param>
            <remarks>
            Class <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1"/> provides a default implementation for this method that
            calls the strongly-typed 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddCheckboxPartsForFlagsEnumeration``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="contentBuilder">The content builder.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.OverrideWithGroupPolicies(System.Configuration.ConfigurationElement,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry, if any.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type <typeparamref name="T"/>.</exception>
            <remarks>
            Provides a default implementation that performs appropriate logging of errors when processing
            policy overrides.
            </remarks>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.OverrideWithGroupPolicies(System.Configuration.ConfigurationElement,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">ConfigurationElementManageabilityProvider.OverrideWithGroupPolicies</seealso>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.OverrideWithGroupPolicies(`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.GetFlagsEnumOverride``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="policyKey"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor">
            <summary>
            Represents a configuration accessor for system configuration (.NET configuration).
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.#ctor(System.Configuration.Configuration)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor"/> with the configuration to access.
            </summary>
            <param name="configuration">
            The configuration to access.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.GetRequestedSectionNames">
            <summary>
            Gets the section names for the requested configuration.
            </summary>
            <returns>
            A collection of configuration names.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.GetSection(System.String)">
            <summary>
            Get a configuration section based on name.
            </summary>
            <param name="sectionName">The name of the configuration section.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> for the name.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.RemoveSection(System.String)">
            <summary>
            Remove a configuration section.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider">
            <summary>
            Represents the behavior required to provide Group Policy updates for a <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <remarks>
            Subclasses define the implementation necessary to provide manageability for a specific type of configuration
            section.
            Section providers delegate the manageability support for internal configuration elements to registered instances
            of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> when collections of heterogeneous elements are involved 
            and the concrete type of the configuration elements is unknown in advance. 
            Section providers are registered with the configuration section name they provide manageability to using 
            the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute"/> attribute, which is bound to assemblies.
            Section providers are also responsible for generating the ADM instructions that describe the policies that can be
            used to override the values for all the configuration settings in the section. Usually the ADM instructions generated 
            for a section consist of a policy for block-wide settings and one policy for each configuration element in a collection; 
            however some sections might require a different structure. Manageability providers for elements in a section must be 
            consistent with the ADM structure defined by the section's manageability provider.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute"/>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.PolicyValueName">
            <summary>
            The name of the value used to hold policy enablement status.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> class with a 
            given set of manageability providers for the elements in the section's collections.
            </summary>
            <param name="providers">The mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.Providers">
            <summary>
            Gets the mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            </summary>
            <value>
            The mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="applicationName">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectivesForElement``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,``0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the element using the supplied element manageability provider.
            </summary>
            <typeparam name="T">The base type for the configuration element.</typeparam>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="element">The configuration element.</param>
            <param name="subProvider">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> used to append the ADM instructions
            for the element.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the elements in a collection of configuration elements, using the registered element 
            manageability providers for each element.
            </summary>
            <remarks>
            A new category and one policy for each element in the collection are generated; the element manageability
            providers are responsible for generating the policies.
            Elements for which no manageability provider is registered are ignored.
            </remarks>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be sub keys of.</param>
            <param name="categoryName">The name for the category where the generated policies will be created.</param>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.GetPolicyKey(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Returns the registry key that represents a policy.
            </summary>
            <param name="machineKey">The key for the policy on the machine tree.</param>
            <param name="userKey">The key for the policy on the user tree.</param>
            <returns>The <paramref name="machineKey"/> if it is not <see langword="null"/> and
            it represents a policy; otherwise the <paramref name="machineKey"/> if it is not 
            <see langword="null"/> and it represents a policy, otherwise <see langword="null"/>.</returns>
            <seealso cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.IsPolicyKey">IRegistryKey.IsPolicyKey</seealso>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.GetSubProvider(System.Type)">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> instance registered 
            for type <paramref name="configurationObjectType"/>.
            </summary>
            <param name="configurationObjectType">The configuration element type of the instance needing management.</param>
            <returns>The manageability provider registered to manage the type, or <see langword="null"/> 
            if no provider is registered for the type.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.LoadRegistrySubKeys(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey@,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey@)">
            <summary>
            Utility method that loads sub keys at the machine and user level.
            </summary>
            <param name="subKeyName">The name of the required sub key.</param>
            <param name="machineKey">The parent key at the machine level, or <see langword="null"/> 
            if there is no registry key.</param>
            <param name="userKey">The parent key at the user level, or <see langword="null"/> 
            if there is no registry key.</param>
            <param name="machineSubKey">When this method returns, contains a reference to the sub key of
            <paramref name="machineKey"/> named <paramref name="subKeyName"/>, or <see langword="null"/> 
            if either machineKey is <see langword="null"/> or it does not have a sub key with
            the requested name.</param>
            <param name="userSubKey">When this method returns, contains a reference to the sub key of
            <paramref name="userKey"/> named <paramref name="subKeyName"/>, or <see langword="null"/> 
            if either userKey is <see langword="null"/> or it does not have a sub key with
            the requested name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPolicies(System.Configuration.ConfigurationSection,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s and its internal configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationObject">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration section, otherwise
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPolicies``1(``0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the properties for the configuration element.
            </summary>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="element">The configuration element.</param>
            <param name="subProvider">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> used to override the element's
            properties.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <remarks>
            This method assumes a specific layout for the policy values: there is a registry key representing the collection
            of elements, and a sub key with the policy values for each element. An element's sub key may also contains a value
            stating whether the policy for an element is disabled; in that case the element is removed from the collection.
            Such a layout for the policy values can be constructed manually, or method 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)"/> can be invoked during the construction
            of the ADM template to generate it.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesForElementCollection``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the properties for the configuration elements in the given collection.
            </summary>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="elements">The collection of configuration elements.</param>
            <param name="keyName">The name of the sub key where the policy values for the elements in the collection
            reside.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <remarks>
            This method assumes a specific layout for the policy values: there is a registry key representing the collection
            of elements, and a sub key with the policy values for each element. An element's sub key may also contains a value
            stating whether the policy for an element is disabled; in that case the element is removed from the collection.
            Such a layout for the policy values can be constructed manually, or method 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)"/> can be invoked during the construction
            of the ADM template to generate it.
            </remarks>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.ReleaseRegistryKeys(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey[])">
            <summary>
            Utility method that closes registry keys.
            </summary>
            <param name="keys">The registry keys to close.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute">
            <summary>
            Specifies which <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> must be used to provide manageability
            for a configuration section.
            </summary>
            <remarks>
            Manageability providers for configuration sections are registered to configuration section name.
            The attribute is bound to assemblies.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> class.
            </summary>
            <param name="sectionName">The name of the section that needs manageability.</param>
            <param name="manageabilityProviderType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.SectionName">
            <summary>
            Gets the name of the <see cref="T:System.Configuration.ConfigurationSection"/> for which the registered 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type provides manageability.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.ManageabilityProviderType">
            <summary>
            Gets the registered <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1">
            <summary>
            Provides a default base implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> that
            processes policy override processing, performing appropriate logging of
            policy processing errors, from policy override processing for configuration objects
            contained by the section.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.#ctor(System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1"/> class with a 
            given set of manageability providers for the elements in the section's collections.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="applicationName">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationSection">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="sectionKey">The root key for the section's policies.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPolicies(System.Configuration.ConfigurationSection,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s and its internal configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationObject">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration section, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPoliciesForConfigurationSection(`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationSection"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPoliciesForConfigurationElements(`0,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <remarks>Errors detected while processing policy overrides for the configuration elements in the section 
            must be logged but processing for other objects must not be interrupted.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class.
            </summary>
            <param name="name">The name of the configuration element.</param>
            <param name="providerType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.</param>
            <param name="targetType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type that is managed by the provider type.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.TargetType">
            <summary>
            Gets or sets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type that is managed by the provider type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class.
            </summary>
            <param name="sectionName">The name for the configuration section that is managed by the provider type.</param>
            <param name="providerType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.ManageabilityProviders">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> that represent
            the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> instances that the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instance represented by the receiver might require
            to provide manageability to configuration elements.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder">
            <summary>
            Builder for manageability configuration providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder.CreateConfigurationElementManageabilityProvider(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData)">
            <summary>
            Create a manageability configuration provider.
            </summary>
            <param name="manageabilityProviderData">The provdier data.</param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder.CreateConfigurationSectionManageabilityProvider(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData)">
            <summary>
            Create a manageability configuration provider.
            </summary>
            <param name="manageabilityProviderData">The provdier data.</param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.MinimumApplicationNameLength">
            <summary>
            Represents the minimum application name length allowed.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.MaximumApplicationNameLength">
            <summary>
            Represents the maximumapplication name length allowed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The path to the configuration file.</param>
            <param name="applicationName">The name that identifies the application consuming the configuration information.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The path to the configuration file.</param>
            <param name="applicationName">The name that identifies the application consuming the configuration information.</param>
            <param name="enableGroupPolicies"><see langword="true"/> if Group Policy overrides must be appliedby the represented 
            configuration source; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.ApplicationName">
            <summary>
            Gets or sets the application. This is a required field.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.EnableGroupPolicies">
            <summary>
            Gets or sets the value for GP enablement.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.ConfigurationManageabilityProviders">
            <summary>
            Gets the collection of registered <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> types
            necessary to provide manageability by the represented configuration source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.CreateDesignSource(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource)">
            <summary>
             Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> configured based on this configuration element.
            </summary>
            <returns>Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> or null if this source does not have design-time support.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1">
            <summary>
            Base class for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> implementations that provide manageability
            support for custom provider's configuration.
            </summary>
            <typeparam name="T">The custon provider's configuration element type.</typeparam>
            <remarks>
            The basic configuration for a custom provider includes the provider type and a collection of attributes.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.AttributesPropertyName">
            <summary>
            Name for the value holding the policy overrides for the custom provider's attributes.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.ProviderTypePropertyName">
            <summary>
            Name for the value holding the policy overrides for the custom provider's type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1"/> class with a 
            policy name template.
            </summary>
            <param name="policyTemplate">The template to use when generating the policy associated to a custom provider
            configuration instance.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.GenerateAttributesString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a string with the encoded key/value pairs that represent the <paramref name="attributes"/> collection.
            </summary>
            <param name="attributes">The collection of attributes.</param>
            <returns>The encoded representation of the attributes collection.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.OverrideWithGroupPolicies(`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to override these properties.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration">
            <summary>
            Represents a Group Policy notification registration to watch Group Policy notifications.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration"/> object.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.MachinePolicyEvent">
            <summary>
            Gets the machine policy event.
            </summary>
            <value>
            An <see cref="T:System.Threading.AutoResetEvent"/> for the machine policy.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.UserPolicyEvent">
            <summary>
            Gets the user policy event.
            </summary>
            <value>
            An <see cref="T:System.Threading.AutoResetEvent"/> for the user policy.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder">
            <summary>
            Represents a builder for Group Policy notification registration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder.CreateRegistration">
            <summary>
            Creates the registration.
            </summary>
            <returns>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration"/> object.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher">
            <summary>
            The policy watcher can be started and stopped many times. To deal with this, when a watcher thread is started
            it is given an 'exit' event that will be signaled when the thread needs to be stopped. Once the thread is started
            it own the exit event, and will release it when it terminates. More than one watching thread may be active at the
            same time, having different exit events, if the old watching thread doesn't get processing time before the new 
            thread is started; when the old thread gets to run it will consume the signaled exit event and finish.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher"/> class with a registration builder.
            </summary>
            <param name="registrationBuilder">
            The builder used to create the registration for Group Policy.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"></see> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"></see> is reclaimed by garbage collection.
            </summary>\
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.GroupPolicyUpdated">
            <summary>
            The event to update the policy.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.StartWatching">
            <summary>
            Starts watching Group Policy.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.StopWatching">
            <summary>
            Stops watching Group Policy.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor">
            <summary>
            Defines an accessor for configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.GetSection(System.String)">
            <summary>
            Get a configuration section based on name.
            </summary>
            <param name="sectionName">The name of the configuration section.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> for the name.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.RemoveSection(System.String)">
            <summary>
            Remove a configuration section.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.GetRequestedSectionNames">
            <summary>
            Gets the section names for the requested configuration.
            </summary>
            <returns>
            A collection of configuration names.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher">
            <summary>
            Defines a watcher for Group Policy.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.GroupPolicyUpdated">
            <summary>
            The event to update the policy.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.StartWatching">
            <summary>
            Starts watching Group Policy.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.StopWatching">
            <summary>
            Stops watching Group Policy.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyUpdateDelegate">
            <summary>
            The delegate used to update the Group Policy based on machine.
            </summary>
            <param name="machine">The machine where Group Policy is updated.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper">
            <summary>
            Defines a helper for manageability configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper.UpdateConfigurationManageability(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor)">
            <summary>
            Updates configuration management from the given configuration.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper.UpdateConfigurationSectionManageability(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor,System.String)">
            <summary>
            Updates configuration management from the given configuration in the given section.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
            <param name="sectionName">
            The section to update.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey">
            <summary>
            Represents a key for manageability configuration implementation.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.ApplicationName">
            <summary>
            Gets or sets the application name.
            </summary>
            <value>
            The application name.
            </value>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.EnableGroupPolicies">
            <summary>
            Gets or sets weather to enable Group Policies.
            </summary>
            <value>
            true to enable Group Policies; otherwise false.
            </value>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.FileName">
            <summary>
            Gets or sets the configuration file name.
            </summary>
            <value>
            The configuration file name.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey"/> struct.
            </summary>
            <param name="fileName">The configuration file name.</param>
            <param name="applicationName">The application name.</param>
            <param name="enableGroupPolicies">true to enable Group Policy; otherwise, false.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer">
            <summary>
            A comparer for an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer.Equals(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            
            <param name="y">The second object of type T to compare.</param>
            <param name="x">The first object of type T to compare.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer.GetHashCode(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            
            <returns>
            A hash code for the specified object.
            </returns>
            
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider">
            <summary>
            Represents a instrumentation configuration section provider.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.EventLoggingEnabledPropertyName">
            <summary>
            The name of the property to determine if event logging is enabled.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.PerformanceCountersEnabledPropertyName">
            <summary>
            The name of the property to determine if performance counters is enabled.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider"/> class.
            </summary>
            <param name="subProviders">The sub providers.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationSection">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="sectionKey">The root key for the section's policies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesForConfigurationElements(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor">
            <summary>
            Provides access to the registry.
            </summary>
            <remarks>
            This interface allows for unit testing without requiring access to the machine's registry.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor.CurrentUser">
            <summary>
            Gets registry key HKCU.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor.LocalMachine">
            <summary>
            Gets registry key HKLM.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey">
            <summary>
            Provides access to a registry key sub keys and values.
            </summary>
            <remarks>
            This interface allows for unit testing without requiring access to the machine's registry.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.Close">
            <summary>
            Closes the registry key.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetBoolValue(System.String)">
            <summary>
            Gets the Boolean value represented by the value for requested name in the registry key.
            </summary>
            <remarks>
            An integer value of 1 is considered <langword>true</langword>, any other 
            value is considered <langword>false</langword>.
            </remarks>
            <param name="valueName">The name of the value to get.</param>
            <returns>The Boolean value for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer representing a boolean.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetEnumValue``1(System.String)">
            <summary>
            Gets the enum value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The enum value of type  <typeparamref name="T"/> represented by the value
            for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid value name for enum type <typeparamref name="T"/>.</exception>
            <typeparam name="T">The enum type.</typeparam>
            <devdoc>
            FxCop message CA1004 is supressed because the T parameter is used to drive the
            type of the method return value, so it is not possible to provide a method
            parameter that enables generic parameter inference.
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetIntValue(System.String)">
            <summary>
            Gets the integer value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The integer value for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetStringValue(System.String)">
            <summary>
            Gets the string value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The string value for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not a string.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetTypeValue(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The instance of <see cref="T:System.Type"/> represented by the value for
            the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid type name.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetValueNames">
            <summary>
            Gets the names for the values.
            </summary>
            <returns>The value names.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.OpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.IsPolicyKey">
            <summary>
            Gets the indication of whether the registry key represents a policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.Name">
            <summary>
            Gets the full name of the registry key.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder">
            <summary>
            Represents the logic to encode key/value pairs into a string of semicolon separated entries.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.AppendKeyValuePair(System.String,System.String)">
            <summary>
            Adds a key/value pair to the encoded string being built.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.GetEncodedKeyValuePairs">
            <summary>
            Gets the encoded key/value pairs string built.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.EncodeKeyValuePair(System.String,System.String)">
            <summary>
            Returns a string representing a single encoded key/value pair.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
            <returns>The encoded key/value pair.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.EncodeKeyValuePair(System.String,System.String,System.Boolean)">
            <summary>
            Returns a string representing a single encoded key/value pair with semicolons escaped if
            appropriate.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
            <param name="escapeSemicolons"><see langword="true"/> if semicolons should be escaped;
            otherwise <see langword="false"/>.</param>
            <returns>The encoded key/value pair.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser">
            <summary>
            Helper class to extract a key/value pair collection from an encoded string of semicolon
            separated key/value pairs.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser.ExtractKeyValueEntries(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Extracts the key/value pairs encoded in <paramref name="attributes"/>,
            adding them to <paramref name="attributesDictionary"/>.
            </summary>
            <param name="attributes">The string where the key/value pairs are encoded.</param>
            <param name="attributesDictionary">The dictionary where the extracted key/value pairs should be added.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser.DecodeKeyValuePair(System.String,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="keyValue"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger">
            <summary>
            Provides logging services to the Enterprise Library Manageability Extensions.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger.LogException(System.Exception,System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="exception">The exception representing the error.</param>
            <param name="title">The title that describes the error.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper">
            <summary>
            Represents a manageability configuration helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.#ctor(System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
             Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper"/> class.
            </summary>
            <param name="manageabilityProviders">The manageability propvodiers.</param>
            <param name="readGroupPolicies">true to read Group Policies; otherwise, false.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.#ctor(System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor,System.String)">
            <summary>
             Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper"/> class.
            </summary>
            <param name="manageabilityProviders">The manageability providers.</param>
            <param name="readGroupPolicies">true to read Group Policies; otherwise, false.</param>
            <param name="registryAccessor">A registry accessor.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.ManageabilityProviders">
            <summary>
            Gets the manageability providers.
            </summary>
            <value>
            The manageability providers.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.BuildSectionKeyName(System.String,System.String)">
            <summary>
            Builds the section key name.
            </summary>
            <param name="applicationName">
            The application name.
            </param>
            <param name="sectionName">
            The section name.
            </param>
            <returns>
            The section key name.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.UpdateConfigurationManageability(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor)">
            <summary>
            Updates configuration management from the given configuration.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.UpdateConfigurationSectionManageability(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor,System.String)">
            <summary>
            Updates configuration management from the given configuration in the given section.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
            <param name="sectionName">
            The section to update.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file, overrides 
            the configuration information with values from the registry's Group Policy keys.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize configuration, so 
            the configuration file must be a valid .NET Framework configuration file.
            Multiple instances of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> can be created with a given configuration; however 
            instances with the same configuration will share the same configuration objects.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> class.
            </summary>
            <param name="configurationFilePath">The configuration file path. The path can be absolute or relative.</param>
            <param name="manageabilityProviders">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> that will
            provide manageability for each configuration section.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="applicationName">The name of the running application. This name is used to look for policy overrides.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> class with the implementation.
            </summary>
            <param name="implementation">
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> to use.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Implementation">
            <summary>
            Gets the implementation for configuration source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            This operation is not implemented.
            </remarks>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.SourceChanged">
            <summary>
            Event raised when any section in this configuration source has changed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            This call should always be followed by a <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure to remove change
            handlers will result in .NET resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/>
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <remarks>
            This operation is not implemented.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            This class should always follow a call to <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure
            to call these methods in pairs will result in .NET resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.ResetAllImplementations">
            <summary>
            Public for testing purposes.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation">
            <summary>
            Represents a manageable configuration source (like Group Policy).
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.#ctor(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilePath">The path to the configuration file.</param>
            <param name="refresh">true to refresh configuration; otherwise, false.</param>
            <param name="manageabilityProviders">The providers used for managment.</param>
            <param name="readGroupPolicies">true to read Group Policy; otherwise, false.</param>
            <param name="applicationName">The name of the application.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator)">
            <summary>
            Initialize a new instance o the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilePath">The configuration file path.</param>
            <param name="manageabilityHelper">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper"/> to use.</param>
            <param name="groupPolicyWatcher">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher"/> to use.</param>
            <param name="watcherCoordinator">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator"/> to use.</param>
            <param name="notificationCoordinator">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator"/> to use.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.ManageabilityHelper">
            <summary>
            Gets the manageability helper for the source.
            </summary>
            <value>
            The manageability helper for the source.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a change handler for a section.
            </summary>
            <param name="sectionName">
            The section to add the handler.
            </param>
            <param name="handler">
            The handler to add.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
             Get the configuration section.
            </summary>
            <param name="sectionName">The section name to get.</param>
            <returns>A <see cref="T:System.Configuration.ConfigurationSection"/> for the section name.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
             Removes a change handler from a section.
            </summary>
            <param name="sectionName">
             The section to remove the handler.
             </param>
            <param name="handler">
             The handler to remove.
             </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper">
            <summary>
            Manages the singleton <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> instance for a given 
            file name, application name and Group Policy enablement combination.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.#ctor">
            <summary>
            Initialzie a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.#ctor(System.Boolean)">
            <summary>
            Initialize a new instace of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper"/> class.
            </summary>
            <param name="refresh">
            true to support refreshing; otherwise, false.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.GetInstance(System.String,System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
            Gets a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> for a configuration.
            </summary>
            <param name="configurationFilePath">The path to a configuration file.</param>
            <param name="manageabilityProviders">The list of managment providers.</param>
            <param name="readGroupPolicies">true to read Group Policies; otherwise, false.</param>
            <param name="applicationName">The name of the application.</param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.ParseEnum``1(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="throwIfInvalid"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.TryParseEnum``1(System.String,``0@)">
            <summary>
            Attempt to parse a string into the given Enum type,
            returning whether conversion was successful.
            </summary>
            <typeparam name="T">Enum type to convert to.</typeparam>
            <param name="value">String to convert.</param>
            <param name="result">Converted result if successful.</param>
            <returns>true if conversion was successful, false if it failed.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.ParseType(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="throwIfInvalid"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ConfigurationElementNotInstrumentationConfigurationSection">
            <summary>
              Looks up a localized string similar to Expected an instance of InstrumentationConfigurationSection..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ConfigurationElementOfWrongType">
            <summary>
              Looks up a localized string similar to Expected and instance of &apos;{0}&apos; but got an instance of &apos;{1}&apos; instead..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.CustomProviderAttributesPartName">
            <summary>
              Looks up a localized string similar to Attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.CustomProviderTypePartName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingNoCurrentCategory">
            <summary>
              Looks up a localized string similar to A started category is required to perform the operation..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingNoCurrentPolicy">
            <summary>
              Looks up a localized string similar to A started policy is required to perform the operation..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingPolicyNotFinished">
            <summary>
              Looks up a localized string similar to A policy construction is in process..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingProcessNotFinished">
            <summary>
              Looks up a localized string similar to The built content is requested but there are outstanding categories being built..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueAboveMaxValue">
            <summary>
              Looks up a localized string similar to The default value is above the max value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} versus {3}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueBelowMinValue">
            <summary>
              Looks up a localized string similar to The default value is below the min value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} versus {3}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueLongerThanMaxlen">
            <summary>
              Looks up a localized string similar to The default value for part &apos;{0}&apos; on policy &apos;{1}&apos; is longer than the max length {2}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidCharactersInRegistryKey">
            <summary>
              Looks up a localized string similar to Registry key path contains invalid characters or is missing parts: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidDefaultValue">
            <summary>
              Looks up a localized string similar to The default value is invalid: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidMaxlen">
            <summary>
              Looks up a localized string similar to The max len of {2} is invalid on part &apos;{0}&apos; for policy &apos;{1}&apos;. The allowed values are 0-1024..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidName">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; is not a valid name on an ADM template..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidSuggestion">
            <summary>
              Looks up a localized string similar to The suggestion is invalid: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmMinValueLargerThanMaxValue">
            <summary>
              Looks up a localized string similar to Min value is larger than max value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} versus {3}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmNumericConstraintOutsideRange">
            <summary>
              Looks up a localized string similar to The numeric constraint &apos;{2}&apos; for part &apos;{0}&apos; on policy &apos;{1}&apos; is outside the allowed range. The valued values are 0-999999999. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmRegistryKeyPathSegmentTooLong">
            <summary>
              Looks up a localized string similar to Path segment over 255 chars in length for registry key: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmRegistryValueNameTooLong">
            <summary>
              Looks up a localized string similar to Registry value name over 255 chars in length: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionApplicationNameTooLong">
            <summary>
              Looks up a localized string similar to The application name cannot be longer than 255 characters..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionArgumentEmpty">
            <summary>
              Looks up a localized string similar to The parameter is an empty string.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionCannotLockGroupPolicy">
            <summary>
              Looks up a localized string similar to Group policy processing could not be locked prior to reading the registry.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              Looks up a localized string similar to The configuration file {0} could not be found..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionErrorOnCallbackForSectionUpdate">
            <summary>
              Looks up a localized string similar to Exception caught from callback for change on section &apos;{0}&apos; calling method &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionErrorWhileOverriding">
            <summary>
              Looks up a localized string similar to An error was detected while a configuration element&apos;s properties were being overriden with policy values..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionMissingRegistryValue">
            <summary>
              Looks up a localized string similar to There is no value with name &apos;{1}&apos; on key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueNotEnumValue">
            <summary>
              Looks up a localized string similar to The value for &apos;{1}&apos; on key &apos;{0}&apos; is not a valid value name for enum type &apos;{2}&apos;: &apos;{3}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueNotTypeName">
            <summary>
              Looks up a localized string similar to The value for &apos;{1}&apos; on key &apos;{0}&apos; is not a valid assembly qualified type name: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueOfWrongType">
             <summary>
               Looks up a localized string similar to The value for &apos;{1}&apos; on key &apos;{0}&apos; is not of the correct type:
            Expected {2} but got {3} instead..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to The value can not be null or string or empty..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionUnexpectedErrorProcessingSection">
            <summary>
              Looks up a localized string similar to Unexpected error while processing section &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionUnexpectedType">
            <summary>
              Looks up a localized string similar to The expected type &apos;{0}&apos; was not provided..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.GroupPolicyWatcherThread">
            <summary>
              Looks up a localized string similar to Group policy notification thread.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionCategoryName">
            <summary>
              Looks up a localized string similar to Instrumentation.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionEventLoggingEnabledPartName">
            <summary>
              Looks up a localized string similar to Event logging enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionPerformanceCountersEnabledPartName">
            <summary>
              Looks up a localized string similar to Performance counters enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionPolicyName">
            <summary>
              Looks up a localized string similar to Specify settings for the instrumentation section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ManageableConfigurationSourceName">
            <summary>
              Looks up a localized string similar to Manageable Configuration Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ManageableConfigurationSourceUpdateNotAvailable">
            <summary>
              Looks up a localized string similar to Updates to configuration through the ManageableConfigurationSource are not supported. Use the FileConfigurationSource instead..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.NoneListItem">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">
            <summary>
            Represents an error that occurs while accessing the registry.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception reference.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase">
            <summary>
            Provides access to a registry key sub keys and values.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.PolicyValueName">
            <summary>
            The name of the policy value.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.Close">
            <summary>
            Closes the registry key.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.DoGetValue(System.String)">
            <summary>
            Gets an actual value from the registry.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The value from the registry, or <see langword="null"/> if
            there is no such value.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.DoOpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetBoolValue(System.String)">
            <summary>
            Gets the Boolean value represented by the value for requested name in the registry key.
            </summary>
            <remarks>
            An integer value of 1 is considered <langword>true</langword>, any other 
            value is considered <langword>false</langword>.
            </remarks>
            <param name="valueName">The name of the value to get.</param>
            <returns>The Boolean value for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer representing a Boolean.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetEnumValue``1(System.String)">
            <summary>
            Gets the enum value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The enum value of type  <typeparamref name="T"/> represented by the value
            for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid value name for enum type <typeparamref name="T"/>.</exception>
            <typeparam name="T">The enum type.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetIntValue(System.String)">
            <summary>
            Gets the integer value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The integer value for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetStringValue(System.String)">
            <summary>
            Gets the string value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The string value for the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not a string.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetTypeValue(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The instance of <see cref="T:System.Type"/> represented by the value for
            the requested name in the registry key.</returns>
            <exception cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid type name.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetValueNames">
            <summary>
            Gets the names for the values.
            </summary>
            <returns>The value names.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.OpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/>is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/>is not a valid name.</exception>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.IsPolicyKey">
            <summary>
            Gets the indication of whether the registry key represents a policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.Name">
            <summary>
            Gets the full name of the registry key.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.MergeableConfigurationCollectionFactory">
            <summary>
             Factory for creating <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/>s.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.MergeableConfigurationCollectionFactory.GetCreateMergeableCollection(System.Configuration.ConfigurationElementCollection)">
            <summary>
             Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> based on a ConfigurationElementCollection type.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement">
            <summary>
            Represents a named <see cref="T:System.Configuration.ConfigurationElement"/> where the name is the key to a collection.
            </summary>
            <remarks>
            This class is used in conjunction with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1"/>.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.nameProperty">
            <summary>
            Name of the property that holds the name of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor(System.String)">
            <summary>
            Intialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class with a name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Updates the configuration properties of the receiver with the information in the current element in the <paramref name="reader"/>.
            </summary>
            <param name="reader">The reader over the configuration file.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1">
            <summary>
            Represents a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">A newable object that inherits from <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.Int32)">
            <summary>
            Gets the configuration element at the specified index location. 
            </summary>
            <param name="index">The index location of the <see name="T"/> to return. </param>
            <returns>The <see name="T"/> at the specified index. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Add(`0)">
            <summary>
            Add an instance of <typeparamref name="T"/> to the collection.
            </summary>
            <param name="element">An instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.String)">
            <summary>
            Gets the named instance of <typeparamref name="T"/> from the collection.
            </summary>
            <param name="name">The name of the <typeparamref name="T"/> instance to retrieve.</param>
            <returns>The instance of <typeparamref name="T"/> with the specified key; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Contains(System.String)">
            <summary>
            Determines if the name exists in the collection.
            </summary>
            <param name="name">The name to search.</param>
            <returns><see langword="true"/> if the name is contained in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Remove(System.String)">
            <summary>
            Remove the named element from the collection.
            </summary>
            <param name="name">The name of the element to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of a <typeparamref name="T"/> object.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class. 
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement">
            <summary>
            Represents a <see cref="T:System.Configuration.ConfigurationElement"/> that has a name and type.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.typeProperty">
            <summary>
            Name of the property that holds the type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor">
            <summary>
            Intialzie an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor(System.String,System.Type)">
            <summary>
            Initialize an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> that this element is the configuration for.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type">
            <summary>
            Gets or sets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.TypeName">
            <summary>
            Gets or sets the fully qualified name of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            the fully qualified name of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2">
            <summary>
            Represents a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object this collection contains.</typeparam>
            <typeparam name="TCustomElementData">The type used for Custom configuration elements in this collection.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Get the configuration object for each <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource">
            <summary>
            Represents a null configuration source that always returns null for a section.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.SourceChanged">
            <summary>
            Event raised when configuration source contents have changed.
            </summary>
            <remarks>This class never raises this event.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.GetSection(System.String)">
            <summary>
            Returns null for the section.
            </summary>
            <param name="sectionName">The section name to retrieve.</param>
            <returns>Always <see langword="null"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Null implementation of <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> that 
            ignores the request.
            </summary>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Remove(System.String)">
            <summary>
            Null implementation of <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> that 
            ignores the request.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.AddSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.RemoveSectionChangeHandler(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1">
            <summary>
            Represents the base class from which all implementations of polymorphic configuration collections must derive. 
            </summary>
            <typeparam name="T">The type contained in the collection.</typeparam>	
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:System.Configuration.ConfigurationElement"/> object, including the locks and the properties collections.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Called when an unknown element is encountered while deserializing the <see cref="T:System.Configuration.ConfigurationElement"/> object.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> used to deserialize the element.</param>
            <returns><see langword="true"/> if the element was handled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            When overriden in a class, get the configuration object for each <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>. 
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement(System.String)">
            <summary>
            Creates a new named <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <param name="elementName">The name of the element to create.</param>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Reverses the effect of merging configuration information from different levels of the configuration hierarchy.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object of the current element, or a <see langword="null"/> reference (Nothing in Visual Basic) if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.RedirectedSectionElement">
            <summary>
            Configuration element for a redirected section.<br/>
            The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name"/> property is used to identify the redireced section, based on its section name.<br/>
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.RedirectedSectionElement.SourceName">
            <summary>
            Gets the name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> which contains the configuration section.
            </summary>
            <value>
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> which contains the configuration section.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1">
            <summary>
            Event argument passed when a configuration section signals that it has changed.
            </summary>
            <typeparam name="TSection">Type of the configuration section class that changed.
            </typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1.#ctor(`0,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Create an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1"/> class
            that wraps the given section.
            </summary>
            <param name="section">Configuration section that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that's been configured with
            the contents of the <paramref name="section"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1.Section">
            <summary>
            The configuration section that changed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1.Container">
            <summary>
            Container that can be used to resolve newly configured objects.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection">
            <summary>
            Represents a configuration section that can be serialized and deserialized to XML.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.GetSchema">
            <summary>
            Returns the XML schema for the configuration section.
            </summary>
            <returns>A string with the XML schema, or <see langword="null"/> (<b>Nothing</b> 
            in Visual Basic) if there is no schema.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Updates the configuration section with the values from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads the configuration source located at the element that describes the configuration section.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the configuration section values as an XML element to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> that writes to the configuration source.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher">
            <summary>
            <para>Represents an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> class with the path to the configuration file and the name of the section</para>
            </summary>
            <param name="configFilePath">
            <para>The full path to the configuration file.</para>
            </param>
            <param name="configurationSectionName">
            <para>The name of the configuration section to watch.</para>
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            <para>The information is retrieved using the watched file modification timestamp</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.BuildEventData">
            <summary>
            Builds the change event data, including the full path of the watched file
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher">
            <summary>
            <para>Represents an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SetDefaultPollDelayInMilliseconds(System.Int32)">
            <summary>
            Sets the default poll delay.
            </summary>
            <param name="newDefaultPollDelayInMilliseconds">The new default poll.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ResetDefaultPollDelay">
            <summary>
            Reset the default to 15000 millisecond.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SetPollDelayInMilliseconds(System.Int32)">
            <summary>
            Sets the poll delay in milliseconds.
            </summary>
            <param name="newDelayInMilliseconds">
            The poll delay in milliseconds.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.#ctor">
            <summary>
            <para>Initialize a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher"/> class</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Finalize">
            <summary>
            <para>
            Allows an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free 
            resources and perform other cleanup operations before the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.
            </para>
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StartWatching">
            <summary>
            <para>Starts watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StopWatching">
            <summary>
            <para>Stops watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Disposing(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="isDisposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.OnConfigurationChanged">
            <summary>
            <para>Raises the <see cref="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged"/> event.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.BuildEventData">
            <summary>
            Builds the change event data, in a suitable way for the specific watcher implementation
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher">
            <summary>
            <para>Provides a way to watch for changes to configuration in storage.</para>
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StartWatching">
            <summary>
            When implemented by a subclass, starts the object watching for configuration changes
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StopWatching">
            <summary>
            When implemented by a subclass, stops the object from watching for configuration changes
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.SectionName">
            <summary>
            When implemented by a subclass, returns the section name that is being watched.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource">
            <summary>
            Represents an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that retrieves the configuration information from the 
            application's default configuration file using the <see cref="T:System.Configuration.ConfigurationManager"/> API.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> is a wrapper over the static configuration access API provided by 
            <see cref="T:System.Configuration.ConfigurationManager"/> and watches for changes in the configuration files to refresh the 
            configuration when a change is detected.
            </para>
            </remarks>
            <seealso cref="T:System.Configuration.ConfigurationManager"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter.
            </summary>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter, polling every 
            <paramref name="refreshInterval"/> milliseconds.
            </summary>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.DoRemove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            and saves the configuration file.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have 
            suffered notifications and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main 
            configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external 
            files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and 
            should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections 
            that have changed their location.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should 
            be refreshed.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement">
            <summary>
            Contains settings specific to the registration of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement.SectionName">
            <summary>
            The section name used to retrieve the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> if available.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement.ProviderTypeName">
            <summary>
            The name of the type that implements <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>. 
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElementCollection">
            <summary>
            Contains a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElementCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElementCollection"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection">
            <summary>
            Contains settings to determine which <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> to configure the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer"/> with.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.SectionName">
            <summary>The section name under which this configuration section is expected to be found.</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.CachingTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Caching Application Block</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.CryptographyTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Cryptography Application Block</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.ExceptionHandlingTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Exception Handling Application Block</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.InstrumentationTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for Instrumentation Configuration</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.LoggingTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Logging Application Block</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.PolicyInjectionTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Policy Injection Application Block</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.SecurityTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Security Application Block</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.DataAccessTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Data Access Application Block</summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.ValidationTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Validation Application Block</summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.TypeRegistrationProviders">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/> configured in this section.   
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension">
            <summary>
            Base class for Enterprise Library Blocks' container extensions.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension.Initialize">
            <summary>
            Ensure that this container has been configured to resolve Enterprise Library
            objects.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension">
            <summary>
            Main <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtension"/> for Enterprise Library.
            </summary>
            <remarks>
            This extension configures its container to resolve all Enterprise Library
            objects. It's a convienence method to save having to manually create a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator"/> object and configure it yourself.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/> class with the
            default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>		
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/> class with the
            the specified <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to use when retrieving
            configuration information.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.Initialize">
            <summary>
            Configures the Unity container to be able to resolve Enterprise Library
            objects.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension">
            <summary>
             Provides Reader/Writer lock logic to allow reconfiguring of the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
            <remarks>
            When overridden in a derived class, this method will modify the given
                        <see cref="T:Telerik.Microsoft.Practices.Unity.ExtensionContext"/> by adding strategies, policies, and so forth. to
                        install it's functions into the container.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.EnterWriteLock">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.ExitWriteLock">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.ReaderWriterLockStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
                        PreBuildUp method is called when the chain is being executed in the
                        forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.ReaderWriterLockStrategy.PostBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
                        PostBuildUp method is called when the chain has finished the PreBuildUp
                        phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.TransientPolicyBuildUpExtension">
            <summary>
            Container extension that allows for supplying additional, transient policies while building up an object
            through a container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.TransientPolicyBuildUpExtension.Initialize">
            <summary>
            Initializes the container with this extension's functionality.
            </summary>
            <remarks>
            This extension does not permfom any initialization.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.TransientPolicyBuildUpExtension.BuildUp(System.Type,System.Object,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">Name to use when looking up the typemappings and other configurations.</param>
            <param name="injectionMembers">Providers for transient policies to use.</param>
            <returns>The resulting object. By default, this will be object supplied in the <paramref name="existing"/> 
            parameter, but container extensions may add things like automatic proxy creation which would cause this to 
            return a different object (but still type compatible with t).</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.UnityContainerExtensions">
            <summary>
            Extension methods on <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> that provides
            some convenience wrappers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.UnityContainerExtensions.AddExtensionIfNotPresent(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.Unity.UnityContainerExtension)">
            <summary>
            Add a new extension to the given <paramref name="container"/>, only
            if the extension hasn't already been added to the container.
            </summary>
            <param name="container">The container to add the extension to.</param>
            <param name="extension">The extension object.</param>
            <returns><paramref name="container"/></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.UnityContainerExtensions.AddNewExtensionIfNotPresent``1(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Add a new extension to the given <paramref name="container"/>, only
            if the extension hasn't already been added to the container.
            </summary>
            <typeparam name="TExtension">Type of extension to add.</typeparam>
            <param name="container">Container to add the extension to.</param>
            <returns><paramref name="container"/></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilderExtensions">
            <summary>
            Provides instrumentation specific configuration extensions to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/>
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilderExtensions.ConfigureInstrumentation(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Configure Instrumentation for Enterprise Library.
            </summary>
            <param name="configurationSourceBuilderRoot">Extends the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration">
            <summary>
            Defines instrumentation configuration options.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration.EnableLogging">
            <summary>
            Enable logging 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration.EnablePerformanceCounters">
            <summary>
            Enable performance counters for instrumentation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration.ForApplicationInstance(System.String)">
            <summary>
            Set application instance for instrumentation.
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlingConfigurationSourceBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of exception handling configuration sections.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlingConfigurationSourceBuilderExtensions.ConfigureExceptionHandling(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configuration a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomHandlerLoggingConfigurationBuilderExtensions">
            <summary>
            Defines configuration extensions to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers"/> for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>
            configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomHandlerLoggingConfigurationBuilderExtensions.HandleCustom(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers,System.Type)">
            <summary>
            Handle the <see cref="T:System.Exception"/> with a custom exception handler.
            </summary>
            <param name="context">Interface to extend to add custom handler options.</param>
            <param name="customHandlerType">The <see cref="T:System.Type"/> of the custom handler.
            <remarks>This must derive from <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/></remarks></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomHandlerLoggingConfigurationBuilderExtensions.HandleCustom``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers)">
            <summary>
            Handle the <see cref="T:System.Exception"/> with a custom exception handler.
            </summary>
            <param name="context">Interface to extend to add custom handler options.</param>
            <typeparam name="T">The Type of the custom handler.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomHandlerLoggingConfigurationBuilderExtensions.HandleCustom(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers,System.Type,System.Collections.Specialized.NameValueCollection)">
             <summary>
             Handle the <see cref="T:System.Exception"/> with a custom exception handler.
             </summary>
             <param name="context">Interface to extend to add custom handler options.</param>
             <param name="customHandlerType">The <see cref="T:System.Type"/> of the custom handler.  </param>
            <param name="customHandlerSettings">Name-Value collection of attributes the custom handler can use to initialize itself.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension">
            <summary>
            Provides a base extensible class for handler configuration extensions.  This class eases the handling 
            of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers"/> that is the typical entry point
            for most exception handler's fluent configuration interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers)">
            <summary>
            Initializes a new instance of the ExceptoinHandlerConfigurationExtensions
            </summary>
            <param name="context">The context for configuration.</param>
            <remarks>
            This constructor expects to the find the implementor of <paramref name="context"/> provide
            the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling"/> and <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension"/> interfaces.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension.Context">
            <summary>
            The context for the extending handler in the fluent interface.  The extension interface
            is expected to return this context to enable continuation of configuring ExceptionHandling.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension.CurrentExceptionTypeData">
            <summary>
            The current exception type being built in the fluent interface.  Inheritors genereally should 
            add their <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> to this during construction.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension">
            <summary>
            Used to provide context to extensions of the Exception Handling fluent configuration interface.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension.CurrentExceptionTypeData">
            <summary>
            Retrieves data about the currently built up ExceptionTypeData.  Exception handler configuration extensions will use this to 
            add their handler information to the exception.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions"/>
            
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions">
            <summary>
            Defines configuration extensions to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers"/> for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>
            configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions.ReplaceWith``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers)">
            <summary>
            Replace exception with new exception type.
            </summary>
            <typeparam name="T">Replacement <see cref="T:System.Exception"/> type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions.ReplaceWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers,System.Type)">
            <summary>
            Replace exception with new exception type.
            </summary>
            <param name="context">Interface to extend to add ReplaceWith options.</param>
            <param name="replacingExceptionType">Replacement <see cref="T:System.Exception"/> type.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions">
            <summary>
             Provides <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/> configuration extensions to the ExceptionHandling fluent configuration interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions.WrapWith``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers)">
            <summary>
            Wrap exception with the new exception type.
            </summary>
            <typeparam name="T">Type of <see cref="T:System.Exception"/> to wrap existing exception with.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions.WrapWith(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers,System.Type)">
            <summary>
            Wrap exception with the new exception type.
            </summary>
            <param name="context">The extension context for this handler extension.</param>
            <param name="wrappingExceptionType">Type of <see cref="T:System.Exception"/>to wrap existing exception with.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlingLoggingConfigurationSourceBuilderExtensions">
            <summary>
            Extensions to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers"/> that support logging exceptions.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlingLoggingConfigurationSourceBuilderExtensions.LogToCategory(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers,System.String)">
            <summary>
            Category name to log <see cref="T:System.Exception"/> under.  This should align with a category name defined through the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LoggingConfigurationSourceBuilderExtensions"/> extensions.
            </summary>
            <param name="context">Interface to extend to provide this handler fluent interface.</param>
            <param name="categoryName">Name of the category.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BinaryFormatterBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> extensions to configure <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BinaryFormatterBuilderExtensions.BinaryFormatterNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder,System.String)">
            <summary>
            Creates the configuration builder for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/> instance.
            </summary>
            <param name="builder">Fluent interface extension point.</param>
            <param name="formatterName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/> instance that will be added to configuration.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CategoryFilterBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions"/> extensions to configure <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CategoryFilterBuilderExtensions.FilterOnCategory(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String)">
            <summary>
            Adds an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instance to the logging configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="categoryFilterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> instance added to configuration.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFilterBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions"/> extensions to configure custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFilterBuilderExtensions.FilterCustom``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance of type <typeparamref name="TCustomFilter"/> to the logging configuration.
            </summary>
            <typeparam name="TCustomFilter">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="customFilterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance added to configuration.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFilterBuilderExtensions.FilterCustom(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String,System.Type)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance of type <paramref name="customFilterType"/> to the logging configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="customFilterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance added to configuration.</param>
            <param name="customFilterType">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFilterBuilderExtensions.FilterCustom``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance of type <typeparamref name="TCustomFilter"/> to the logging configuration.
            </summary>
            <typeparam name="TCustomFilter">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="customFilterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance added to configuration.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomFilter"/> when creating an instance.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFilterBuilderExtensions.FilterCustom(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance of type <paramref name="customFilterType"/> to the logging configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="customFilterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance added to configuration.</param>
            <param name="customFilterType">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> instance.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customFilterType"/> when creating an instance.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFormatterBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> extensions to configure custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFormatterBuilderExtensions.CustomFormatterNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder,System.String)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance of type <typeparamref name="TCustomFormatter"/> to the logging configuration.
            </summary>
            <typeparam name="TCustomFormatter">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance.</typeparam>
            <param name="builder">Fluent interface extension point.</param>
            <param name="formatterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance added to configuration.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFormatterBuilderExtensions.CustomFormatterNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder,System.String,System.Type)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance of type <paramref name="customFormatterType"/> to the logging configuration.
            </summary>
            <param name="builder">Fluent interface extension point.</param>
            <param name="formatterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance added to configuration.</param>
            <param name="customFormatterType">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFormatterBuilderExtensions.CustomFormatterNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance of type <typeparamref name="TCustomFormatter"/> to the logging configuration.
            </summary>
            <typeparam name="TCustomFormatter">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance.</typeparam>
            <param name="builder">Fluent interface extension point.</param>
            <param name="formatterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance added to configuration.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomFormatter"/> when creating an instance.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomFormatterBuilderExtensions.CustomFormatterNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds an custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance of type <paramref name="customFormatterType"/> to the logging configuration.
            </summary>
            <param name="builder">Fluent interface extension point.</param>
            <param name="formatterName">Name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance added to configuration.</param>
            <param name="customFormatterType">Concrete type of the custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> instance.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customFormatterType"/> when creating an instance.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder">
            <summary>
            Entry point for configuring instances of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder.#ctor">
            <summary>
            Creates an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/>, which functions as an entry point to configure instances of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LogEnabledFilterBuilderExtensions">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LogEnabledFilterBuilderExtensions.FilterEnableOrDisable(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String)">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LoggingConfigurationSourceBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of logging configuration sections.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.LoggingConfigurationSourceBuilderExtensions.ConfigureLogging(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configuration a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PriorityFilterBuilderExtensions">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PriorityFilterBuilderExtensions.FilterOnPriority(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationOptions,System.String)">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToCustomTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToCustomTraceListenerExtensions.Custom(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String,System.Type)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.</param>
            <param name="customTraceListenerType">The concrete type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> that should be added to the configuration.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToCustomTraceListenerExtensions.Custom``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <typeparam name="TCustomListenerType">The concrete type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> that should be added to the configuration.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToCustomTraceListenerExtensions.Custom``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <typeparam name="TCustomListenerType">The concrete type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> that should be added to the configuration.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomListenerType"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToCustomTraceListenerExtensions.Custom(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/>.</param>
            <param name="customTraceListenerType">The concrete type of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> that should be added to the configuration.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customTraceListenerType"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToEmailTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToEmailTraceListenerExtensions.Email(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToFormattedEventLogTraceListenerExtension">
            <summary>
            Extension methods to support configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToFormattedEventLogTraceListenerExtension.EventLog(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToFlatFileTraceListenerExtension">
            <summary>
            Extension methods to support configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToFlatFileTraceListenerExtension.FlatFile(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToMsmqTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToMsmqTraceListenerExtensions.Msmq(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToRollingFileTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToRollingFileTraceListenerExtensions.RollingFile(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToSystemDiagnosticsTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToSystemDiagnosticsTraceListenerExtensions.SystemDiagnosticsListener(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:System.Diagnostics.TraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>. </returns>
            <seealso cref="T:System.Diagnostics.TraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToWmiTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToWmiTraceListenerExtensions.Wmi(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToXmlTraceListenerExtensions">
            <summary>
            Extension methods to support configuration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SendToXmlTraceListenerExtensions.XmlFile(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ILoggingConfigurationSendTo,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/> to the logging settings and creates
            a reference to this Trace Listener for the current category source.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="listenerName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TextFormatterBuilderExtensions">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder"/> extensions to configure <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.TextFormatterBuilder"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TextFormatterBuilderExtensions.TextFormatterNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FormatterBuilder,System.String)">
            <summary>
            Creates the configuration builder for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/> instance.
            </summary>
            <param name="builder">Fluent interface extension point.</param>
            <param name="formatterName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/> instance that will be added to configuration.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CacheSecurityInCacheStoreExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings"/> extension that allows to add <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> instances to the security configuration.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CacheSecurityInCacheStoreExtension.CacheSecurityInCacheStoreNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> instance to the security configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="cachingStoreName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> instance that will be added.</param>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AuthorizeUsingCustomProviderExtension">
            <summary>
            Fluent interface used to configure a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AuthorizeUsingCustomProviderExtension.AuthorizeUsingCustomProviderNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instance of type <typeparamref name="TCustomAuthorizationProvider"/> to the security configuration.
            </summary>
            <typeparam name="TCustomAuthorizationProvider">The concrete type of the custom authorization provider.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="customAuthorizationProviderName">The name of the authorization provider that should be added to configuration.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AuthorizeUsingCustomProviderExtension.AuthorizeUsingCustomProviderNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String,System.Type)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instance of type <paramref name="customAuthorizationProviderType"/> to the security configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="customAuthorizationProviderName">The name of the authorization provider that should be added to configuration.</param>
            <param name="customAuthorizationProviderType">The concrete type of the custom authorization provider.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AuthorizeUsingCustomProviderExtension.AuthorizeUsingCustomProviderNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instance of type <typeparamref name="TCustomAuthorizationProvider"/> to the security configuration.
            </summary>
            <typeparam name="TCustomAuthorizationProvider">The concrete type of the custom authorization provider.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="customAuthorizationProviderName">The name of the authorization provider that should be added to configuration.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomAuthorizationProvider"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AuthorizeUsingCustomProviderExtension.AuthorizeUsingCustomProviderNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instance of type <paramref name="customAuthorizationProviderType"/> to the security configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="customAuthorizationProviderName">The name of the authorization provider that should be added to configuration.</param>
            <param name="customAuthorizationProviderType">The concrete type of the custom authorization provider.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customAuthorizationProviderType"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AuthorizeUsingRuleProviderExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings"/> extensions to support configuring <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/> instances.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AuthorizeUsingRuleProviderExtension.AuthorizeUsingRuleProviderNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String)">
            <summary>
            Adds a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/> to the security configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="ruleBasedProviderName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/> instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CacheSecurityInCustomStoreExtension">
            <summary>
            Fluent interface used to configure a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instance.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CacheSecurityInCustomStoreExtension.CacheSecurityInCustomStoreNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instance of type <typeparamref name="TCustomSecurityCacheProvider"/> to the security configuration.
            </summary>
            <typeparam name="TCustomSecurityCacheProvider">The concrete type of the custom security cache provider.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="customCacheProviderName">The name of the security cache provider that should be added to configuration.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CacheSecurityInCustomStoreExtension.CacheSecurityInCustomStoreNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String,System.Type)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instance of type <paramref name="customCacheProviderType"/> to the security configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="customCacheProviderName">The name of the security cache provider that should be added to configuration.</param>
            <param name="customCacheProviderType">The concrete type of the custom security cache provider.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CacheSecurityInCustomStoreExtension.CacheSecurityInCustomStoreNamed``1(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instance of type <typeparamref name="TCustomSecurityCacheProvider"/> to the security configuration.
            </summary>
            <typeparam name="TCustomSecurityCacheProvider">The concrete type of the custom security cache provider.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="customCacheProviderName">The name of the security cache provider that should be added to configuration.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomSecurityCacheProvider"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CacheSecurityInCustomStoreExtension.CacheSecurityInCustomStoreNamed(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureSecuritySettings,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instance of type <paramref name="customCacheProviderType"/> to the security configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="customCacheProviderName">The name of the security cache provider that should be added to configuration.</param>
            <param name="customCacheProviderType">The concrete type of the custom security cache provider.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customCacheProviderType"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>. </returns>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SecuritySettingsExtension">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of security configuration settings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SecuritySettingsExtension.ConfigureSecurity(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to create a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns>A fluent interface to further configure the security configuration section.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface">
            <summary>
            Interface that is used to build fluent interfaces and hides methods declared by <see cref="T:System.Object"/> from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetType"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder">
            <summary>
            Base class for the reflection-based installers. These reflection-based installers 
            search through assemblies looking for the appropriate kinds of installable resources and
            arrange for them to be registered with the appropriate installer
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.Fill(System.Configuration.Install.Installer)">
            <summary>
            Fills the given installer with other, more specific kinds of installers that have been
            filled with the appropriate kinds of installable resources
            </summary>
            <param name="installer">Outer installer to be filled with nested installers for specific resources</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.InstrumentedTypes">
            <summary>
            Gets or sets a list of all instrumentented types found in a given assembly. Types are instrumented if they are
            attributed with <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>	 and another attribute specifying 
            another, more specific resource type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.#ctor(System.Type[],System.Type)">
            <summary>
            Initializes object by giving it access to an array of all available types and a specification of
            the more specific resource type that will be installed.
            </summary>
            <param name="availableTypes">Array of available types through which installer should look</param>
            <param name="instrumentationAttributeType">Attribute specifying the more specific resource type to search for</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.ConfirmAttributeExists(System.Type,System.Type)">
            <summary>
            Helper method to determine if the given type is attributed with the necessary attributes to be installed
            for a given installer
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="attributeType">More specific attribute used to match resource being installed</param>
            <returns>True if the attributes on the given <paramref name="instrumentedType"></paramref> matches <paramref name="attributeType"></paramref></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.IsInstrumented(System.Type,System.Type)">
            <summary>
            Helper method to determine if the attributes for a given type match the attributes used to 
            specify a specific kind of installable resource. The type should be attributed with <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>
            and the attribute passed to this method call.
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="instrumentedAttributeType">More specific attribute used to match resource being installed</param>
            <returns><b>true</b> if the type specifies intallable resources.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates one or more installers after iterating over the <paramref name="instrumentedTypes"></paramref>.
            The number of iterators returned depends on the specific needs of the particular installable type.
            </summary>
            <returns>Collection of installers created through iterating over included types</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter">
            <summary>
            Provides the friendly name of the application domain as the prefix in formatting a 
            particular instance of a performance counter.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter"/> with an Application Instance Name
            </summary>
            <param name="applicationInstanceName"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the Application
            Domain friendly name for the prefix for the instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "appDomainFriendlyName - nameSuffix"</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection">
            <summary>
            Configuration object for Instrumentation. This section defines the instrumentation behavior 
            for the entire application
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.SectionName">
            <summary>
            Section name
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes enabled state of the three forms of instrumentation
            </summary>
            <param name="performanceCountersEnabled">True if performance counter instrumentation is to be enabled</param>
            <param name="eventLoggingEnabled">True if event logging instrumentation is to be enabled</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes enabled state of the three forms of instrumentation and the instance name
            </summary>
            <param name="performanceCountersEnabled">True if performance counter instrumentation is to be enabled</param>
            <param name="eventLoggingEnabled">True if event logging instrumentation is to be enabled</param>
            <param name="applicationInstanceName">Value of the InstanceName</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor">
            <summary>
            Initializes object to default settings of all instrumentation types disabled and an empty InstanceName
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.PerformanceCountersEnabled">
            <summary>
            Gets and sets the value of PerformanceCountersEnabled
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.EventLoggingEnabled">
            <summary>
            Gets and sets the value of EventLoggingEnabled
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.ApplicationInstanceName">
            <summary>
            Gets and sets value of ApplicationInstanceName
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.GetSection(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieve the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection"/> from the given configuratio source.
            If the source is null, or does not contain an instrumentation section, then return a default
            section with instrumentation turned off.
            </summary>
            <param name="configurationSource">Configuration source containing section (or not).</param>
            <returns>The configuration section.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter">
            <summary>
            Provides a virtual PerformanceCounter interface that allows an application to maintain both individually 
            named counter instances and a single counter total instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Counters">
            <summary>
            Gets the list of performance counter instances managed by this object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a single performance counter instance named "Total"
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes multiple instances of performance counters to be managed by this object. 
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
            <param name="instanceNames">Param array of instance names to be managed</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.Diagnostics.PerformanceCounter[])">
            <summary>
            Initializes this object with performance counters created externally. It is the responsibility of the external
            counter factory to create an instance for the "Total" counter.
            </summary>
            <param name="counters">Param array of already initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see>s to be managed 
            by this instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Clear">
            <summary>
            Clears the raw count associated with all managed performance counters
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Value">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Increment">
            <summary>
            Increments each performance counter managed by this instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Increments by the given <paramref name="value"></paramref> each performance counter managed by this instance.
            </summary>
            <param name="value">Amount by which to increment each counter</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.GetValueFor(System.String)">
            <summary>
            Gets the current value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to get value.</param>
            <returns>Value of the given performance counter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.SetValueFor(System.String,System.Int64)">
            <summary>
            Sets the value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to set the value.</param>
            <param name="value">Value to which the given instance should be set.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.InstantiateCounter(System.String)">
            <summary>
            Initializes a performance counter, giving it the specified <paramref name="instanceName"></paramref>.
            </summary>
            <param name="instanceName">Instance name to be given to the instantiated <see cref="T:System.Diagnostics.PerformanceCounter"></see></param>.
            <returns>Initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see></returns>.
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Increment(System.String)">
            <summary>
            Increments the associated performance counters by one.
            </summary>
            <param name="instanceName">The instance to be incremented.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory">
            <summary>
            Factory for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see>s. Individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances are cached to prevent the same instance from being created multiple times.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.CreateCounter(System.String,System.String,System.String[])">
            <summary>
            Creates an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see> initialized with individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances. Instances are named according to <paramref name="instanceNames"></paramref> passed to this method.
            </summary>
            <param name="categoryName">Performance counter category name, as defined during installation.</param>
            <param name="counterName">Performance counter name, as defined during installation.</param>
            <param name="instanceNames">Param array of instance names for which individual counters should be created.</param>
            <returns>The new counter instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.ClearCachedCounters">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder">
            <summary>
            Binds an event source to an event handler.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.#ctor(System.Object,System.Object)">
            <summary>
            Initializes this object with the source and listener objects to be bound together.
            </summary>
            <param name="source">Object owning the event that will be bound to</param>
            <param name="listener">Object owning the method that will be added as a handler for specified event.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.Bind(System.Reflection.EventInfo,System.Reflection.MethodInfo)">
            <summary>
            Adds specified <paramref name="listenerMethod"></paramref> as an event handler for 
            the <paramref name="sourceEvent"></paramref>.
            </summary>
            <param name="sourceEvent">Event on source object to which <paramref name="listenerMethod"></paramref> will be added.</param>
            <param name="listenerMethod">Method to be added as event handler for <paramref name="listenerMethod"></paramref>.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute">
            <summary>
            Defines an event source to be installed by the reflection based installer system. Each field
            in this attribute is a placeholder for the same field as defined in the <see cref="T:System.Diagnostics.EventLogInstaller"></see>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.LogName">
            <summary>
            Gets the event log name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.SourceName">
            <summary>
            Gets the event source name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryCount">
            <summary>
            Gets and sets the category count.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryResourceFile">
            <summary>
            Gets the category resource file name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.MessageResourceFile">
            <summary>
            Gets and sets the message resource file name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.ParameterResourceFile">
            <summary>
            Gets and sets the parameter resource file name
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes this object with the event log name and source to be installed.
            </summary>
            <param name="logName">Event log name to which the source should be added.</param>
            <param name="sourceName">Event log source to be added.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter">
            <summary>
            Formats an event log entry to the defined format.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String)">
            <overloads>
            Initializes this object with the name of the specific block using this class.
            </overloads>
            <summary>
            Initializes this object with the name of the specific block using this class.
            </summary>
            <param name="blockName">Name of block using this functionality.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String,System.String)">
            <summary>
            Initializes this object	with the given application and block names.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="blockName">Name of the block using this functionality.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique event log source that is found.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="potentialTypes">Array of types to inspect check for event log sources needing installation</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.EventLogInstaller"></see> instances for each separate event log source needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            event log sources to be installed.</param>
            <returns>Collection of installers containing event log sources to be installed.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute">
            <summary>
            Defines those classes and structs that have some sort of resources that need to be installed.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter">
            <summary>
            Formats an event log entry for logging to event log.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute">
            <summary>
            Base class for attributes used to identify instrumentation producers or consumers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name.
            </summary>
            <param name="subjectName">Subject name being produced or consumed</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.SubjectName">
            <summary>
            Gets the subject name
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute">
            <summary>
            Defines methods that are consuming instrumentation events.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name being consumed.
            </summary>
            <param name="subjectName">Subject name of the event being consumed.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener">
            <summary>
            Listens for events raised by block classes and reports them to appropriate instrumentation 
            services (EventLog, or PeformanceCounters).
            
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.EventLoggingEnabled">
            <summary>
            Gets and sets the EventLoggingEnabled property
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.PerformanceCountersEnabled">
            <summary>
            Gets and sets the PerformanceCountersEnabled property
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <overloads>
            Base constructor for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </overloads>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String,System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceName">Unique name for this instance</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String[],System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceNames">Unique names for th <see cref="T:System.Diagnostics.PerformanceCounter"></see> instances to be managed by this listener.</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.GetEventSourceName">
            <summary>
            Gets the event source name as defined in the class metadata.
            </summary>
            <returns>The event source name.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreatePerformanceCounters(System.String[])">
            <summary>
            Initializes the performance counter instances managed by this listener.
            </summary>
            <param name="instanceNames">Instance names for performance counters.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreateInstanceName(System.String)">
            <summary>
            Creates a unique name for a specific performance counter instance.
            </summary>
            <param name="nameSuffix">Instance name for a specific performance counter.</param>
            <returns>The created instance name.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute">
            <summary>
            Defines a class that will listen for instrumentation events broadcast by other classes
            and report them to system services. This attribute is placed on the class that is to be
            listened to, in order to define the class that will listen to it.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerType">
            <summary>
            Gets type of class to instantiate to listen for events.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerBinderType">
            <summary>
            Gets type of class to use to bind an instance of the attributed class to 
            an instance of the listener class
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type)">
            <overloads>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </overloads>
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. Use when
            you need to specify an explicit binder class.
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
            <param name="listenerBinderType">Instrumentation binder listener type to instantiate.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute">
            <summary>
            Defines events that are producing instrumentation events.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes this object with the instrumentation subject name being produced.
            </summary>
            <param name="subjectName">Subect name of event being produced.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            Each instance of a performance counter in Enterprise Library is given a name of the format
            "Name prefix - counter name"
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the prefix for the
            instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "prefix - nameSuffix"</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            This class does no formatting, returning the provided name suffix as the counter name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter.CreateName(System.String)">
            <summary>
            Returns the given <paramref name="nameSuffix"></paramref> as the created name.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "nameSuffix"</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute">
            <summary>
            Defines a <see cref="T:System.Diagnostics.PerformanceCounter"></see>. Used by the reflection-based installers to 
            prepare a performance counter for installation.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            Initializes this object with all data needed to install a <see cref="T:System.Diagnostics.PerformanceCounter"></see>.
            </summary>
            <param name="counterName">Performance counter name.</param>
            <param name="counterHelp">Name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.</param>
            <param name="counterType">Performance Counter type.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterHelp">
            <summary>
            Get the name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterType">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> type. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterHelp">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> help resource name. 
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterName">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> name. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.HasBaseCounter">
            <summary>
            Used to determine if the counter being installed has a base counter associated with it.
            </summary>
            <returns>True if counter being installed has a base counter associated with it.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique performance counter category that is found.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="availableTypes">Array of types to inspect check for performance counter definitions needing installation</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.PerformanceCounterInstaller"></see> instances for each separate performance counter definition needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            performance counter definitions to be installed.</param>
            <returns>Collection of installers containing performance counter definitions to be installed.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.GetCategoryHelp(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute,System.Reflection.Assembly)">
            <summary>
            Gets the category help for a performance counter.
            </summary>
            <param name="attribute">The performance counter attribute.</param>
            <param name="originalAssembly">The assembly where the help is defined.</param>
            <returns>The help for the performance counter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.GetCounterHelp(System.String,System.Reflection.Assembly)">
            <summary>
            Gets the counter help for a performance counter.
            </summary>
            <param name="resourceName">The resource name.</param>
            <param name="originalAssembly">The assembly where the help is defined.</param>
            <returns>The help for the performance counter.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName">
            <summary>
            Constructs an instance name for a <see cref="T:System.Diagnostics.PerformanceCounter"></see> following embedded
            formatting rules.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.#ctor(System.String,System.String)">
            <overloads>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </overloads>
            <summary>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </summary>
            <param name="prefix">Counter name prefix.</param>
            <param name="suffix">Counter name suffix.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <overloads>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </overloads>
            <summary>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </summary>
            <param name="prefix">Counter name prefix.</param>
            <param name="suffix">Counter name suffix.</param>
            <param name="maxPrefixLength">Max prefix length.</param>
            <param name="maxSuffixLength">Max suffix length.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.ToString">
            <summary>
            Returns properly formatted counter name as a string.
            </summary>
            <returns>Formatted counter name.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute">
            <summary>
            Defines information needed to install a <see cref="T:System.Diagnostics.PerformanceCounterCategory"></see>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryHelp">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category help resource name.
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String)">
             <overloads>
             Initializes this attribute with information needed to install this performance counter category.
             </overloads>
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType)">
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
             <param name="categoryType">Performance counter category type.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1">
            <summary>
            Generic installer wrapper around installer builder. Used to find and install 
            given type of installable resource.
            </summary>
            <typeparam name="TInstallerBuilder">Specific type of installer builder to instantiate</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Install(System.Collections.IDictionary)">
            <summary>
            Installs the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Uninstall(System.Collections.IDictionary)">
            <summary>
            Uninstalls the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter">
            <summary>
            A formatter object that allows replacement tokens in a string.
            The supported tokens are:
            <list type="bullet">
            <item><term>{appdomain}</term><description>Includes the current appdomain's friendly name.</description></item>
            <item><term>{assembly}</term><description>Includes the assembly name.</description></item>
            <item><term>{namespace}</term><description>Includes the target class's namespace.</description></item>
            <item><term>{type}</term><description>Includes the name of the type containing the target method.</description></item>
            <item><term>{method}</term><description>Includes the name of the target method.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> that replaces tokens
            using the information in the given method invocation.
            </summary>
            <param name="input"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> object containing information
            about the current method call.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.CannotCreateDesignSource">
            <summary>
              Looks up a localized string similar to Cannot create design source for rootSource other than DesignConfigurationSource..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ConfigurationSourceInvalidTypeErrorMessage">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; defined in the &apos;{1}&apos; configuration source is invalid.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryExceptionTemplate">
            <summary>
              Looks up a localized string similar to The exception that occured was: {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryHeaderTemplate">
            <summary>
              Looks up a localized string similar to An error occurred in application {0} in the {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIDictionary">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from IDictionary..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIList">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not derive from IList..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerAttributeNotSet">
            <summary>
              Looks up a localized string similar to The [Assembler] attribute is not set in the configuration object type {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerTypeNotCompatible">
            <summary>
              Looks up a localized string similar to The assembler configured for type {0} has type {2} which is not compatible with type {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionBaseConfigurationSourceElementIsInvalid">
            <summary>
              Looks up a localized string similar to The base ConfigurationSourceElement configuration type can not be used as a concrete configuration element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCannotAddParametersAfterDispose">
            <summary>
              Looks up a localized string similar to Cannot add new paramters after Finish() or Dispose()..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCanNotConvertType">
            <summary>
              Looks up a localized string similar to The AssemblyQualifiedTypeNameConverter can only convert values of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCannotFinish">
            <summary>
              Looks up a localized string similar to Builder has already added policies..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationFileNotFound">
            <summary>
              Looks up a localized string similar to The section {0} could not be saved because the file does not exist..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              Looks up a localized string similar to The configuration file {0} could not be found..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectIsNotCustomProviderData">
            <summary>
              Looks up a localized string similar to The configuration object for type &apos;{0}&apos; with name &apos;{1}&apos; has type &apos;{2}&apos; which is does not implement ICustomProviderData..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectWithTypeDoesNotHaveTypeSet">
            <summary>
              Looks up a localized string similar to The concrete type for polymorphic object named &apos;{1}&apos; in hierarchy {2} is not defined in configuration object {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSectionPointsToNonExistingSource">
            <summary>
              Looks up a localized string similar to The configuration section &apos;{0}&apos; specifies Source &apos;{1}&apos;, which is not declared in the configuration sources section..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSourceNotFound">
            <summary>
              Looks up a localized string similar to A configuration source named &apos;{0}&apos; was not found in the {1} section..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSourceSectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration source section is not found in the application configuration file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionContainerPolicyCreatorAttributeNotPresent">
            <summary>
              Looks up a localized string similar to The required &quot;ContainerPolicyCreatorAttribute&quot; is not present in the supplied type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCustomFactoryAttributeNotFound">
            <summary>
              Looks up a localized string similar to The [CustomFactory] attribute was not found on type {0} while processing request for id &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCustomProviderTypeDoesNotHaveTheRequiredConstructor">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; specified as a custom provider does not have the required public constructor with a single NameValueCollection parameter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionEventRaisingFailed">
            <summary>
              Looks up a localized string similar to There was an error raising an event in .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionFactoryMethodHasInvalidReturnType">
            <summary>
              Looks up a localized string similar to The method with signature {0} is not a valid factory method to build type {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionIncompaitbleMergeElementType">
             <summary>
               Looks up a localized string similar to Cannot merge the configuration element.
            The local elements type &apos;{0}&apos; is  incompatible with the parent elements type &apos;{1}&apos;..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionInvalidType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; cannot be resolved. Please verify the spelling is correct or that the full type name is provided..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustBeNameTypeConfigurationElement">
            <summary>
              Looks up a localized string similar to The supplied configuration object has type &apos;{0}&apos;, which is not a descendant of &apos;NameTypeConfigurationElement&apos; as required..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustHaveNoArgsConstructor">
            <summary>
              Looks up a localized string similar to The required zero argument constructor is not available for the supplied type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustImplementIContainerPolicyCreator">
            <summary>
              Looks up a localized string similar to The required interface &quot;IContainerPolicyCreator&quot; is not implemented by the supplied type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNamedConfigurationNotFound">
            <summary>
              Looks up a localized string similar to The configuration could not be found for name &apos;{0}&apos; in factory {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoConfigurationElementAttribute">
            <summary>
              Looks up a localized string similar to The type {0} does not contain the ConfigurationElementTypeAttribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoConfigurationObjectPolicySet">
            <summary>
              Looks up a localized string similar to No policy specifying the configuration source for the container has been set. The EnterpriseLibraryCoreExtension is probably missing..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoMatchingConstructorFound">
            <summary>
              Looks up a localized string similar to No public constructor with {1} arguments was found for type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoMethodAnnotatedForInjectionFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have a public method annotated as an injection target as required by the use of injection..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoSuitableFactoryMethodFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have a static method with a TargetConstructorAttribuite suitable to create an object of type {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoTypeAttribute">
            <summary>
              Looks up a localized string similar to The type attribute does not exist on the element {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionParameterNotAnnotatedForInjection">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; for injection target &apos;{1}&apos; in type &apos;{2}&apos; is missing the injection interpretation attribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPerformanceCounterRedefined">
            <summary>
              Looks up a localized string similar to The performance counter &apos;{0}&apos; in category &apos;{1}&apos; is redefined in type {2} with a different configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPolicyBuilderFinished">
            <summary>
              Looks up a localized string similar to Attempt to continue working with a PolicyBuilder after the policies have been added to a policy list for type &apos;{1}&apos; with key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPolicyBuilderStillWaitingForPropertyPolicy">
            <summary>
              Looks up a localized string similar to The specified policies cannot be added: a property policy mapping is still taking place..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPropertyAccessExpressionNotPropertyAccess">
            <summary>
              Looks up a localized string similar to The supplied expression is not a valid property access expression: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPropertyNotFound">
            <summary>
              Looks up a localized string similar to e {2}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRedirectedConfigurationSectionNotFound">
            <summary>
              Looks up a localized string similar to Unable to find the redirected section {0} in the specified configuration source {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRegistrationServiceTypeIsNotCompatible">
            <summary>
              Looks up a localized string similar to Service type of {0} is not compatible with supplied expression type of {1}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRegistrationTypeExpressionMustBeNewLambda">
            <summary>
              Looks up a localized string similar to Lambda expression must construct a new instance of a type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRetrievalAttributeNotFound">
            <summary>
              Looks up a localized string similar to The type {0} does not contain the ConfigurationDataRetrievalAttribute required to resolve named references..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionShouldBeImplementedBySubclass">
            <summary>
              Looks up a localized string similar to Method must be overriden by subclass..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSourcePropertyDoesNotExist">
            <summary>
              Looks up a localized string similar to Could not retrieve parameter value. The property {0} does not exist for type {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to The value can not be null or string or empty..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSuppliedCreationExpressionIsNotNewExpression">
            <summary>
              Looks up a localized string similar to A creation expression must be a constructor call, but the supplied expression was &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSystemSourceNotDefined">
            <summary>
              Looks up a localized string similar to The system configuration source is not defined in the configuration file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTheSpecifiedDefaultProviderDoesNotExistInConfiguration">
            <summary>
              Looks up a localized string similar to The configuration object for default provider named &apos;{0}&apos; for type &apos;{1}&apos; was not found in the supplied list..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeCouldNotBeCreated">
            <summary>
              Looks up a localized string similar to The type {0} from configuration could not be created..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeDoesNotProvideCorrectConstructor">
            <summary>
              Looks up a localized string similar to Type does not provide a constructor taking a single parameter type of NameValueCollection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeMustDeriveFromType">
            <summary>
              Looks up a localized string similar to Type must be derived from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeMustImplementInterface">
            <summary>
              Looks up a localized string similar to Type must implement interface &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotCustomFactory">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of ICustomFactory for CustomFactoryAttribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotNameMapper">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IConfigurationNameMapper for ConfigurationNameMapperAttribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotRetriever">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IConfigurationDataRetriever for ConfigurationDataRetrievalAttribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnableToMatchConstructorToConfigurationObject">
            <summary>
              Looks up a localized string similar to Default policy creation failed: The properties in the supplied configuration object of type {0} cannot be matched to any constructor on type {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnexpectedType">
            <summary>
              Looks up a localized string similar to The expected type &apos;{0}&apos; was not provided..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnknownResolveMethod">
            <summary>
              Looks up a localized string similar to An call to an unknown method named &apos;{0}&apos; in the Resolve class was found in the supplied argument expression: &apos;{1}&apos;. Cannot create policies for this expression..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnrecognizedContainerMarkerMethod">
            <summary>
              Looks up a localized string similar to Unrecognized Container marker method..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnrecognizedDependencyParameterType">
            <summary>
              Looks up a localized string similar to Unrecognized DependencyParameter type: {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnsupportedBindingExpressionType">
            <summary>
              Looks up a localized string similar to The initialization expression for property {0} is not supported: only simple bindings are supported..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.FileConfigurationSourceName">
            <summary>
              Looks up a localized string similar to File Configuration Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.SystemConfigurationSourceName">
            <summary>
              Looks up a localized string similar to System Configuration Source.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter">
            <summary>
            This class provides an engine to process a string that contains
            replacement tokens of the form "{token}" and replace them with
            calculated value later.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.#ctor">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken[])">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>.
            </summary>
            <param name="tokens">List of tokens to replace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken})">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>.
            </summary>
            <param name="tokens">List of tokens to replace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.Add(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken[])">
            <summary>
            Add a new set of replacement tokens.
            </summary>
            <param name="tokens">Tokens to add to the list.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.AddRange(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken})">
            <summary>
            Add new tokens to the set of replacements.
            </summary>
            <param name="tokens">Tokens to add to the list.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.Format(System.String)">
            <summary>
            Format the given template, replacing any tokens present.
            </summary>
            <param name="template">The string to format, containing the replacement tokens.</param>
            <returns>The formatted string, with tokens replaced.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken">
            <summary>
            A single replacement token used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>. A
            token consists of two things:
            <list type="bullet">
            <item><description>The actual text of the token (including the {})</description></item>
            <item><description>A delegate to retrieve the value to replace the token.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementTextDelegate)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken"/>.
            </summary>
            <param name="token">The string marking where the token should be replaced.</param>
            <param name="getReplacementText">Delegate to return the value that replaces the token.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.Token">
            <summary>
            The token string.
            </summary>
            <value>The token string.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.ReplacementText">
            <summary>
            The text to replace this token with.
            </summary>
            <value>Replacement text.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.ReplaceToken(System.Text.StringBuilder)">
            <summary>
            Replace this token in the given stringbuilder.
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/> holding the template to perform the token replacement on.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ReplacementTextDelegate">
            <summary>
            Delegate type giving a function that returns the replacement text for a token.
            </summary>
            <returns>The replacement text.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader">
            <summary>
            Helper class to load resources strings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader.LoadString(System.String,System.String)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader.LoadString(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <param name="asm">The assembly to load the resource from.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver">
            <summary>
            Resolves strings by returning a constant value.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver"/> with a constant value.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.DelegateStringResolver">
            <summary>
            Resolves strings by invoking a delegate and returning the resulting value.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.DelegateStringResolver.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver"/> with a delegate.
            </summary>
            <param name="resolverDelegate">The delegate to invoke when resolving a string.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions">
            <summary>
            Some utility extensions on <see cref="T:System.Collections.Generic.IEnumerable`1"/> to suppliment
            those available from Linq.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute <paramref name="action"/> for each element of <paramref name="sequence"/>.
            </summary>
            <typeparam name="T">Type of items in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">Sequence of items to act on.</param>
            <param name="action">Action to invoke for each item.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Given a sequence, combine it with another sequence, passing the corresponding
            elements of each sequence to the <paramref name="zipper"/> action to create
            a new single value from the two sequence elements. "Zip" here refers to a zipper,
            not the compression algorithm. The resulting sequence will have the same number
            of elements as the shorter of sequence1 and sequence2.
            </summary>
            <typeparam name="T1">Type of the elments in the first sequence.</typeparam>
            <typeparam name="T2">Type of the elements in the second sequence.</typeparam>
            <typeparam name="TResult">Type of the resulting sequence elements.</typeparam>
            <param name="sequence1">The first sequence to combine.</param>
            <param name="sequence2">The second sequence to combine.</param>
            <param name="zipper">Func used to calculate the resulting values.</param>
            <returns>The result sequence.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Take two sequences and return a new sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects.
            </summary>
            <typeparam name="T1">Type of objects in sequence1.</typeparam>
            <typeparam name="T2">Type of objects in sequence2.</typeparam>
            <param name="sequence1">First sequence.</param>
            <param name="sequence2">Second sequence.</param>
            <returns>The sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Take two sequences and return a <see cref="T:System.Collections.Generic.IDictionary`2"/> with the first sequence
            holding the keys and the corresponding elements of the second sequence containing the values.
            </summary>
            <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the dictionary.</typeparam>
            <param name="keys">Sequence of dictionary keys.</param>
            <param name="values">Sequence of dictionary values.</param>
            <returns>The constructed dictionary.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver">
            <summary>
            Resolves string objects. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver.GetString">
            <summary>
            Returns a string represented by the receiver.
            </summary>
            <returns>The string object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver">
            <summary>
            Resolves strings by retrieving them from assembly resources, falling back to a specified
            value.
            </summary>
            <remarks>
            If both the resource type and the resource name are available, a resource lookup will be 
            performed; otherwise, the default value will be returned.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver"/>
            for a resource type, a resource name and a fallback value.
            </summary>
            <param name="resourceType">The type that identifies the resources file.</param>
            <param name="resourceName">The name of the resource.</param>
            <param name="fallbackValue">The fallback value, to use when any of the resource
            identifiers is not available.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver"/>
            for a resource type name, a resource name and a fallback value.
            </summary>
            <param name="resourceTypeName">The name of the type that identifies the resources file.</param>
            <param name="resourceName">The name of the resource.</param>
            <param name="fallbackValue">The fallback value, to use when any of the resource
            identifiers is not available.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ServiceLocatorExtensions">
            <summary>
            Extension methods on <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> for convenience.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.ServiceLocatorExtensions.Dispose(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            If the object implements <see cref="T:System.IDisposable"/> then call it.
            </summary>
            <param name="locator">The service locator to dispose, if possible.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.TypeExtensions">
            <summary>
            Extensios to <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.TypeExtensions.FindGenericParent(System.Type,System.Type)">
            <summary>
             Locates the generic parent of the type
            </summary>
            <param name="rootType">Type to begin search from.</param>
            <param name="parentType">Open generic type to seek</param>
            <returns>The found parent that is a closed generic of the <paramref name="parentType"/> or null</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.WrappedAsyncOperation">
            <summary>
            A helper class that provides the code needed to wrap an existing
            asynchronous operation and return a different implementation of
            <see cref="T:System.IAsyncResult"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.WrappedAsyncOperation.BeginAsyncOperation``1(System.AsyncCallback,System.Func{System.AsyncCallback,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
            <summary>
            Start an asyncronous operation that wraps a lower-level
            async operation.
            </summary>
            <typeparam name="TWrappingAsyncResult">Type that implements IAsyncResult
            that will be returned from this method.</typeparam>
            <param name="callback">The user's callback method to be called when
            the async operation completes.</param>
            <param name="beginOperation">A delegate that invokes the underlying
            async operation that we're wrapping.</param>
            <param name="wrappingResultCreator">A delegate that takes the inner
            async result and returns the wrapping instance of <typeparamref name="TWrappingAsyncResult"/>.
            </param>
            <returns>The <see cref="T:System.IAsyncResult"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData">
            <summary>
            Configuration object for Custom Providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.TypeName">
            <summary>
            Gets or sets the fully qualified name of the <see cref="T:System.Type"/> the element is the configuration for.
            </summary>
            <value>
            the fully qualified name of the <see cref="T:System.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Attributes">
            <summary>
            Gets the custom configuration attributes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#ExceptionHandling#Configuration#CustomHandlerData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#ExceptionHandling#Configuration#CustomHandlerData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#ExceptionHandling#Configuration#CustomHandlerData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#ExceptionHandling#Configuration#CustomHandlerData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#ExceptionHandling#Configuration#CustomHandlerData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#ExceptionHandling#Configuration#CustomHandlerData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData.GetRegistrations(System.String)">
            <summary>
            Retrieves the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> container configuration model for custom exception handling data.
            </summary>
            <param name="namePrefix">The child prefix to use when reference child elements</param>
            <returns>The type registration for the custom exception handler</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.AddExceptionHandlingSettingsCommandTitle">
            <summary>
              Looks up a localized string similar to Add Exception Handling Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.CustomHandlerDataAddCommand">
            <summary>
              Looks up a localized string similar to Custom Handler (using type picker).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.CustomHandlerDataDescription">
            <summary>
              Looks up a localized string similar to An Exception Handler implemented as a custom class added to Enterprise Library..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.CustomHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Exception Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.CustomHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.CustomHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.CustomHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.CustomHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataDescription">
             <summary>
               Looks up a localized string similar to A Call Handler that provides the capability to manage and process exceptions in a standard way. 
            This handler uses the Exception Handling Application Block to handle exceptions raised by the target object..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Exception Handling Call Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataExceptionPolicyNameDescription">
            <summary>
              Looks up a localized string similar to The name of the exception handling policy to use, as configured in the Exception Handling Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataExceptionPolicyNameDisplayName">
            <summary>
              Looks up a localized string similar to Exception Policy Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Exception Handling Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataOrderDescription">
             <summary>
               Looks up a localized string similar to The position of the handler within the policy handler chain, starting from 1. 
            The default value is zero, which means that there is no explicit order specified for the handler in relation to other 
            handlers in the same handler chain..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataOrderDisplayName">
            <summary>
              Looks up a localized string similar to Order.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Exception Handling Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionCallHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlerDataDescription">
             <summary>
               Looks up a localized string similar to Handles an exception passed to the block and performs an action on it, such as wrapping or logging it, 
            and then passes it on to the next exception handler or returns it to the caller..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Exception Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlingSettingsDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for the Exception Handling Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlingSettingsDisplayName">
            <summary>
              Looks up a localized string similar to Exception Handling Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlingSettingsExceptionPoliciesDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for all Exception Handling Policies..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionHandlingSettingsExceptionPoliciesDisplayName">
            <summary>
              Looks up a localized string similar to Policies.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionPolicyDataDescription">
             <summary>
               Looks up a localized string similar to A policy defines the exceptions it will handle, and the set of Exception Handlers that it will execute when 
            one of the specified exceptions is passed to the block..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionPolicyDataDisplayName">
            <summary>
              Looks up a localized string similar to Policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionPolicyDataExceptionTypesDescription">
            <summary>
              Looks up a localized string similar to The Exception types configured for the Exception Handling Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionPolicyDataExceptionTypesDisplayName">
            <summary>
              Looks up a localized string similar to Exception Types.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionPolicyDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Exception Handling Policy..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionPolicyDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataDescription">
             <summary>
               Looks up a localized string similar to Each Exception Type configured for a policy can specify a series of Exception Handlers that will 
            execute when an exception of the specified type is sent to the block for handling by this policy..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataDisplayName">
            <summary>
              Looks up a localized string similar to Exception Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataExceptionHandlersDescription">
            <summary>
              Looks up a localized string similar to The Exception Handlers configured for this Exception type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataExceptionHandlersDisplayName">
            <summary>
              Looks up a localized string similar to Handlers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataPostHandlingActionDescription">
             <summary>
               Looks up a localized string similar to The action the Exception Handling Block will take after executing all of the handlers for this Exception type.  
            None means that the block will return false to the application allowing it to resume execution. 
            NotifyRethrow means that the block will return true to the application, which should re-throw the original exception.
            ThrowNewException means that the block will throw the exception that exists after the final handler runs. 
            However, if you use the overload of the HandleException method that takes [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataPostHandlingActionDisplayName">
            <summary>
              Looks up a localized string similar to Post handling action.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ExceptionTypeDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataDescription">
             <summary>
               Looks up a localized string similar to Replaces the exception sent to the block with another exception type. 
            The message can be specified for the replacement exception type..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Replace Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataExceptionMessageDescription">
            <summary>
              Looks up a localized string similar to The message for the replacement exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataExceptionMessageDisplayName">
            <summary>
              Looks up a localized string similar to Exception Message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataExceptionMessageResourceNameDescription">
            <summary>
              Looks up a localized string similar to The key in an external resource file for the localized string to use as the message for the replacement exception. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataExceptionMessageResourceNameDisplayName">
            <summary>
              Looks up a localized string similar to Message Resource Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataExceptionMessageResourceTypeDescription">
            <summary>
              Looks up a localized string similar to The type of the external resource file containing the localized string to use as the message for the replacement exception. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataExceptionMessageResourceTypeDisplayName">
            <summary>
              Looks up a localized string similar to Message Resource Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Replace Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataReplaceExceptionTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the replacement exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataReplaceExceptionTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Replace Exception Type .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Replace Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.ReplaceHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataDescription">
             <summary>
               Looks up a localized string similar to Wraps the exception sent to the block as the inner exception of a new exception type. 
            The message can be specified for the wrapping exception type..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Wrap Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataExceptionMessageDescription">
            <summary>
              Looks up a localized string similar to The message for the wrapping exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataExceptionMessageDisplayName">
            <summary>
              Looks up a localized string similar to Exception Message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataExceptionMessageResourceNameDescription">
            <summary>
              Looks up a localized string similar to The key in an external resource file for the localized string to use as the message for the wrapping exception. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataExceptionMessageResourceNameDisplayName">
            <summary>
              Looks up a localized string similar to Message Resource Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataExceptionMessageResourceTypeDescription">
            <summary>
              Looks up a localized string similar to The type of the external resource file containing the localized string to use as the message for the wrapping exception. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataExceptionMessageResourceTypeDisplayName">
            <summary>
              Looks up a localized string similar to Message Resource Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Wrap Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Wrap Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataWrapExceptionTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the wrapping exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.DesignResources.WrapHandlerDataWrapExceptionTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Wrap Exception Type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData">
            <summary>
            Configuration element storing configuration information for the
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of the handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.#ctor(System.String,System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of the handler.</param>
            <param name="exceptionPolicyName">Exception policy name to use in handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of the handler.</param>
            <param name="handlerOrder">Order to use in handler.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.ExceptionPolicyName">
            <summary>
            The exception policy name as defined in configuration for the Exception Handling Application Block.
            </summary>
            <value>The "exceptionPolicyName" attribute in configuration</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData">
            <summary>
            Represents the configuration for an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/>.
            </summary>    
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.#ctor">
            <summary>
            Initializes an instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.#ctor(System.Type)">
            <summary>
            Initializes an instance of an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> class with a name and an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/> type.
            </summary>
            <param name="type">
            The configured <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/> type.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Initializes an instance of an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> class with a name and an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/> type.
            </summary>
            <param name="name">
            The name of the configured <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/>.
            </param>
            <param name="type">
            The configured <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/> type.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.GetRegistrations(System.String)">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration" /> for the exception handler data provided.
            </summary>
            <remarks>
            The method at the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> should not be called directly and is expected to
            be implemented by inheritors.  Since the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> requires a default constructor for 
            serialization purposes, the class could not be made abstract.
            </remarks>
            <param name="namePrefix">The prefix to use when building references to child elements.</param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for the exception handler data</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.BuildName(System.String)">
            <summary>
            Builds a name with the supplied prefix. 
            </summary>
            <param name="prefix">Prefix to use when building a name</param>
            <returns>A name as string</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings">
            <summary>
            Represents the Exception Handling Application Block configuration section in a configuration file.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.SectionName">
            <summary>
            Gets the configuration section name for the library.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.GetExceptionHandlingSettings(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings"/> section in the configuration source.
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to get the section from.</param>
            <returns>The exception handling section.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.ExceptionPolicies">
            <summary>
            Gets a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/> objects.
            </summary>
            <value>
            A collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/> objects.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries to use when configuring a container for Exception Handling
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData">
            <summary>
            Represents the configuration for an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>.
            </summary> 
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData.#ctor">
            <summary>
            Creates a new instance of ExceptionPolicyData.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/> class with a name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/>.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData.ExceptionTypes">
            <summary>
            Gets a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> objects.
            </summary>
            <value>
            A collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> objects.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData.GetRegistration(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieves the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for registering a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/> in the container.
            </summary>
            <returns>A completed <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData">
            <summary>
            Represents the configuration for an <see cref="T:System.Exception"/>
            that will be handled by an exception policy. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.#ctor(System.String,System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> class with a name, the <see cref="T:System.Exception"/> type and a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/>.
            </summary>
            <param name="name">The name of the configured exception.</param>
            <param name="type">The <see cref="T:System.Exception"/> type.</param>
            <param name="postHandlingAction">One of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.#ctor(System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> class with a name, the fully qualified type name of the <see cref="T:System.Exception"/> and a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/>.
            </summary>
            <param name="name">The name of the configured exception.</param>
            <param name="typeName">The fully qualified type name of the <see cref="T:System.Exception"/> type.</param>
            <param name="postHandlingAction">One of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/> values.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.Type">
            <summary>
            Gets or sets the <see cref="T:System.Exception"/> type.
            </summary>
            <value>
            The <see cref="T:System.Exception"/> type
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.TypeName">
            <summary>
            Gets or sets the fully qualified type name of the <see cref="T:System.Exception"/> type.
            </summary>
            <value>
            The fully qualified type name of the <see cref="T:System.Exception"/> type.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction">
            <summary>
            Gets or sets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/> for the exception.
            </summary>
            <value>
            One of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/> values.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.ExceptionHandlers">
            <summary>
            Gets a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> objects.
            </summary>
            <value>
            A collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> objects.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.GetRegistration(System.String)">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> container configuration model to register <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> items with the container.
            </summary>
            <param name="namePrefix"></param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider.ProviderTypePropertyName">
            <summary>
            The name of the provider type property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider.AttributesPropertyName">
            <summary>
            The name of the attributes property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.CustomHandlerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.CustomHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider">
            <summary>
            <para>This type supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Represents the behavior required to provide Group Policy updates for the Exception Handling Application Block, and it also manages
            the creation of the ADM template categories and policies required to edit Group Policy Objects for the block.
            </summary>
            <remarks>
            This class performs the actual Group Policy update for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings"/>
            configuration section and its <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/> instances together with the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/>
            objects they contain. Processing for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> instances is delegated to 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> objects registered to the handler data types.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.PoliciesKeyName">
            <summary>
            The name of the policies property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.PolicyTypesPropertyName">
            <summary>
            The name of the policy types property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.PolicyTypePostHandlingActionPropertyName">
            <summary>
            The name of the policy post handling action property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.PolicyTypeHandlersPropertyName">
            <summary>
            The name of the exception handlers property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider"/> class with a 
            given set of manageability providers to use when dealing with the configuration for exception handlers.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the Exception Handling Application Block.
            </summary>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ExceptionHandlingSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationElements(Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.CustomHandlerAttributesPartName">
            <summary>
              Looks up a localized string similar to Attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.CustomHandlerTypePartName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ExceptionTypeHandlersPartName">
            <summary>
              Looks up a localized string similar to Handlers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ExceptionTypePolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for exception type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ExceptionTypePostHandlingActionPartName">
            <summary>
              Looks up a localized string similar to Post handling action.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.HandlerPartNameTemplate">
            <summary>
              Looks up a localized string similar to Handler: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ReplaceHandlerExceptionMessagePartName">
            <summary>
              Looks up a localized string similar to Exception message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ReplaceHandlerExceptionMessageResourceNamePartName">
            <summary>
              Looks up a localized string similar to Exception message resource name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ReplaceHandlerExceptionMessageResourceTypePartName">
            <summary>
              Looks up a localized string similar to Exception message resource type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.ReplaceHandlerExceptionTypePartName">
            <summary>
              Looks up a localized string similar to Exception type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.SectionCategoryName">
            <summary>
              Looks up a localized string similar to Exception handling.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.SectionPolicyName">
            <summary>
              Looks up a localized string similar to Specify settings for the Exception Handling Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.WrapHandlerExceptionMessagePartName">
            <summary>
              Looks up a localized string similar to Exception message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.WrapHandlerExceptionMessageResourceNamePartName">
            <summary>
              Looks up a localized string similar to Exception message resource name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.WrapHandlerExceptionMessageResourceTypePartName">
            <summary>
              Looks up a localized string similar to Exception message resource type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.Properties.Resources.WrapHandlerExceptionTypePartName">
            <summary>
              Looks up a localized string similar to Exception type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.ExceptionMessagePropertyName">
            <summary>
            The name of the exception message property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.ExceptionMessageResourceTypePropertyName">
            <summary>
            The name of the exception message resource type property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.ExceptionMessageResourceNamePropertyName">
            <summary>
            The name of the exception message resource name property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.ReplaceExceptionTypePropertyName">
            <summary>
            The name of the replace exception type property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.ReplaceHandlerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.ExceptionMessagePropertyName">
            <summary>
            The name of the exception message property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.ExceptionMessageResourceTypePropertyName">
            <summary>
            The name of the exception message resource type property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.ExceptionMessageResourceNamePropertyName">
            <summary>
            The name of the exception message resource name property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.WrapExceptionTypePropertyName">
            <summary>
            The name of the wrap exception type property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Manageability.WrapHandlerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData">
            <summary>
            Represents the configuration data for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData"/> class with a name, exception message, and replace exception type name.
            </summary>
            <param name="name">
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData"/>.
            </param>
            <param name="exceptionMessage">
            The exception message replacement.
            </param>
            <param name="replaceExceptionTypeName">
            The fully qualified assembly name the type of the replacement exception.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ExceptionMessage">
            <summary>
            Gets or sets the message for the replacement exception.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ExceptionMessageResourceName">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ExceptionMessageResourceType">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ReplaceExceptionType">
            <summary>
            Gets or sets the type of the replacement exception.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ReplaceExceptionTypeName">
            <summary>
            Gets or sets the fully qualified type name of the replacement exception.
            </summary>
            <value>
            The fully qualified type name of the replacement exception.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.GetRegistrations(System.String)">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> container configuration model for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>.
            </summary>
            <param name="namePrefix">The prefix to use when determining references to child elements.</param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for registering a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> in the container.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.Unity.ExceptionHandlingBlockExtension">
            <summary>
            Container extension to the policies required to create the Exception Handling Application Block's
            objects described in the configuration file.
            </summary>
            <remarks>This function is now performed directly by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/>.
            This extension is now a noop and is obsolete.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData">
            <summary>
            Represents the configuration data for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/> class with a name, an exception message, and the fully qualified assembly name of the type of the wrapping exception.
            </summary>
            <param name="name">
            The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/>.
            </param>
            <param name="exceptionMessage">
            The exception message replacement.
            </param>
            <param name="wrapExceptionTypeName">
            The fully qualified assembly name of type of the wrapping exception
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.ExceptionMessage">
            <summary>
            Gets or sets the message for the replacement exception.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.ExceptionMessageResourceType">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.ExceptionMessageResourceName">
            <summary/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.WrapExceptionType">
            <summary>
            Gets or sets the type of the replacement exception.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.WrapExceptionTypeName">
            <summary>
            Gets or sets the fully qualified type name of the replacement exception.
            </summary>
            <value>
            The fully qualified type name of the replacement exception.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.GetRegistrations(System.String)">
            <summary>
            Retrieves a container configuration model for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> based on the data in <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/>
            </summary>
            <param name="namePrefix">The name to use when building references to child items.</param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> to register a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> in the container</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter">
            <summary>
            Represents the base class from which all implementations of exception formatters must derive. The formatter provides functionality for formatting <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> objects.
            </summary>	
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.#ctor(System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter"/> class with an <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to format.
            </summary>
            <param name="exception">The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> object to format.</param>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception">
            <summary>
            Gets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to format.
            </summary>
            <value>
            The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to format.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.HandlingInstanceId">
            <summary>
            Gets the id of the handling chain requesting a formatting.
            </summary>
            <value>
            The id of the handling chain requesting a formatting, or <see cref="F:System.Guid.Empty"/> if no such id is available.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.AdditionalInfo">
            <summary>
            Gets additional information related to the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> but not
            stored in the exception (eg: the time in which the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> was 
            thrown).
            </summary>
            <value>
            Additional information related to the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> but not
            stored in the exception (for example, the time when the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> was 
            thrown).
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Format">
            <summary>
            Formats the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> into the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Formats the exception and all nested inner exceptions.
            </summary>
            <param name="exceptionToFormat">The exception to format.</param>
            <param name="outerException">The outer exception. This 
            value will be null when writing the outer-most exception.</param>
            <remarks>
            <para>This method calls itself recursively until it reaches
            an exception that does not have an inner exception.</para>
            <para>
            This is a template method which calls the following
            methods in order
            <list type="number">
            <item>
            <description><see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteExceptionType(System.Type)"/></description>
            </item>
            <item>
            <description><see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteMessage(System.String)"/></description>
            </item>
            <item>
            <description><see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteSource(System.String)"/></description>
            </item>
            <item>
            <description><see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteHelpLink(System.String)"/></description>
            </item>
            <item>
            <description><see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteReflectionInfo(System.Exception)"/></description>
            </item>
            <item>
            <description><see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteStackTrace(System.String)"/></description>
            </item>
            <item>
            <description>If the specified exception has an inner exception
            then it makes a recursive call. <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteException(System.Exception,System.Exception)"/></description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteReflectionInfo(System.Exception)">
            <summary>
            Formats an <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> using reflection to get the information.
            </summary>
            <param name="exceptionToFormat">
            The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to be formatted.
            </param>
            <remarks>
            <para>This method reflects over the public, instance properties 
            and public, instance fields
            of the specified exception and prints them to the formatter.  
            Certain property names are ignored
            because they are handled explicitly in other places.</para>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteDescription">
            <summary>
            When overridden by a class, writes a description of the caught exception.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            When overridden by a class, writes the current time.
            </summary>
            <param name="utcNow">The current time.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            When overridden by a class, writes the <see cref="T:System.Type"/> of the current exception.
            </summary>
            <param name="exceptionType">The <see cref="T:System.Type"/> of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteMessage(System.String)">
            <summary>
            When overridden by a class, writes the <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteSource(System.String)">
            <summary>
            When overridden by a class, writes the value of the <see cref="P:System.Exception.Source"/> property.
            </summary>
            <param name="source">The source of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteHelpLink(System.String)">
            <summary>
            When overridden by a class, writes the value of the <see cref="P:System.Exception.HelpLink"/> property.
            </summary>
            <param name="helpLink">The help link for the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            When overridden by a class, writes the value of the <see cref="P:System.Exception.StackTrace"/> property.
            </summary>
            <param name="stackTrace">The stack trace of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            When overridden by a class, writes the value of a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="propertyInfo">The reflected <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            When overridden by a class, writes the value of a <see cref="T:System.Reflection.FieldInfo"/> object.
            </summary>
            <param name="fieldInfo">The reflected <see cref="T:System.Reflection.FieldInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.FieldInfo"/> object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteAdditionalInfo(System.Collections.Specialized.NameValueCollection)">
            <summary>
            When overridden by a class, writes additional properties if available.
            </summary>
            <param name="additionalInformation">Additional information to be included with the exception report</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException">
            <summary>
            An exception that occurred during the exception handling process.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException.#ctor">
            <summary>
            Initializes with defaults.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException.#ctor(System.String)">
            <summary>
            Initializes with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes with a specified error 
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            <para>The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</para>
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager">
            <summary>
            Non-static entry point to the exception handling functionality.
            </summary>
            <remarks>
            Instances of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager"/> can be used to replace references to the static <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>
            facade.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String,System.Exception@)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <param name="exceptionToThrow">The new <see cref="T:System.Exception"/> to throw, if any.</param>
            <remarks>
            If a rethrow is recommended and <paramref name="exceptionToThrow"/> is <see langword="null"/>,
            then the original exception <paramref name="exceptionToHandle"/> should be rethrown; otherwise,
            the exception returned in <paramref name="exceptionToThrow"/> should be thrown.
            </remarks>
            <returns>
            Whether or not a rethrow is recommended. 
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
                Exception exceptionToThrow;
            	if (exceptionManager.HandleException(e, name, out exceptionToThrow))
            	{
            	  if(exceptionToThrow == null)
            	    throw;
            	  else
            	    throw exceptionToThrow;
            	}
            }
            </code>
            </example>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <returns>
            Whether or not a rethrow is recommended.
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
            	if (exceptionManager.HandleException(e, name)) throw;
            }
            </code>
            </example>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process(System.Action,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process(System.Action,System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/> and handles 
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <example>
            The following code shows the usage of this method.
            <code>
            	exceptionManager.Process(() => { DoWork(); }, "policy");
            </code>
            </example>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process``1(System.Func{``0},``0,System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/>, and handles
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <typeparam name="TResult">Type of return value from <paramref name="action"/>.</typeparam>
            <param name="action">The delegate to execute.</param>
            <param name="defaultResult">The value to return if an exception is thrown and the
            exception policy swallows it instead of rethrowing.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <returns>If no exception occurs, returns the result from executing <paramref name="action"/>. If
            an exception occurs and the policy does not re-throw, returns <paramref name="defaultResult"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process``1(System.Func{``0},System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/>, and handles
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <typeparam name="TResult">Type of return value from <paramref name="action"/>.</typeparam>
            <param name="action">The delegate to execute.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <returns>If no exception occurs, returns the result from executing <paramref name="action"/>. If
            an exception occurs and the policy does not re-throw, returns the default value for <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl">
            <summary>
            Non-static entry point to the exception handling functionality.
            </summary>
            <remarks>
            Instances of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl"/> can be used to replace references to the static <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>
            facade.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl},Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl"/> class with a set
            of exception policies.
            </summary>
            <param name="exceptionPolicies">The complete set of exception policies.</param>
            <param name="instrumentationProvider">Instrumentation provider used to report errors.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.#ctor(System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl})">
            <summary>
            Initializes a new instance of the class <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl"/> with a set of policies
            and no instrumentation.
            </summary>
            <param name="exceptionPolicies">The complete set of exception policies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.#ctor(System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl},Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the class <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl"/> with a set of policies.
            </summary>
            <param name="exceptionPolicies">The complete set of exception policies.</param>
            <param name="instrumentationProvider">Instrumentation provider used to report errors.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <returns>
            Whether or not a rethrow is recommended.
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
            	if (exceptionManager.HandleException(e, name)) throw;
            }
            </code>
            </example>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.Process(System.Action,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String,System.Exception@)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <param name="exceptionToThrow">The new <see cref="T:System.Exception"/> to throw, if any.</param>
            <remarks>
            If a rethrow is recommended and <paramref name="exceptionToThrow"/> is <see langword="null"/>,
            then the original exception <paramref name="exceptionToHandle"/> should be rethrown; otherwise,
            the exception returned in <paramref name="exceptionToThrow"/> should be thrown.
            </remarks>
            <returns>
            Whether or not a rethrow is recommended. 
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
                Exception exceptionToThrow;
            	if (exceptionManager.HandleException(e, name, out exceptionToThrow))
            	{
            	  if(exceptionToThrow == null)
            	    throw;
            	  else
            	    throw exceptionToThrow;
            	}
            }
            </code>
            </example>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.Process(System.Action,System.String)">
            <summary>
            Excecutes the supplied delegate <paramref name="action"/> and handles 
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <example>
            The following code shows the usage of this method.
            <code>
            	exceptionManager.Process(() => { DoWork(); }, "policy");
            </code>
            </example>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.Process``1(System.Func{``0},``0,System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/>, and handles
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <typeparam name="TResult">Type of return value from <paramref name="action"/>.</typeparam>
            <param name="action">The delegate to execute.</param>
            <param name="defaultResult">The value to return if an exception is thrown and the
            exception policy swallows it instead of rethrowing.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <returns>If no exception occurs, returns the result from executing <paramref name="action"/>. If
            an exception occurs and the policy does not re-throw, returns <paramref name="defaultResult"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy">
            <summary>
            Represents a policy with exception types and
            exception handlers. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception,System.String)">
            <summary>
            The main entry point into the Exception Handling Application Block.
            Handles the specified <see cref="T:System.Exception"/>
            object according to the given <paramref name="policyName"></paramref>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <returns>
            Whether or not a rethrow is recommended.
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
            	if (ExceptionPolicy.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception,System.String,System.Exception@)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <param name="exceptionToThrow">The new <see cref="T:System.Exception"/> to throw, if any.</param>
            <remarks>
            If a rethrow is recommended and <paramref name="exceptionToThrow"/> is <see langword="null"/>,
            then the original exception <paramref name="exceptionToHandle"/> should be rethrown; otherwise,
            the exception returned in <paramref name="exceptionToThrow"/> should be thrown.
            </remarks>
            <returns>
            Whether or not a rethrow is recommended. 
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
                Exception exceptionToThrow;
            	if (ExceptionPolicy.HandleException(e, name, out exceptionToThrow))
            	{
            	  if(exceptionToThrow == null)
            	    throw;
            	  else
            	    throw exceptionToThrow;
            	}
            }
            </code>
            </example>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry">
            <summary>
            Represents an entry in an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> containing
            an exception type as the key and a list of 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/> objects as the value.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.#ctor(System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> class.
            </summary>
            <param name="exceptionType">Type of exception this policy refers to.</param>
            <param name="postHandlingAction">What to do after the exception is handled.</param>
            <param name="handlers">Handlers to execute on the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.#ctor(System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler},Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> class.
            </summary>
            <param name="exceptionType">Type of exception this policy refers to.</param>
            <param name="postHandlingAction">What to do after the exception is handled.</param>
            <param name="handlers">Handlers to execute on the exception.</param>
            <param name="instrumentationProvider">Instrumentation provider</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.ExceptionType">
            <summary>
             The type of <see cref="T:System.Exception"/> to match this policy entry to.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.Handle(System.Exception)">
            <summary>
            Handles all exceptions in the chain.
            </summary>
            <param name="exceptionToHandle">The <c>Exception</c> to handle.</param>
            <returns>Whether or not a rethrow is recommended.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.IntentionalRethrow(System.Exception,System.Exception)">
            <devdoc>
            Rethrows the given exception.  Placed in a seperate method for
            easier viewing in the stack trace.
            </devdoc>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyFactory">
            <summary>
            Factory for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/>s. This class is responsible for creating all the internal
            classes needed to implement a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl" />.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyFactory.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyFactory"/> class 
            with the default configuration source.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyFactory.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyFactory"/> class 
            with the given configuration source.</para>
            </summary>
            <param name="configurationSource">The configuration source that contains information on how to build the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/> instances</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl">
            <summary>
            Represents a policy for handling exceptions.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/> class with the policy name and a set of policy entries.
            </summary>
            <param name="policyName">The policy name.</param>
            <param name="policyEntries">A set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.#ctor(System.String,System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry})">
            
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/> class with the policy name and a dictionary of policy entries.
            </summary>
            <param name="policyName">The policy name.</param>
            <param name="policyEntries">A set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.HandleException(System.Exception)">
            <summary>
            Checks if there is a policy entry that matches
            the type of the exception object specified by the
            <see cref="T:System.Exception"/> parameter
            and if so, invokes the handlers associated with that entry.
            </summary>
            <param name="exceptionToHandle">The <c>Exception</c> to handle.</param>
            <returns>Whether or not a rethrow is recommended.</returns>
            <remarks>
            The algorithm for matching the exception object to a 
            set of handlers mimics that of a standard .NET exception policy.
            The specified exception object will be matched to a single 
            exception policy entry by traversing its inheritance hierarchy. 
            This means that if a <c>FileNotFoundException</c>, for example, is 
            caught, but the only exception type that the exception policy 
            knows how to handle is System.Exception, the event handlers 
            for <c>System.Exception</c> will be invoked because 
            <c>FileNotFoundException</c> ultimately derives from <c>System.Exception</c>.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.GetPolicyEntry(System.Type)">
            <summary>
            Gets the policy entry associated with the specified key.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> corresponding to this exception type.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.FindExceptionPolicyEntry(System.Type)">
            <devDoc>
            Traverses the specified type's inheritance hiearchy
            </devDoc>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.PolicyName">
            <summary>
            Name of this exception policy.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionUtility">
            <summary>
            Provides common functions for the Exception Handling Application Block classes. Cannot inherit from this class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionUtility.FormatExceptionMessage(System.String,System.Guid)">
            <summary>
            Formats a message by replacing the token "{handlingInstanceID}" with the handlingInstanceID.
            </summary>
            <param name="message">The original message.</param>
            <param name="handlingInstanceId">The handlingInststanceID passed into the exceptionHandlerData.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionUtility.FormatExceptionHandlingExceptionMessage(System.String,System.Exception,System.Exception,System.Exception)">
            <summary>
            Formats an exception message so that it can be sent to the event log later, by someone else.
            </summary>
            <param name="policyName">The policy that is running.</param>
            <param name="offendingException">The exception that occured in the chain.</param>
            <param name="chainException">The exception when the chain failed.</param>
            <param name="originalException">The original exception.</param>		
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler">
            <summary>
            Defines the contract for an ExceptionHandler.  An ExceptionHandler contains specific handling
            logic (i.e. logging the exception, replacing the exception, and so forth.) that is executed in a chain of multiple
            ExceptionHandlers.  A chain of one or more ExceptionHandlers is executed based on the exception type being 
            handled, as well as the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/>.  <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception,System.String)"/>
            </summary>    
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            <para>When implemented by a class, handles an <see cref="T:System.Exception"/>.</para>
            </summary>
            <param name="exception"><para>The exception to handle.</para></param>        
            <param name="handlingInstanceId">
            <para>The unique ID attached to the handling chain for this handling instance.</para>
            </param>
            <returns><para>Modified exception to pass to the next exceptionHandlerData in the chain.</para></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger">
            <summary>
            Is the instrumentation gateway when no instances of the objects from the block are involved.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger"/> class.
            </summary>
            <param name="performanceCountersEnabled"><code>true</code> if updating performance counters is allowed, <code>false</code> otherwise.</param>
            <param name="eventLoggingEnabled"><code>true</code> if writing to the event log is allowed, <code>false</code> otherwise.</param>
            <param name="applicationInstanceName">The application name to use with performance counters.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger"/> class, specifying whether 
            logging to the event log is allowed.
            </summary>
            <param name="eventLoggingEnabled"><code>true</code> if writing to the event log is allowed, <code>false</code> otherwise.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger.LogConfigurationError(System.Exception,System.String)">
            <summary>
            Logs the occurrence of a configuration error for the Enterprise Library Exception Handling Application Block through the 
            available instrumentation mechanisms.
            </summary>
            <param name="exception">The exception raised for the configuration error.</param>
            <param name="policyName">The name of the Exception policy in which the configuration error was detected.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger.LogInternalError(System.String,System.String)">
            <summary>
            Logs the occurrence of an internal error for the Enterprise Library Exception Handling Application Block through the 
            available instrumentation mechanisms.
            </summary>
            <param name="policyName">The name of the Exception policy in which the error was occurred.</param>
            <param name="exceptionMessage">The message that represents the exception thrown when the configuration error was detected.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.DefaultExceptionHandlingEventLogger.FireExceptionHandlingErrorOccurred(System.String,System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred"/> event.
            </summary>
            <param name="policyName">The name of the policy involved with the error.</param>
            <param name="message">The message that describes the failure.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider"/> that
            reports exception handling instrumentation events to perf counters.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> this instrumentation listener is bound to.</param>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="applicationInstanceName">The application instance name</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> this instrumentation listener is bound to.</param>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="nameFormatter">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter"/> that is used to creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider.FireExceptionHandledEvent">
            <summary>
            Report the <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandledEvent"/> to instrumentation.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider.FireExceptionHandlerExecutedEvent">
            <summary>
            Report the <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandlerExecutedEvent"/> to instrumentation
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String)">
            <summary>
            Report the <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String)"/> to instrumentation.
            </summary>
            <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.ExceptionHandlingInstrumentationProvider.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument the logging events to the instance names.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider">
            <summary>
            Interface that defines the errors that can be reported when there's a fundamental
            problem with the Exception Handling Application Block.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String,System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred"/> event.
            </summary>
            <param name="policyName">The name of the policy involved with the error.</param>
            <param name="message">The message that describes the failure.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider">
            <summary>
            Interface defining the instrumentation events available from the Exception Handling
            Application Block.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandledEvent">
            <summary>
            Fires the ExceptionHandled event - reported when an exception is handled.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandlerExecutedEvent">
            <summary>
            Fires the ExceptionHandlerExecuted - reported when an exception handler executes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred - reported when there's a problem handling an exception.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullDefaultExceptionHandlingInstrumentationProvider">
            <summary>
            A noop implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider"/>
            that does nothing with the instrumentation events.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullDefaultExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String,System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred"/> event.
            </summary>
            <param name="policyName">The name of the policy involved with the error.</param>
            <param name="message">The message that describes the failure.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider"/> that
            does nothing; an implementation of the Null Object pattern for this interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider.FireExceptionHandledEvent">
            <summary>
            Fires the ExceptionHandled event - reported when an exception is handled.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider.FireExceptionHandlerExecutedEvent">
            <summary>
            Fires the ExceptionHandlerExecuted - reported when an exception handler executes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred - reported when there's a problem handling an exception.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataDescription">
             <summary>
               Looks up a localized string similar to Logs details of the exception sent to the block by using the Logging Application Block. 
            Adding this Exception Handler automatically adds the Logging Application Block with the default settings..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Logging Exception Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataEventIdDescription">
            <summary>
              Looks up a localized string similar to The Event ID for the logged exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataEventIdDisplayName">
            <summary>
              Looks up a localized string similar to Event ID.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataFormatterTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Formatter to use when logging the exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataFormatterTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Formatter Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataLogCategoryDescription">
            <summary>
              Looks up a localized string similar to The name of the Logging Category to use when logging exceptions, as configured in the settings of the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataLogCategoryDisplayName">
            <summary>
              Looks up a localized string similar to Logging Category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Logging Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataPriorityDescription">
             <summary>
               Looks up a localized string similar to The priority of the logged exception message. 
            Messages with a priority below the minimum specified in a Priority Filter in the Logging Application Block are not logged..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataPriorityDisplayName">
            <summary>
              Looks up a localized string similar to Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataSeverityDescription">
            <summary>
              Looks up a localized string similar to The severity value of the logged exception. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataSeverityDisplayName">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataTitleDescription">
            <summary>
              Looks up a localized string similar to The title for the logged exception. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataTitleDisplayName">
            <summary>
              Looks up a localized string similar to Title.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Logging Exception Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataUseDefaultLoggerDescription">
            <summary>
              Looks up a localized string similar to Obsolete. The Exception Handler will always use the default LogWriter to write the exception message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.DesignResources.LoggingExceptionHandlerDataUseDefaultLoggerDisplayName">
            <summary>
              Looks up a localized string similar to Use Default Logger.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData">
            <summary>
            Represents configuration for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData"/> class.
            </summary>
            <param name="name">
            The name of the handler.
            </param>
            <param name="logCategory">
            The default log category.
            </param>
            <param name="eventId">
            The default eventID.
            </param>
            <param name="severity">
            The default severity.
            </param>
            <param name="title">
            The default title.
            </param>
            <param name="formatterType">
            The formatter type.
            </param>
            <param name="priority">
            The minimum value for messages to be processed.  Messages with a priority below the minimum are dropped immediately on the client.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceEventType,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData"/> class.
            </summary>
            <param name="name">
            The name of the handler.
            </param>
            <param name="logCategory">
            The default log category.
            </param>
            <param name="eventId">
            The default eventID.
            </param>
            <param name="severity">
            The default severity.
            </param>
            <param name="title">
            The default title.
            </param>
            <param name="formatterTypeName">
            The formatter fully qualified assembly type name.
            </param>
            <param name="priority">
            The minimum value for messages to be processed.  Messages with a priority below the minimum are dropped immediately on the client.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.LogCategory">
            <summary>
            Gets or sets the default log category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.EventId">
            <summary>
            Gets or sets the default event ID.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.Severity">
            <summary>
            Gets or sets the default severity.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.Title">
            <summary>
             Gets or sets the default title.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.FormatterType">
            <summary>
            Gets or sets the formatter type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.FormatterTypeName">
            <summary>
            Gets or sets the formatter fully qualified assembly type name.
            </summary>
            <value>
            The formatter fully qualified assembly type name
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.Priority">
            <summary>
            Gets or sets the minimum value for messages to be processed.  Messages with a priority
            below the minimum are dropped immediately on the client.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.UseDefaultLogger">
            <summary>
            Gets or sets the default logger to be used.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData.GetRegistrations(System.String)">
            <summary>
            TODOC : review
            </summary>
            <param name="namePrefix"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.EventIdPropertyName">
            <summary>
            The name of the event id property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.FormatterTypePropertyName">
            <summary>
            The name of the formatter type property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.LogCategoryPropertyName">
            <summary>
            The name of the log category property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.PriorityPropertyName">
            <summary>
            The name of the priority property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.SeverityPropertyName">
            <summary>
            The name of the severity property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.TitlePropertyName">
            <summary>
            The name of the title property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.Manageability.LoggingExceptionHandlerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Configuration.LoggingExceptionHandlerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler">
            <summary>
            Represents an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/> that formats
            the exception into a log message and sends it to
            the Enterprise Library Logging Application Block.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler.#ctor(System.String,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Int32,System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler"/> class with the log category, the event ID, the <see cref="T:System.Diagnostics.TraceEventType"/>,
            the title, minimum priority, the formatter type, and the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
            <param name="logCategory">The default category</param>
            <param name="eventId">An event id.</param>
            <param name="severity">The severity.</param>
            <param name="title">The log title.</param>
            <param name="priority">The minimum priority.</param>
            <param name="formatterType">The type <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter"/> type.</param>
            <param name="writer">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> to use.</param>
            <remarks>
            The type specified for the <paramref name="formatterType"/> attribute must have a public constructor with
            parameters of type <see name="TextWriter"/>, <see cref="T:System.Exception"/> and <see cref="T:System.Guid"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            <para>Handles the specified <see cref="T:System.Exception"/> object by formatting it and writing to the configured log.</para>
            </summary>
            <param name="exception"><para>The exception to handle.</para></param>        
            <param name="handlingInstanceId">
            <para>The unique ID attached to the handling chain for this handling instance.</para>
            </param>
            <returns><para>Modified exception to pass to the next handler in the chain.</para></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler.WriteToLog(System.String,System.Collections.IDictionary)">
            <summary>
            Writes the specified log message using 
            the Logging Application Block's <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)"/>
            method.
            </summary>
            <param name="logMessage">The message to write to the log.</param>
            <param name="exceptionData">The exception's data.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler.CreateStringWriter">
            <summary>
            Creates an instance of the <see cref="T:System.IO.StringWriter"/>
            class using its default constructor.
            </summary>
            <returns>A newly created <see cref="T:System.IO.StringWriter"/></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler.CreateFormatter(System.IO.StringWriter,System.Exception,System.Guid)">
            <summary>
            Creates an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter"/>
            object based on the configured ExceptionFormatter
            type name.
            </summary>
            <param name="writer">The stream to write to.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to pass into the formatter.</param>
            <param name="handlingInstanceID">The id of the handling chain.</param>
            <returns>A newly created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter"/></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.HandlerPartNameTemplate">
            <summary>
              Looks up a localized string similar to Handler: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.LoggingHandlerCategoryPartName">
            <summary>
              Looks up a localized string similar to Category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.LoggingHandlerEventIdPartName">
            <summary>
              Looks up a localized string similar to Event ID.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.LoggingHandlerFormatterPartName">
            <summary>
              Looks up a localized string similar to Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.LoggingHandlerPriorityPartName">
            <summary>
              Looks up a localized string similar to Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.LoggingHandlerSeverityPartName">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.LoggingHandlerTitlePartName">
            <summary>
              Looks up a localized string similar to Title.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.Properties.Resources.MissingConstructor">
            <summary>
              Looks up a localized string similar to The configured exception formatter &apos;{0}&apos; must expose a public constructor that takes a TextWriter object, an Exception object and a GUID instance as parameters..
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> that runs any exceptions returned from the
            target through the Exception Handling Application Block.
            </summary>
            <remarks>If the exception policy is configured to swallow exceptions,
            do not configure this call handler on a method with a non-void return value,
            as the handler doesn't know what value to return if the exception is swallowed.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> that processses exceptions
            using the given exception policy.
            </summary>
            <param name="exceptionPolicy">Exception policy.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl,System.Int32)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> that processses exceptions
            using the given exception policy.
            </summary>
            <param name="exceptionPolicy">Exception policy.</param>
            <param name="order">Order in which the handler will be executed.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.ExceptionPolicy">
            <summary>
            Gets the exception policy used by this handler.
            </summary>
            <value>Exception policy.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.Order">
            <summary>
            Gets or sets the order in which the handler will be executed
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Processes the method call.
            </summary>
            <remarks>This handler does nothing before the call. If there is an exception
            returned, it runs the exception through the Exception Handling Application Block.</remarks>
            <param name="input"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> with information about the call.</param>
            <param name="getNext">delegate to call to get the next handler in the pipeline.</param>
            <returns>Return value from the target, or the (possibly changed) exceptions.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute">
            <summary>
            An attribute used to apply the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> to the target.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute"/> using the given
            exception policy name.
            </summary>
            <remarks>When using this attribute, the exception policy is always read from
            the default configuration.</remarks>
            <param name="policyName">Exception policy name from configuration.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute.PolicyName">
            <summary>
            Get or sets the exception policy used by the handler.
            </summary>
            <value>exception policy name.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute.CreateHandler(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <returns>A new call handler object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction">
            <summary>
            Determines what action should occur after an exception is handled by the configured exception handling chain. 
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction.None">
            <summary>
            Indicates that no rethrow should occur.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction.NotifyRethrow">
            <summary>
            Notify the caller that a rethrow is recommended.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction.ThrowNewException">
            <summary>
            Throws the exception after the exception has been handled by all handlers in the chain.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddCustomHandlerData">
            <summary>
              Looks up a localized string similar to Custom.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddExceptionTypeDisplayName">
            <summary>
              Looks up a localized string similar to Exception Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddExceptionTypeHelpText">
            <summary>
              Looks up a localized string similar to Add a new exception type that is handled by this exception policy..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AdditionalInfo">
            <summary>
              Looks up a localized string similar to Additional Info:.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddPolicyDisplayDescription">
            <summary>
              Looks up a localized string similar to Add a new policy..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddPolicyDisplayName">
            <summary>
              Looks up a localized string similar to Policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddReplaceHandlerData">
            <summary>
              Looks up a localized string similar to Replace Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddReplaceHandlerDataDescription">
            <summary>
              Looks up a localized string similar to Replace the exception with another exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddWrapHandlerData">
            <summary>
              Looks up a localized string similar to Wrap Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AddWrapHandlerDataDescription">
            <summary>
              Looks up a localized string similar to Wrap the exception within another exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AttributesDescription">
            <summary>
              Looks up a localized string similar to Attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AttributesDisplayName">
            <summary>
              Looks up a localized string similar to Attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AuthorizationProviderTypeDescription">
            <summary>
              Looks up a localized string similar to AuthorizationProviderTypeDescription.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.BlockName">
            <summary>
              Looks up a localized string similar to Enterprise Library Exception Handling Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.CantSwallowNonVoidReturnMessage">
            <summary>
              Looks up a localized string similar to Cannot swallow exceptions for methods with non-null return type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ChainException">
            <summary>
              Looks up a localized string similar to HANDLING CHAIN EXCEPTION:.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ConfigurationFailureCreatingPolicy">
            <summary>
              Looks up a localized string similar to A configuration failure occurred while creating policy ‘{0}’..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ErrorHandlingExceptionMessage">
            <summary>
              Looks up a localized string similar to The error occurred while handling an exception for policy &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.EventIdDisplayName">
            <summary>
              Looks up a localized string similar to Event id.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionHandledHelpResource">
            <summary>
              Looks up a localized string similar to Exceptions Handled/sec is the rate at which exceptions were handled..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionHandlerExecutedHelpResource">
            <summary>
              Looks up a localized string similar to Exception Handlers Executed/sec is the rate at which exception handlers were executed..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionHandlersDisplayName">
            <summary>
              Looks up a localized string similar to Handlers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionHandlerTypeDescription">
            <summary>
              Looks up a localized string similar to Custom Handler Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionHandlerTypeDisplayName">
            <summary>
              Looks up a localized string similar to Custom Handler Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionMessageDisplayName">
            <summary>
              Looks up a localized string similar to Exception message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionMessageResourceNameDisplayName">
            <summary>
              Looks up a localized string similar to Exception message resource name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionMessageResourceTypeDisplayName">
            <summary>
              Looks up a localized string similar to Exception message resource type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionNullException">
            <summary>
              Looks up a localized string similar to Unable to rethrow exception: The exception to throw is null..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionPoliciesDisplayName">
            <summary>
              Looks up a localized string similar to Policies.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionPolicyNotFound">
            <summary>
              Looks up a localized string similar to The policy with name &apos;{0}&apos; cannot be found. Exception handling aborted..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to The value can not be an empty string or null..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionTypeNotException">
            <summary>
              Looks up a localized string similar to The type must be of type Exception..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionTypesDisplayName">
            <summary>
              Looks up a localized string similar to Exception Types.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionWasCaught">
            <summary>
              Looks up a localized string similar to An exception of type &apos;{0}&apos; occurred and was caught..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.FieldAccessFailed">
            <summary>
              Looks up a localized string similar to Access failed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.FormatterTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Formatter type name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.HelpLink">
            <summary>
              Looks up a localized string similar to Help link : {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.InnerException">
            <summary>
              Looks up a localized string similar to Inner Exception.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.LogCategoryDisplayName">
            <summary>
              Looks up a localized string similar to Log category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.Message">
            <summary>
              Looks up a localized string similar to Message : {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.NameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.OffendingException">
            <summary>
              Looks up a localized string similar to OFFENDING EXCEPTION:.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.OriginalException">
            <summary>
              Looks up a localized string similar to ORIGINAL EXCEPTION:.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.PermissionDenied">
            <summary>
              Looks up a localized string similar to Permission Denied.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.PolicyName">
            <summary>
              Looks up a localized string similar to POLICY NAME: {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.PostHandlingActionDisplayName">
            <summary>
              Looks up a localized string similar to Post handling action.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.PriorityDisplayName">
            <summary>
              Looks up a localized string similar to Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.PropertyAccessFailed">
            <summary>
              Looks up a localized string similar to Access failed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ReplaceExceptionTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Replace exception type .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.SectionDisplayName">
            <summary>
              Looks up a localized string similar to Exception Handling Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.SeverityDisplayName">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.Source">
            <summary>
              Looks up a localized string similar to Source : {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.StackTrace">
            <summary>
              Looks up a localized string similar to Stack Trace.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.StackTraceUnavailable">
            <summary>
              Looks up a localized string similar to The stack trace is unavailable..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.TitleDisplayName">
            <summary>
              Looks up a localized string similar to Title.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.TotalExceptionHandlersExecutedHelpResource">
            <summary>
              Looks up a localized string similar to Total Exceptions Handlers Executed is the total number which exception handlers were executed..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.TotalExceptionsHandledHelpResource">
            <summary>
              Looks up a localized string similar to Total Exceptions Handled is the total number of exceptions handled..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.TypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.TypeString">
            <summary>
              Looks up a localized string similar to Type : {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.UnableToHandleException">
            <summary>
              Looks up a localized string similar to Unable to handle exception: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.UndefinedValue">
            <summary>
              Looks up a localized string similar to &lt;undefined value&gt;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.UseDefaultLoggerDisplayName">
            <summary>
              Looks up a localized string similar to Use default logger.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.WrapExceptionTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Wrap exception type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler">
            <summary>
            Replaces the exception in the chain of handlers with a cleansed exception.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> class with an exception message and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessage">The exception message.</param>
            <param name="replaceExceptionType">The type of <see cref="T:System.Exception"/> to use to replace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> class with an exception message
            resolver and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessageResolver">The exception message resolver.</param>
            <param name="replaceExceptionType">The type of <see cref="T:System.Exception"/> to use to replace.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.ReplaceExceptionType">
            <summary>
            The type of exception to replace.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.ExceptionMessage">
            <summary>
            Gets the message for the new exception.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            Replaces the exception with the configured type for the specified policy.
            </summary>
            <param name="exception">The original exception.</param>        
            <param name="handlingInstanceId">The unique identifier attached to the handling chain for this handling instance.</param>
            <returns>Modified exception to pass to the next exceptionHandlerData in the chain.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.ReplaceException(System.String)">
            <summary>
            Replaces an exception with a new exception of a specified type.
            </summary>                
            <param name="replaceExceptionMessage">The message for the new exception.</param>
            <returns>The replaced or "cleansed" exception.  Returns null if unable to replace the exception.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter">
            <summary>
            Represents an exception formatter that formats exception objects as text.
            </summary>	
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter"/> using the specified
            <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.Exception"/>
            objects.
            </summary>
            <param name="writer">The stream to write formatting information to.</param>
            <param name="exception">The exception to format.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter"/> using the specified
            <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.Exception"/>
            objects.
            </summary>
            <param name="writer">The stream to write formatting information to.</param>
            <param name="exception">The exception to format.</param>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.Writer">
            <summary>
            Gets the underlying <see cref="T:System.IO.TextWriter"/>
            that the current formatter is writing to.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.Format">
            <summary>
            Formats the <see cref="T:System.Exception"/> into the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteDescription">
            <summary>
            Writes a generic description to the underlying text stream.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Writes and formats the exception and all nested inner exceptions to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="exceptionToFormat">The exception to format.</param>
            <param name="outerException">The outer exception. This 
            value will be null when writing the outer-most exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Writes the current date and time to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="utcNow">The current time.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Writes the value of the <see cref="P:System.Type.AssemblyQualifiedName"/>
            property for the specified exception type to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="exceptionType">The <see cref="T:System.Type"/> of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Writes the value of the <see cref="P:System.Exception.Message"/>
            property to the underyling <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteSource(System.String)">
            <summary>
            Writes the value of the specified source taken
            from the value of the <see cref="P:System.Exception.Source"/>
            property to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="source">The source of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteHelpLink(System.String)">
            <summary>
            Writes the value of the specified help link taken
            from the value of the <see cref="P:System.Exception.HelpLink"/>
            property to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="helpLink">The exception's help link.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Writes the name and value of the specified property to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="propertyInfo">The reflected <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Writes the name and value of the specified field to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="fieldInfo">The reflected <see cref="T:System.Reflection.FieldInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.FieldInfo"/> object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Writes the value of the <see cref="P:System.Exception.StackTrace"/> property to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="stackTrace">The stack trace of the exception.</param>
            <remarks>
            If there is no stack trace available, an appropriate message will be displayed.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteAdditionalInfo(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Writes the additional properties to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="additionalInformation">Additional information to be included with the exception report</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.Indent">
            <summary>
            Indents the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler">
            <summary>
            Wraps the current exception in the handling chain with a new exception of a specified type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> class with an exception message and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessage">The exception message.</param>
            <param name="wrapExceptionType">The type of <see cref="T:System.Exception"/> to use to wrap.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> class with an exception message resolver
            and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessageResolver">The exception message resolver.</param>
            <param name="wrapExceptionType">The type of <see cref="T:System.Exception"/> to use to wrap.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.WrapExceptionType">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> of exception to wrap the original exception with.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Type"/> of exception to wrap the original exception with.</para>
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.WrapExceptionMessage">
            <summary>
            <para>Gets the message of the wrapped exception.</para>
            </summary>
            <value>
            <para>The message of the wrapped exception.</para>
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            <para>Wraps the <see cref="T:System.Exception"/> with the configuration exception type.</para>
            </summary>
            <param name="exception"><para>The exception to handle.</para></param>        
            <param name="handlingInstanceId">
            <para>The unique ID attached to the handling chain for this handling instance.</para>
            </param>
            <returns><para>Modified exception to pass to the next exceptionHandlerData in the chain.</para></returns>        
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter">
            <summary>
            Represents an exception formatter that formats exception objects as XML.
            </summary>	
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.#ctor(System.Xml.XmlWriter,System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter"/> class using the specified <see cref="T:System.Xml.XmlWriter"/> and <see cref="T:System.Exception"/> objects.
            </summary>
            <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter"/> in which to write the XML.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to format.</param>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter"/> class using the specified <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.Exception"/> objects.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> in which to write the XML.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to format.</param>
            <remarks>
            An <see cref="T:System.Xml.XmlTextWriter"/> with indented formatting is created from the  specified <see cref="T:System.IO.TextWriter"/>.
            </remarks>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.Writer">
            <summary>
            Gets the underlying <see cref="T:System.Xml.XmlWriter"/> that the formatted exception is written to.
            </summary>
            <value>
            The underlying <see cref="T:System.Xml.XmlWriter"/> that the formatted exception is written to.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.Format">
            <summary>
            Formats the <see cref="T:System.Exception"/> into the underlying stream.
            </summary>       
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Writes the current date and time to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="utcNow">The current time.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Writes the value of the <see cref="P:System.Exception.Message"/> property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteDescription">
            <summary>
            Writes a generic description to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteHelpLink(System.String)">
            <summary>
            Writes the value of the specified help link taken
            from the value of the <see cref="P:System.Exception.HelpLink"/>
            property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="helpLink">The exception's help link.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Writes the value of the specified stack trace taken from the value of the <see cref="P:System.Exception.StackTrace"/> property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="stackTrace">The stack trace of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteSource(System.String)">
            <summary>
            Writes the value of the specified source taken from the value of the <see cref="P:System.Exception.Source"/> property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="source">The source of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Writes the value of the <see cref="P:System.Type.AssemblyQualifiedName"/>
            property for the specified exception type to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="exceptionType">The <see cref="T:System.Type"/> of the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Writes and formats the exception and all nested inner exceptions to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="exceptionToFormat">The exception to format.</param>
            <param name="outerException">The outer exception. This value will be null when writing the outer-most exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Writes the name and value of the specified property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="propertyInfo">The reflected <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Writes the name and value of the <see cref="T:System.Reflection.FieldInfo"/> object to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="fieldInfo">The reflected <see cref="T:System.Reflection.FieldInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.FieldInfo"/> object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteAdditionalInfo(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Writes additional information to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="additionalInformation">Additional information to be included with the exception report</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.InternalAttribute">
            <summary>
            Indicates that the field or property should not exposed when the raised to an EventSource.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.InstrumentationTypeAttribute">
            <summary>
            Indicates that this type can be raised to an EventSource.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.InstrumentationTypeAttribute.#ctor">
            <summary>
            Default constructor that marks the class as a type that can be raised.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode">
            <summary>
            Represents the possible modes for client-side category filtering.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode.AllowAllExceptDenied">
            <summary>
            Allow all categories except those explicitly denied
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode.DenyAllExceptAllowed">
            <summary>
            Deny all categories except those explicitly allowed
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData">
            <summary>
            Base configuration object for custom <see cref="T:System.Diagnostics.TraceListener"/>s.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData"/> with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData"/> with name, type and initial information.
            </summary>
            <param name="name">The name for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="initData">The initialization information for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData"/> with name, fully qualified type name and initial information.
            </summary>
            <param name="name">The name for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="typeName">The fully qualified type name of the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="initData">The initialization information for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.#ctor(System.String,System.Type,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData"/> with name, type, initial information, and <see cref="T:System.Diagnostics.TraceOptions"/> output options.
            </summary>
            <param name="name">The name for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="initData">The initialization information for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="traceOutputOptions">The <see cref="T:System.Diagnostics.TraceOptions"/> output options.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.#ctor(System.String,System.String,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData"/> with name, fully qualified type name, initial information, and <see cref="T:System.Diagnostics.TraceOptions"/> output options.
            </summary>
            <param name="name">The name for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="typeName">The fully qualified type name of the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="initData">The initialization information for the represented <see cref="T:System.Diagnostics.TraceListener"/>.</param>
            <param name="traceOutputOptions">The <see cref="T:System.Diagnostics.TraceOptions"/> output options.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Attributes">
            <summary>
            Gets the custom configuration attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.InitData">
            <summary>
            Gets or sets the initialization data.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.CreateHelper">
            <summary>
            Creates the helper that enapsulates the configuration properties management.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#BasicCustomTraceListenerData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#BasicCustomTraceListenerData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#BasicCustomTraceListenerData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#BasicCustomTraceListenerData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#BasicCustomTraceListenerData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#BasicCustomTraceListenerData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.GetRegistrations">
            <summary>
             Returns the type <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries for the specified configuration data.
            </summary>
             <remarks>
             This will return multiple <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries only if the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.Attributes"/>
             property is populated.  The additional registration returned is a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AttributeSettingTraceListenerWrapper"/> to handle
             supplying the attribute data to the underlying <see cref="T:System.Diagnostics.TraceListener"/>.
             </remarks>
            <returns>A set of registry entries.</returns>        
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BasicCustomTraceListenerData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetRegistrations"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates a <see cref="T:System.Diagnostics.TraceListener"/></returns>
            <exception cref="T:System.ArgumentException">Throws an argument exception if it cannot locate an appropriate constructor for the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/>.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData"/> class with a name.
            </summary>
            <param name="name">The name for the represented <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData.GetRegistrations">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry for this data section.
            </summary>
            <returns>The type registration for this data section</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData">
            <summary>
            Represents a single category filter configuration settings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/> class.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/> class.</para>
            </summary>
            <param name="categoryFilters">The collection of category names to filter.</param>
            <param name="categoryFilterMode">The mode of filtering.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode)">
            <summary>
            <para>Initialize a new named instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/> class.</para>
            </summary>
            <param name="name">The name.</param>
            <param name="categoryFilters">The collection of category names to filter.</param>
            <param name="categoryFilterMode">The mode of filtering.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.CategoryFilterMode">
            <summary>
            One of <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.CategoryFilterMode"/> enumeration.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.CategoryFilters">
            <summary>
            Collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData.GetRegistrations">
            <summary>
            Creates an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instances describing the filter represented by 
            this configuration object.
            </summary>
            <returns>A an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instance describing a filter.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry">
            <summary>
            Represents a single <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry"/> configuration settings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/> class.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/>.</para>
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterEntry.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
            <remarks>
            Overriden in order to annotate with designtime attribute.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData">
            <summary>
            Configuration object for custom log formatters.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomFormatterData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomFormatterData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomFormatterData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomFormatterData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomFormatterData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomFormatterData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData.GetRegistrations">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry for this data section.
            </summary>
            <returns>The type registration for this data section</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData">
            <summary>
            Configuration data for custom log filters. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and fully qualified name of the provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomLogFilterData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomLogFilterData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomLogFilterData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomLogFilterData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomLogFilterData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#Configuration#CustomLogFilterData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData.GetRegistrations">
            <summary>
            Creates an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instances describing the filter represented by 
            this configuration object.
            </summary>
            <returns>A an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instance describing a filter.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData">
            <summary>
            Configuration object for custom trace listenrs.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.#ctor(System.String,System.Type,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.#ctor(System.String,System.String,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes with name and fully qualified type name of the provider type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.Formatter">
            <summary>
            Gets or sets the name of the formatter. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.CreateHelper">
            <summary>
            Creates the helper that enapsulates the configuration properties management.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.AddLoggingSettings">
            <summary>
              Looks up a localized string similar to Add Logging Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to A class that writes log messages to a custom logging target, and is added to the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Basic Custom Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BasicCustomTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BinaryLogFormatterDataDescription">
            <summary>
              Looks up a localized string similar to A Log Message Formatter that generates the output for a log message in a binary format suitable for use with listeners such as the Message Queuing (MSMQ) Trace Listener. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BinaryLogFormatterDataDisplayName">
            <summary>
              Looks up a localized string similar to Binary Log Message Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BinaryLogFormatterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Binary Log Message Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BinaryLogFormatterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BinaryLogFormatterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Binary Log Message Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.BinaryLogFormatterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataCategoryFilterModeDescription">
             <summary>
               Looks up a localized string similar to Specifies if the filter will allow only messages that match one of the configured categories to pass to the logging target (DenyAllExceptAllowed), 
            or will allow all message except those that match one of the configured categories to pass to the logging target (AllowAllExceptDenied)..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataCategoryFilterModeDisplayName">
            <summary>
              Looks up a localized string similar to Filter Mode.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataCategoryFiltersDescription">
            <summary>
              Looks up a localized string similar to The list of all the Categories defined for this Category Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataCategoryFiltersDisplayName">
            <summary>
              Looks up a localized string similar to Categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataDescription">
            <summary>
              Looks up a localized string similar to A Logging Filter that blocks log messages or allows them to pass to the configured logging target listener(s) based on the categories assigned to the log message. Each Category Filter can be configured for one or more categories, and can be set to allow or block messages assigned to any of these categories..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataDisplayName">
            <summary>
              Looks up a localized string similar to Category Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Category Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Category Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterEntryDescription">
            <summary>
              Looks up a localized string similar to A single category in the collection of filters for a Category Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterEntryDisplayName">
            <summary>
              Looks up a localized string similar to Category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterEntryNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Category Filter Entry..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CategoryFilterEntryNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomFormatterDataDescription">
            <summary>
              Looks up a localized string similar to A class that implements custom formatting for log messages, and is added to the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomFormatterDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Log Message Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomFormatterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Log Message Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomFormatterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomFormatterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Log Message Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomFormatterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomLogFilterDataDescription">
            <summary>
              Looks up a localized string similar to A class that implements custom filtering for log messages, and is added to the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomLogFilterDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Logging Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomLogFilterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Logging Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomLogFilterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomLogFilterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Logging Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomLogFilterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to A class that writes log messages to a custom logging target, and is added to the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataFormatterDescription">
            <summary>
              Looks up a localized string similar to Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataFormatterDisplayName">
            <summary>
              Looks up a localized string similar to Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. The default is None. 
            This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.CustomTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerAuthenticationModeDescription">
             <summary>
               Looks up a localized string similar to A value from the EmailAuthenticationMode enumeration that specifies how the listener will authenticate the user. 
            Valid values are None, WindowsCredentials, and UserNameAndPassword..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerAuthenticationModeDisplayName">
            <summary>
              Looks up a localized string similar to Authentication  Mode .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to A logging target listener that sends log messages to a specified email server..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Email Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataFormatterDescription">
            <summary>
              Looks up a localized string similar to The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataFormatterDisplayName">
            <summary>
              Looks up a localized string similar to Formatter Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataFromAddressDescription">
            <summary>
              Looks up a localized string similar to The &apos;From&apos; address to use for the email message created for each log entry..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataFromAddressDisplayName">
            <summary>
              Looks up a localized string similar to From Address.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Email Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Email Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSmtpPortDescription">
             <summary>
               Looks up a localized string similar to The port to use to send the email message to the server that will despatch it. 
            The default if not specified is the SMTP port 25..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSmtpPortDisplayName">
            <summary>
              Looks up a localized string similar to Smtp Port.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSmtpServerDescription">
             <summary>
               Looks up a localized string similar to The name or IP address of the server that will send the email message. 
            The default if not specified is the local host (127.0.0.1)..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSmtpServerDisplayName">
            <summary>
              Looks up a localized string similar to Smtp Server.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSubjectLineEnderDescription">
            <summary>
              Looks up a localized string similar to The suffix to add to the end of the Subject for this email message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSubjectLineEnderDisplayName">
            <summary>
              Looks up a localized string similar to Subject Line Suffix.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSubjectLineStarterDescription">
            <summary>
              Looks up a localized string similar to The prefix to add at the start of the Subject for this email message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataSubjectLineStarterDisplayName">
            <summary>
              Looks up a localized string similar to Subject Line Prefix.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataToAddressDescription">
            <summary>
              Looks up a localized string similar to The &apos;To&apos; address to use for the email message created for each log entry..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataToAddressDisplayName">
            <summary>
              Looks up a localized string similar to To Address.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Email Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerPasswordDescription">
            <summary>
              Looks up a localized string similar to The password to use when authenticating the specified user name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerPasswordDisplayName">
            <summary>
              Looks up a localized string similar to Authentication Password.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerUserNameDescription">
            <summary>
              Looks up a localized string similar to The user name of the user for authentication when sending email messages to the mail server that will relay them.  .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerUserNameDisplayName">
            <summary>
              Looks up a localized string similar to Authentication  User Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerUseSSLDescription">
            <summary>
              Looks up a localized string similar to A boolean value that specifies if the listener will authenticate and send messages using Secure Sockets Layer (SSL) encrypted communication..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.EmailTraceListenerUseSSLDisplayName">
            <summary>
              Looks up a localized string similar to Use SSL.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to A logging target listener that writes log messages to a specified text file. Header and footer text can be specified, and the format of the message defined though a template..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Flat File Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFileNameDescription">
            <summary>
              Looks up a localized string similar to The path and file name for the log file. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFileNameDisplayName">
            <summary>
              Looks up a localized string similar to File Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFooterDescription">
            <summary>
              Looks up a localized string similar to The text of the footer to add to the log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFooterDisplayName">
            <summary>
              Looks up a localized string similar to Message Footer.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFormatterDescription">
            <summary>
              Looks up a localized string similar to The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataFormatterDisplayName">
            <summary>
              Looks up a localized string similar to Formatter Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataHeaderDescription">
            <summary>
              Looks up a localized string similar to The text of the header to add to the log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataHeaderDisplayName">
            <summary>
              Looks up a localized string similar to Message Header.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Flat File Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FlatFileTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to A logging target listener that sends log messages to a specified Windows Event Log such as the Application or System log..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Event Log Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataFormatterDescription">
            <summary>
              Looks up a localized string similar to The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataFormatterDisplayName">
            <summary>
              Looks up a localized string similar to Formatter Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataLogDescription">
            <summary>
              Looks up a localized string similar to The name of the Windows Event Log to write the log messages to, such as Application or System..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataLogDisplayName">
            <summary>
              Looks up a localized string similar to Log Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataMachineNameDescription">
            <summary>
              Looks up a localized string similar to The name of the machine on which the log messages should be written. The default is the local machine..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataMachineNameDisplayName">
            <summary>
              Looks up a localized string similar to Machine Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Event Log Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataSourceDescription">
            <summary>
              Looks up a localized string similar to The source name to use when writing to the Event Log. The default is &apos;Enterprise Library Logging&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataSourceDisplayName">
            <summary>
              Looks up a localized string similar to Source Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Event Log Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormattedEventLogTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormatterDataDescription">
            <summary>
              Looks up a localized string similar to Formats the contents of a log message based on the Listener type and logging target. Built-in formatters support text formatting through a template and binary formatting..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormatterDataDisplayName">
            <summary>
              Looks up a localized string similar to Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormatterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormatterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormatterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.FormatterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerCategoryEntryDescription">
            <summary>
              Looks up a localized string similar to A single Category in the list of Categories for the log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerCategoryEntryDisplayName">
            <summary>
              Looks up a localized string similar to Category Entry.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerCategoryEntryNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Category Entry..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerCategoryEntryNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataAfterMessageDescription">
            <summary>
              Looks up a localized string similar to The message that the Logging Handler will add to the log entry after the target method executes..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataAfterMessageDisplayName">
            <summary>
              Looks up a localized string similar to After Message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataBeforeMessageDescription">
            <summary>
              Looks up a localized string similar to The message that the Logging Handler will add to the log entry before the target method executes..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataBeforeMessageDisplayName">
            <summary>
              Looks up a localized string similar to Before Message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataCategoriesDescription">
             <summary>
               Looks up a localized string similar to The list of categories to which the Logging Handler will write events. 
            Each category can be a literal value, and/or include the tokens {method}, {type}, {namespace}, and {assembly}..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataCategoriesDisplayName">
            <summary>
              Looks up a localized string similar to Categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataDescription">
            <summary>
              Looks up a localized string similar to A Call Handler that provides the capability to write log messages and trace messages as the client code invokes the selected method or accesses the selected property of the target object. This handler uses the Logging Application Block to create and write log messages..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Logging Call Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataEventIdDescription">
            <summary>
              Looks up a localized string similar to The ID of the event to include in the log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataEventIdDisplayName">
            <summary>
              Looks up a localized string similar to Event Id.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataIncludeCallStackDescription">
            <summary>
              Looks up a localized string similar to Determines whether the call stack will be included in the log message. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataIncludeCallStackDisplayName">
            <summary>
              Looks up a localized string similar to Include Call Stack.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataIncludeCallTimeDescription">
            <summary>
              Looks up a localized string similar to Determines whether the duration of the call will be included in After Message section of the log message. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataIncludeCallTimeDisplayName">
            <summary>
              Looks up a localized string similar to Include Call Time.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataIncludeParameterValuesDescription">
            <summary>
              Looks up a localized string similar to Determines whether the values of the parameters passed to the target method will be included in the log message. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataIncludeParameterValuesDisplayName">
            <summary>
              Looks up a localized string similar to Include Parameter Values.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataLogBehaviorDescription">
             <summary>
               Looks up a localized string similar to Determines if the handler will write log messages before, after, or both before and after the call to the target object. 
            A value from the HandlerLogBehavior enumeration. 
            Valid values are Before, After, and BeforeAndAfter..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataLogBehaviorDisplayName">
            <summary>
              Looks up a localized string similar to Log Behavior.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Logging Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataOrderDescription">
             <summary>
               Looks up a localized string similar to The position of the handler within the policy handler chain, starting from 1. 
            The default value is zero, which means that there is no explicit order specified for the handler in relation to other handlers in the same handler chain..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataOrderDisplayName">
            <summary>
              Looks up a localized string similar to Order.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataPriorityDescription">
            <summary>
              Looks up a localized string similar to The priority value of the exception to include in the log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataPriorityDisplayName">
            <summary>
              Looks up a localized string similar to Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataSeverityDescription">
            <summary>
              Looks up a localized string similar to The severity value of the exception to include in the log message; using values from the TraceEventType enumeration such as Critical, Error, and Warning..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataSeverityDisplayName">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Logging Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogCallHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataDescription">
            <summary>
              Looks up a localized string similar to A filter that allows all logging actions to be turned on and off through one setting..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataDisplayName">
            <summary>
              Looks up a localized string similar to Logging Enabled Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataEnabledDescription">
            <summary>
              Looks up a localized string similar to Specifies if all logging is enabled or disabled. Allows all logging actions to be turned on and off through one setting..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataEnabledDisplayName">
            <summary>
              Looks up a localized string similar to All Logging Enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Logging Enabled Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Logging Enabled Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogEnabledFilterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogFileDialogFilter">
            <summary>
              Looks up a localized string similar to Log Files (*.log)|*.log|All Files|*.*.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogFilterDataDescription">
            <summary>
              Looks up a localized string similar to Base class for configuration objects..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogFilterDataDisplayName">
            <summary>
              Looks up a localized string similar to Log Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogFilterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Log Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogFilterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogFilterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Logging Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LogFilterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsDefaultCategoryDescription">
             <summary>
               Looks up a localized string similar to The default Logging Category to use for messages sent to the block that do not specify a Category. 
            Categories allow log messages to be handled and processed in different ways, and sent to different logging targets. 
            Log messages can be assigned to one or more categories..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsDefaultCategoryDisplayName">
            <summary>
              Looks up a localized string similar to Default Logging Category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsDisplayName">
            <summary>
              Looks up a localized string similar to Logging Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsFormattersDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for the formatters that can be used with Listeners that generate text or binary output..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsFormattersDisplayName">
            <summary>
              Looks up a localized string similar to Log Message Formatters.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsLogFiltersDescription">
            <summary>
              Looks up a localized string similar to Filters that block or allow specific or all log messages to be written to the configured logging target based on the Category, Priority, or a custom action. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsLogFiltersDisplayName">
            <summary>
              Looks up a localized string similar to Logging Filters.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsLogWarningWhenNoCategoriesMatchDescription">
             <summary>
               Looks up a localized string similar to Specifies whether the block will write a Warning message to the logging target(s) specified in the Logging Errors and Warnings special category 
            when a log message is received that does not match any of the defined Logging Categories..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsLogWarningWhenNoCategoriesMatchDisplayName">
            <summary>
              Looks up a localized string similar to Warn If No Category Match.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsNameDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsRevertImpersonationDescription">
             <summary>
               Looks up a localized string similar to By default, log messages are written using impersonation. This provides some performance advantage for logging. 
            This setting allows impersonation to revert to the caller. .
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsRevertImpersonationDisplayName">
            <summary>
              Looks up a localized string similar to Revert Impersonation.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsSpecialTraceSourcesDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for built-in Categories that handle all events, events that do not match any other Category, and errors that occur when logging..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsSpecialTraceSourcesDisplayName">
            <summary>
              Looks up a localized string similar to Special Categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsTraceListenersDescription">
            <summary>
              Looks up a localized string similar to The Trace Listeners available to direct log messages to specific logging targets such as Windows Event Log or a database..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsTraceListenersDisplayName">
            <summary>
              Looks up a localized string similar to Logging Target Listeners.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsTraceSourcesDescription">
             <summary>
               Looks up a localized string similar to A list of categories to which log messages can be assigned. Log messages can be assigned to one or more Categories. 
            Each Category defines how log messages assigned that category will be handled..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsTraceSourcesDisplayName">
            <summary>
              Looks up a localized string similar to Categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsTracingEnabledDescription">
            <summary>
              Looks up a localized string similar to Specifies whether activity tracing is enabled. When enabled, code can use Tracer instances to trace individual activities and associate the resulting log messages through an Activity ID..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.LoggingSettingsTracingEnabledDisplayName">
            <summary>
              Looks up a localized string similar to Activity Tracing Enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataCategoryQueuePathDescription">
            <summary>
              Looks up a localized string similar to Queue Path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataCategoryQueuePathDisplayName">
            <summary>
              Looks up a localized string similar to Queue Path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataDescription">
             <summary>
               Looks up a localized string similar to A logging target listener that writes log messages to a specified Windows Message Queuing queue. 
            A wide range of options can be specified for the queues, priority, transaction, and encryption..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Message Queuing Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataFormatterDescription">
             <summary>
               Looks up a localized string similar to The formatter to use with this trace listener. 
            This must be the Binary Formatter when you use this listener with the Message Queuing distributor service..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataFormatterDisplayName">
            <summary>
              Looks up a localized string similar to Formatter Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataMessagePriorityDescription">
             <summary>
               Looks up a localized string similar to Sets the priority of a log entry. 
            This determines its priority while the log entry is in transit and when it is inserted into its destination queue. 
            Possible values are: AboveNormal, High, Highest, Low, Lowest, Normal, VeryHigh, and VeryLow..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataMessagePriorityDisplayName">
            <summary>
              Looks up a localized string similar to Message Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Message Queuing (MSMQ) Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataQueuePathDescription">
            <summary>
              Looks up a localized string similar to The path to the queue that the Msmq TraceListener instance uses. This attribute is a message queuing path, and it applies to the MsmqTraceListener class..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataQueuePathDisplayName">
            <summary>
              Looks up a localized string similar to Queue Path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataRecoverableDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the log entry is guaranteed to be delivered if there is a computer failure or network problem..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataRecoverableDisplayName">
            <summary>
              Looks up a localized string similar to Recoverable.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTimeToBeReceivedDescription">
            <summary>
              Looks up a localized string similar to The total time for a log entry to be received by the destination queue..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTimeToBeReceivedDisplayName">
            <summary>
              Looks up a localized string similar to Time To Be Received.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTimeToReachQueueDescription">
            <summary>
              Looks up a localized string similar to The maximum time for the log entry to reach the queue..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTimeToReachQueueDisplayName">
            <summary>
              Looks up a localized string similar to Time To Reach Queue.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTransactionTypeDescription">
            <summary>
              Looks up a localized string similar to The type of a Message Queuing transaction. Possible values are Automatic, None, and Single..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTransactionTypeDisplayName">
            <summary>
              Looks up a localized string similar to Transaction Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Message Queuing (MSMQ) Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataUseAuthenticationDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the message was (or must be) authenticated before being sent..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataUseAuthenticationDisplayName">
            <summary>
              Looks up a localized string similar to Use Authentication.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataUseDeadLetterQueueDescription">
            <summary>
              Looks up a localized string similar to Specifies whether a copy of a message that could not be delivered should be sent to a dead-letter queue..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataUseDeadLetterQueueDisplayName">
            <summary>
              Looks up a localized string similar to Use Dead Letter Queue.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataUseEncryptionDescription">
            <summary>
              Looks up a localized string similar to Specifies whether to make the message private..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.MsmqTraceListenerDataUseEncryptionDisplayName">
            <summary>
              Looks up a localized string similar to Use Encryption.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataDescription">
            <summary>
              Looks up a localized string similar to A filter that blocks log messages or allows them to pass based on the priority specified in the log message. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataDisplayName">
            <summary>
              Looks up a localized string similar to Priority Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataMaximumPriorityDescription">
             <summary>
               Looks up a localized string similar to The maximum priority value for messages to be passed to the logging target listener(s).  
            Messages with a priority above this value are not sent to the logging target. .
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataMaximumPriorityDisplayName">
            <summary>
              Looks up a localized string similar to Maximum Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataMinimumPriorityDescription">
             <summary>
               Looks up a localized string similar to The minimum priority value for messages to be passed to the logging target listener(s).  
            Messages with a priority below this value are not sent to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataMinimumPriorityDisplayName">
            <summary>
              Looks up a localized string similar to Minimum Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Priority Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Priority Logging Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.PriorityFilterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataDescription">
             <summary>
               Looks up a localized string similar to A logging target listener that writes log messages to a series of text files. 
            The listener can start a new file at specified intervals, use a specified file naming pattern, and optionally overwrite existing files. 
            Header and footer text can be specified, and the format of the message defined though a template..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Rolling Flat File Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFileNameDescription">
            <summary>
              Looks up a localized string similar to The path and name of the disk file to write log message to. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFileNameDisplayName">
            <summary>
              Looks up a localized string similar to File Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFooterDescription">
            <summary>
              Looks up a localized string similar to The text of the footer to add to the log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFooterDisplayName">
            <summary>
              Looks up a localized string similar to Message Footer.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFormatterDescription">
            <summary>
              Looks up a localized string similar to The name of the Log Message Formatter to use for formatting the log message before sending it to the logging target..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataFormatterDisplayName">
            <summary>
              Looks up a localized string similar to Formatter Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataHeaderDescription">
            <summary>
              Looks up a localized string similar to The text of the header to add to the log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataHeaderDisplayName">
            <summary>
              Looks up a localized string similar to Message Header.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataMaxArchivedFilesDescription">
            <summary>
              Looks up a localized string similar to The maximum number of log files to retain. When set to a numeric value, the listener will purge old files based on the file creation date when the number exceeds the specified value..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataMaxArchivedFilesDisplayName">
            <summary>
              Looks up a localized string similar to Max Archived Files.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Rolling Flat File Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataRollFileExistsBehaviorDescription">
             <summary>
               Looks up a localized string similar to Determines what occurs to an existing file when it rolls over. 
            Increment means that the listener will create a new file using a name created by incrementing the timestamp. 
            Overwrite means that, if a value for the Timestamp Pattern is not specified, the existing file is overwritten..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataRollFileExistsBehaviorDisplayName">
            <summary>
              Looks up a localized string similar to File Exists Behavior.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataRollIntervalDescription">
             <summary>
               Looks up a localized string similar to Determines when the log file rolls over. The default is None. 
            Other options are intervals of Midnight, Minute, Hour, Day, Month, or Year. 
            If required, both a maximum file size and a roll interval can be specified..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataRollIntervalDisplayName">
            <summary>
              Looks up a localized string similar to Roll Interval.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataRollSizeKBDescription">
            <summary>
              Looks up a localized string similar to The maximum size of the log file, in kilobytes, before it rolls over. If required, both a maximum file size and a roll interval can be specified..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataRollSizeKBDisplayName">
            <summary>
              Looks up a localized string similar to Roll Size KB.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataTimeStampPatternDescription">
            <summary>
              Looks up a localized string similar to The date/time format used to create the suffix for the file name, such as &apos;yyyy-MM-dd&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataTimeStampPatternDisplayName">
            <summary>
              Looks up a localized string similar to Timestamp Pattern.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Rolling Flat File Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.RollingFlatFileTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataAllEventsTraceSourceDescription">
            <summary>
              Looks up a localized string similar to A filter that can be used to specify a logging target for all log messages sent to the Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataAllEventsTraceSourceDisplayName">
            <summary>
              Looks up a localized string similar to All Events Category Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataDescription">
            <summary>
              Looks up a localized string similar to Filters that allow all events, unprocessed events, and logging and working messages to be sent to specified logging target listeners..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataDisplayName">
            <summary>
              Looks up a localized string similar to Special Category Filters.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataErrorsTraceSourceDescription">
            <summary>
              Looks up a localized string similar to A filter that can be used to specify a logging target for log messages when a logging error occurs..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataErrorsTraceSourceDisplayName">
            <summary>
              Looks up a localized string similar to Errors Category Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataNotProcessedTraceSourceDescription">
            <summary>
              Looks up a localized string similar to A filter that can be used to specify a logging target for log messages that do not match any configured category..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SpecialTraceSourcesDataNotProcessedTraceSourceDisplayName">
            <summary>
              Looks up a localized string similar to Unprocessed Category Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to An abstract base class for trace listeners that monitor trace and debug output..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to System Diagnostics Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the System Diagnostics Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the System Diagnostics Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.SystemDiagnosticsTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataDescription">
             <summary>
               Looks up a localized string similar to A Log Message Formatter that generates the output for a log message in a text format suitable for use with listeners such as the 
            Flat File, Rolling Flat File, Email, and Event Log Trace Listeners. .
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataDisplayName">
            <summary>
              Looks up a localized string similar to Text Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Text Log Message Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataTemplateDescription">
             <summary>
               Looks up a localized string similar to The template used to format the log message. It contains tokens that are replaced by values from the log message. 
            Use the editor to edit the default template and insert tokens and text..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataTemplateDisplayName">
            <summary>
              Looks up a localized string similar to Template.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Text Log Message Formatter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TextFormatterDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataCollectionDescription">
            <summary>
              Looks up a localized string similar to A collection of Trace Listeners..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataCollectionDisplayName">
            <summary>
              Looks up a localized string similar to Trace Listener Data Collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to An abstract base class for all trace listeners..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerReferenceDataDescription">
            <summary>
              Looks up a localized string similar to The Logging Target Listener to which log entries will be sent..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerReferenceDataDisplayName">
            <summary>
              Looks up a localized string similar to Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerReferenceDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Logging Target Listener to which log entries will be sent..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceListenerReferenceDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Trace Listener Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataAutoFlushDescription">
             <summary>
               Looks up a localized string similar to Specifies if the Logging Target Listeners will automatically flush messages to the target as soon as they are received. 
            When set to False, the Listener buffers the messages and sends them to the target in batches or when significant events occur such as the machine shutting down..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataAutoFlushDisplayName">
            <summary>
              Looks up a localized string similar to Auto Flush.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataDefaultLevelDescription">
             <summary>
               Looks up a localized string similar to The severity level for messages that will be logged. Messages sent to the block for this category, 
            and with a lower severity than that specified, will not be logged for this category..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataDefaultLevelDisplayName">
            <summary>
              Looks up a localized string similar to Minimum Severity.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataDescription">
             <summary>
               Looks up a localized string similar to Defines the settings for a Category to which log messages can be assigned. 
            Log messages can be assigned to one or more Categories. 
            Each Category defines how log messages assigned that category will be handled..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataDisplayName">
            <summary>
              Looks up a localized string similar to Category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the logging category..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataTraceListenersDescription">
            <summary>
              Looks up a localized string similar to The list of Logging Target Listeners for this Category or Special Filter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.TraceSourceDataTraceListenersDisplayName">
            <summary>
              Looks up a localized string similar to Listeners.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to A logging target listener that raises a WMI event for each log message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to WMI Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the WMI Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the WMI Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.WmiTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataDescription">
            <summary>
              Looks up a localized string similar to A logging target listener that writes log messages in XML format to a specified text file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataDisplayName">
            <summary>
              Looks up a localized string similar to XML Trace Listener.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataFileNameDescription">
            <summary>
              Looks up a localized string similar to The path and name of the disk file to write the log messages to. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataFileNameDisplayName">
            <summary>
              Looks up a localized string similar to File Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataFilterDescription">
             <summary>
               Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
            Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
            The behavior is for messages with the selected severity and all higher severities to be included. 
            For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataFilterDisplayName">
            <summary>
              Looks up a localized string similar to Severity Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Listener Data Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the XML Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataTraceOutputOptionsDescription">
             <summary>
               Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
            Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
            The default is None. This property is optional..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataTraceOutputOptionsDisplayName">
            <summary>
              Looks up a localized string similar to Trace Output Options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the XML Trace Listener..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.DesignResources.XmlTraceListenerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage">
            <summary>
            Represents a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage"/>.
            Encapsulates a System.Net.MailMessage with functions to accept a LogEntry, Formatting, and sending of emails
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage"/> with email configuration data, logentry, and formatter 
            </summary>
            <param name="configurationData">The configuration data <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> 
            that represents how to create the email message</param>
            <param name="logEntry">The LogEntry <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to send via email.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage"/> with the raw data to create and email, the logentry, and the formatter 
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
            <param name="logEntry">The LogEntry <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to send via email.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage"/> with the raw data to create and email, the logentry, and the formatter 
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
            <param name="logEntry">The LogEntry <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to send via email.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
            <param name="authenticationMode">Authenticate mode to use when connecting to SMTP server.</param>
            <param name="userName">User name to send to SMTP server if using username/password authentication.</param>
            <param name="password">Password to send to SMTP server if using username/password authentication.</param>
            <param name="useSSL">Use SSL to connect to STMP server - if true, yes, if false, no.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage"/> with the raw data to create and email, a message, and the formatter 
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
            <param name="message">Represents the message to send via email.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage"/> with the raw data to create and email, a message, and the formatter 
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
            <param name="message">Represents the message to send via email.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
            <param name="authenticationMode">Authenticate mode to use when connecting to SMTP server.</param>
            <param name="userName">User name to send to SMTP server if using username/password authentication.</param>
            <param name="password">Password to send to SMTP server if using username/password authentication.</param>
            <param name="useSSL">Use SSL to connect to STMP server - if true, yes, if false, no.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.GenerateSubjectPrefix(System.String)">
            <summary>
            Creates the prefix for the subject line
            </summary>
            <param name="subjectLineField">string to add as the subject line prefix (plus whitespace) if it is not empty.</param>
            <returns>modified string to use as subject line prefix</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.GenerateSubjectSuffix(System.String)">
            <summary>
            Creates the suffix for the subject line.
            </summary>
            <param name="subjectLineField">string to add as the subject line suffix (plus whitespace) if it is not empty.</param>
            <returns>modified string to use as subject line suffix</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.CreateMailMessage">
            <summary>
            Creates a <see cref="T:System.Net.Mail.MailMessage"/> from the configuration data which was used to create the instance of this object.
            </summary>
            <returns>A new <see cref="T:System.Net.Mail.MailMessage"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.Send">
            <summary>
            Uses the settings for the SMTP server and SMTP port to send the new mail message
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailMessage.SendMessage(System.Net.Mail.MailMessage)">
            <summary>
            Uses the settings for the SMTP server and SMTP port to send the MailMessage that it is passed
            </summary>
            <param name="message">MailMessage to send via SMTP</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.#ctor">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> with a toaddress, 
             fromaddress, subjectLineStarter, subjectLineEnder, smtpServer, and a formatter name.
             Default value for the SMTP port is 25
             </summary>
             <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
             <param name="fromAddress">Represents from whom the email is sent.</param>
             <param name="subjectLineStarter">Starting text for the subject line.</param>
             <param name="subjectLineEnder">Ending text for the subject line.</param>
             <param name="smtpServer">The name of the SMTP server.</param>
             <param name="formatterName">The name of the Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
             <summary>
             Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> with a toaddress, 
             fromaddress, subjectLineStarter, subjectLineEnder, smtpServer, and a formatter name.
             </summary>
             <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
             <param name="fromAddress">Represents from whom the email is sent.</param>
             <param name="subjectLineStarter">Starting text for the subject line.</param>
             <param name="subjectLineEnder">Ending text for the subject line.</param>
             <param name="smtpServer">The name of the SMTP server.</param>
             <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
             <param name="formatterName">The name of the Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
             <summary>
             Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> with a toaddress, 
             fromaddress, subjectLineStarter, subjectLineEnder, smtpServer, and a formatter name.
             </summary>
             <param name="name">The name of this listener</param>        
             <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
             <param name="fromAddress">Represents from whom the email is sent.</param>
             <param name="subjectLineStarter">Starting text for the subject line.</param>
             <param name="subjectLineEnder">Ending text for the subject line.</param>
             <param name="smtpServer">The name of the SMTP server.</param>
             <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
             <param name="formatterName">The name of the Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Diagnostics.TraceOptions)">
             <summary>
             Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> with a toaddress, 
             fromaddress, subjectLineStarter, subjectLineEnder, smtpServer, a formatter name and trace options.
             </summary>
             <param name="name">The name of this listener</param>        
             <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
             <param name="fromAddress">Represents from whom the email is sent.</param>
             <param name="subjectLineStarter">Starting text for the subject line.</param>
             <param name="subjectLineEnder">Ending text for the subject line.</param>
             <param name="smtpServer">The name of the SMTP server.</param>
             <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
             <param name="formatterName">The name of the Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the
            email message should be formatted</param>
            <param name="traceOutputOptions">The trace options.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Diagnostics.TraceOptions,System.Diagnostics.SourceLevels)">
             <summary>
             Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> with a toaddress, 
             fromaddress, subjectLineStarter, subjectLineEnder, smtpServer, a formatter name and trace options.
             </summary>
             <param name="name">The name of this listener</param>        
             <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
             <param name="fromAddress">Represents from whom the email is sent.</param>
             <param name="subjectLineStarter">Starting text for the subject line.</param>
             <param name="subjectLineEnder">Ending text for the subject line.</param>
             <param name="smtpServer">The name of the SMTP server.</param>
             <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
             <param name="formatterName">The name of the Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the
            email message should be formatted</param>
             <param name="traceOutputOptions">The trace options.</param>
             <param name="filter">The filter to apply.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Diagnostics.TraceOptions,System.Diagnostics.SourceLevels,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode,System.String,System.String,System.Boolean)">
             <summary>
             Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> with a toaddress, 
             fromaddress, subjectLineStarter, subjectLineEnder, smtpServer, a formatter name, trace options
             and authentication information.
             </summary>
             <param name="name">The name of this listener</param>        
             <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
             <param name="fromAddress">Represents from whom the email is sent.</param>
             <param name="subjectLineStarter">Starting text for the subject line.</param>
             <param name="subjectLineEnder">Ending text for the subject line.</param>
             <param name="smtpServer">The name of the SMTP server.</param>
             <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
             <param name="formatterName">The name of the Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the
            email message should be formatted</param>
             <param name="traceOutputOptions">The trace options.</param>
             <param name="filter">The filter to apply.</param>
             <param name="authenticationMode">Authenticate mode to use.</param>
             <param name="userName">User name to pass to the server if using <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode.UserNameAndPassword"/>.</param>
             <param name="password">Password to pass to the server if using <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode.UserNameAndPassword"/>.</param>
             <param name="useSSL">Connect to the server using SSL?</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.ToAddress">
            <summary>
            Gets and sets the ToAddress.  One or more email semicolon separated addresses.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.FromAddress">
            <summary>
            Gets and sets the FromAddress. Email address that messages will be sent from.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.SubjectLineStarter">
            <summary>
            Gets and sets the Subject prefix.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.SubjectLineEnder">
            <summary>
            Gets and sets the Subject suffix.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.SmtpServer">
            <summary>
            Gets and sets the SMTP server to use to send messages.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.SmtpPort">
            <summary>
            Gets and sets the SMTP port.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.Formatter">
            <summary>
            Gets and sets the formatter name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.AuthenticationMode">
            <summary>
            How do you authenticate against the email server?
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.UseSSL">
            <summary>
            Use SSL to connect to the email server?
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.UserName">
            <summary>
            User name when authenticating with user name and password.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.Password">
            <summary>
            Password when authenticating with user name and password.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.#ctor">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/> with a filename and a formatter name.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="formatterName">The formatter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/> with 
            name, file name and formatter name.
            </summary>
            <param name="name">The name.</param>
            <param name="fileName">The file name.</param>
            <param name="formatterName">The formatter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="fileName">The file name.</param>
            <param name="header">The header.</param>
            <param name="footer">The footer.</param>
            <param name="formatterName">The formatter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="fileName">The file name.</param>
            <param name="header">The header.</param>
            <param name="footer">The footer.</param>
            <param name="formatterName">The formatter name.</param>
            <param name="traceOutputOptions">The trace options.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="listenerType">The type of the represented <see cref="T:System.Diagnostics.TraceListener"/></param>
            <param name="fileName">The file name.</param>
            <param name="formatterName">The formatter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.#ctor(System.String,System.Type,System.String,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="listenerType">The type of the represented <see cref="T:System.Diagnostics.TraceListener"/></param>
            <param name="fileName">The file name.</param>
            <param name="formatterName">The formatter name.</param>
            <param name="traceOutputOptions">The trace options.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.FileName">
            <summary>
            Gets and sets the file name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.Header">
            <summary>
            Gets and sets the header.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.Footer">
            <summary>
            Gets and sets the footer.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.Formatter">
            <summary>
            Gets and sets the formatter name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.#ctor">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/> with a source name and a formatter name.
            </summary>
            <param name="source">The event log source name.</param>
            <param name="formatterName">The formatter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/> with name, source name 
            and formatter name.
            </summary>
            <param name="name">The name.</param>
            <param name="source">The event log source name.</param>
            <param name="formatterName">The formatter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/> with name, source name 
            log name, machine name, and formatter name.
            </summary>
            <param name="name">The name.</param>
            <param name="source">The event log source name.</param>
            <param name="logName">The log name.</param>
            <param name="machineName">The machine name.</param>
            <param name="formatterName">The formatter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes a named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/> with name, source name 
            log name, machine name, formatter name, and <see cref="T:System.Diagnostics.TraceOptions"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="source">The event log source name.</param>
            <param name="logName">The log name.</param>
            <param name="machineName">The machine name.</param>
            <param name="formatterName">The formatter name.</param>
            <param name="traceOutputOptions">The output options.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.Source">
            <summary>
            Gets or sets the event log source of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.Formatter">
            <summary>
            Gets or sets the name of the formatter for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.Log">
            <summary>
            Gets or sets the name of the log for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.MachineName">
            <summary>
            Gets or sets the name of the machine for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData">
            <summary>
            Represents the configuration settings for a log formatter.  This class is abstract.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData.#ctor">
            <summary>
            Create a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData.#ctor(System.String,System.Type)">
            <summary>
            Create a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="formatterType">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> type.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData.GetRegistrations">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry for this data section.
            </summary>
            <returns>The type registration for this data section</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter"/> object.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData.FormattingProperty">
            <summary>
            Formatting field.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData"/> class with the specified name.
            </summary>
            <param name="name">The name for the represented <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter"/> object.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.JsonLogFormatterData.Formatting">
            <summary>
            Gets or sets the template that contains the tokens to replace.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerCategoryEntry">
            <summary>
            A configuration element that handles the entries for the &lt;categories&gt; element
            for the Log Call handler.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerCategoryEntry.#ctor">
            <summary>
            Construct an empty <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerCategoryEntry"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerCategoryEntry.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerCategoryEntry"/> with the given
            category string.
            </summary>
            <param name="name">Category string.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerCategoryEntry.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
            <remarks>
            Overriden in order to annotate with designtime attribute.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData">
            <summary>
            A configuration element for the data for the LogCallHandler.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData"/> instance.
            </summary>
            <param name="handlerName">Handler name</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData"/> instance.
            </summary>
            <param name="handlerName">Handler name</param>
            <param name="handlerOrder">Handler order</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.LogBehavior">
            <summary>
            Should the handler log before the call, after the call, or both?
            </summary>
            <value>The "logBehavior" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.Categories">
            <summary>
            Collection of log categories to use in the log message.
            </summary>
            <value>The "categories" nested element.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.BeforeMessage">
            <summary>
            Message for the log entry in before-call logging.
            </summary>
            <value>The "beforeMessage" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.AfterMessage">
            <summary>
            Message for the log entry in after-call logging.
            </summary>
            <value>The "afterMessage" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.EventId">
            <summary>
            Event Id to put into log entries.
            </summary>
            <value>The "eventId" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.IncludeParameterValues">
            <summary>
            Include parameter values and return values in the log entry
            </summary>
            <value>The "includeParameterValues" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.IncludeCallStack">
            <summary>
            Include the call stack in the log entries.
            </summary>
            <remarks>Setting this to true requires UnmanagedCode permissions.</remarks>
            <value>The "includeCallStack" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.IncludeCallTime">
            <summary>
            Include the time to execute the call in the log entries.
            </summary>
            <value>The "includeCallTime" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.Priority">
            <summary>
            The priority of the log entries.
            </summary>
            <value>the "priority" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.Severity">
            <summary>
            The severity of the log entry.
            </summary>
            <value>the "severity" config attribute.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior">
            <summary>
            This enum control when the logging call handler will add log entries.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior.BeforeAndAfter">
            <summary>
            Log both before and after the call.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior.Before">
            <summary>
            Log only before the call.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.HandlerLogBehavior.After">
            <summary>
            Log only after the call.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/> class.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData.#ctor(System.Boolean)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/> class.</para>
            </summary>
            <param name="enabled">True if logging should be enabled.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initialize a new named instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/> class.</para>
            </summary>
            <param name="name">The name.</param>
            <param name="enabled">True if logging should be enabled.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData.Enabled">
            <summary>
            Gets or sets the enabled value.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData.GetRegistrations">
            <summary>
            Creates an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instances describing the filter represented by 
            this configuration object.
            </summary>
            <returns>A an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instance describing a filter.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData">
            <summary>
            Base class for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> configuration objects.
            </summary>
            <remarks>
            This class should be made abstract, but in order to use it in a NameTypeConfigurationElementCollection
            it must be public and have a no-args constructor.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData"/> with name and type.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData.GetRegistrations">
            <summary>
            Returns a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for this data section.
            </summary>
            <remarks>
            This must be overridden by any subclasses, but is not abstract due to configuration section serialization constraints.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings">
            <summary>
            Configuration settings for client-side logging applications.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.SectionName">
            <summary>
            Configuration section name for logging client settings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> using the given name.
            </summary>
            <param name="name">The name to use for this instance</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> using the given values.
            </summary>
            <param name="name">The name to use for this instance</param>
            <param name="tracingEnabled">Should tracing be enabled?</param>
            <param name="defaultCategory">The default category to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.GetLoggingSettings(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieves the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> section from the configuration source.
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to get the section from.</param>
            <returns>The logging section.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.TracingEnabled">
            <summary>
            Enable or disable trace logging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.Name">
            <summary>
            Gets or sets the name of the configuration node.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.DefaultCategory">
            <summary>
            Gets or sets the default logging category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.TraceListeners">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> configuration elements that define 
            the available <see cref="T:System.Diagnostics.TraceListener"/>s.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.Formatters">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormatterData"/> configuration elements that define 
            the available <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>s.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.LogFilters">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogFilterData"/> configuration elements that define 
            the available <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>s.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.TraceSources">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> configuration elements that define 
            the available <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.SpecialTraceSources">
            <summary>
            Gets or sets the configuration elements that define the distinguished <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s: 
            for all events. for missing categories, and for errors and warnings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.LogWarningWhenNoCategoriesMatch">
            <summary>
            Gets or sets the indication that a warning should be logged when a category is not found while 
            dispatching a log entry.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.RevertImpersonation">
            <summary>
            Gets or sets the indication that impersonation should be reverted temporarily while logging, if enabled.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider.CategoryFilterModePropertyName">
            <summary>
            The name of the category filter mode property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider.CategoryFiltersKeyName">
            <summary>
            The name of the category filter keys property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CategoryFilterDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CategoryFilterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CustomLogFilterDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomLogFilterData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CustomLogFilterDataManageabilityProvider.AttributesPropertyName">
            <summary>
            The name of the attributes property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CustomLogFilterDataManageabilityProvider.TypePropertyName">
            <summary>
            The name of the type property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CustomLogFilterDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.CustomLogFilterDataManageabilityProvider"/> class
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.LogEnabledFilterDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.LogEnabledFilterDataManageabilityProvider.EnabledPropertyName">
            <summary>
            The name of the enabled property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.LogEnabledFilterDataManageabilityProvider.#ctor">
            <summary>
            Initilize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.LogEnabledFilterDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.LogEnabledFilterDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.LogEnabledFilterDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.LogEnabledFilterDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LogEnabledFilterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider.MaximumPriorityPropertyName">
            <summary>
            The name of the maximum property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider.MinimumPriorityPropertyName">
            <summary>
            The name of the minimum property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider.#ctor">
            <summary>
            Initialize an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Filters.PriorityFilterDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.BinaryLogFormatterDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.BinaryLogFormatterDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.BinaryLogFormatterDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.BinaryLogFormatterDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.BinaryLogFormatterDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.BinaryLogFormatterDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.BinaryLogFormatterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.CustomFormatterDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomFormatterData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.CustomFormatterDataManageabilityProvider.AttributesPropertyName">
            <summary>
            The name of the attributes property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.CustomFormatterDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.CustomFormatterDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider.TemplatePropertyName">
            <summary>
            The name of the template property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider.#ctor">
            <summary>
            Initialize an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider.EscapeString(System.String)">
            <summary>
             Escape the text.
            </summary>
            <param name="text">The text to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Formatters.TextFormatterDataManageabilityProvider.UnescapeString(System.String)">
            <summary>
             Un escape the string.
            </summary>
            <param name="text">The text to un escape.</param>
            <returns>The un escaped string.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider">
            <summary>
            Represents the behavior required to provide Group Policy updates for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings"/> instance
            and its internal configuration elements.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.DefaultCategoryPropertyName">
            <summary>
            The name of the default category property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.TracingEnabledPropertyName">
            <summary>
            The name of the tracing enabled property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.LogWarningOnNoMatchPropertyName">
            <summary>
            The name of the log warning on no match property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.RevertImpersonationPropertyName">
            <summary>
            The name of the revert impersonation property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.CategorySourcesKeyName">
            <summary>
            The name of the category sources property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SpecialSourcesKeyName">
            <summary>
            The name of the special sources property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SpecialSourcesAllEventsKeyName">
            <summary>
            The name of the all events property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SpecialSourcesErrorsKeyName">
            <summary>
            The name of the sources errors property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SpecialSourcesNotProcessedKeyName">
            <summary>
            The name of the special sources not processed key property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SourceDefaultLevelPropertyName">
            <summary>
            The name of the source default level property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SourceAutoFlushPropertyName">
            <summary>
            The name of the auto flush level property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SourceTraceListenersPropertyName">
            <summary>
            The name of the source trace listerners property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SourceKindCategory">
            <summary>
            The name of the source kind category property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SourceKindAllEvents">
            <summary>
            The name of the source kind all events property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SourceKindErrors">
            <summary>
            The name of the source kind errors property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SourceKindNotProcessed">
            <summary>
            The name of the source kind not processed property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.LogFiltersKeyName">
            <summary>
            The name of the log filters property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.LogFormattersKeyName">
            <summary>
            The name of the log formatters property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.TraceListenersKeyName">
            <summary>
            The name of the trace listeners property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider"/> class with a 
            given set of manageability providers to use when dealing with the configuration for filters, formatters and trace listeners.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationSection">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="sectionKey">The root key for the section's policies.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.LoggingSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationElements(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.CategoryFilterCategoriesPartName">
            <summary>
              Looks up a localized string similar to Select the categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.CategoryFilterFilterModePartName">
            <summary>
              Looks up a localized string similar to Category filter mode.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.CategorySourcesCategoryName">
            <summary>
              Looks up a localized string similar to Category sources.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.CustomTraceListenerInitializationPartName">
            <summary>
              Looks up a localized string similar to Initialization.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EmailTraceListenerEnderPartName">
            <summary>
              Looks up a localized string similar to Subject line ender.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EmailTraceListenerFromAddressPartName">
            <summary>
              Looks up a localized string similar to From address.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EmailTraceListenerSmtpPortPartName">
            <summary>
              Looks up a localized string similar to SMTP port.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EmailTraceListenerSmtpServerPartName">
            <summary>
              Looks up a localized string similar to SMTP server.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EmailTraceListenerStarterPartName">
            <summary>
              Looks up a localized string similar to Subject line starter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EmailTraceListenerToAddressPartName">
            <summary>
              Looks up a localized string similar to To address.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EventLogTraceListenerLogPartName">
            <summary>
              Looks up a localized string similar to Log.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EventLogTraceListenerMachineNamePartName">
            <summary>
              Looks up a localized string similar to Machine name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.EventLogTraceListenerSourcePartName">
            <summary>
              Looks up a localized string similar to Source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.ExceptionErrorValueNotTimeSpan">
            <summary>
              Looks up a localized string similar to The value for &apos;{1}&apos; on key &apos;{0}&apos; is not a valid TimeSpan value: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.FilterPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for filter &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.FlatFileTraceListenerFileNamePartName">
            <summary>
              Looks up a localized string similar to File name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.FlatFileTraceListenerFooterPartName">
            <summary>
              Looks up a localized string similar to Footer.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.FlatFileTraceListenerHeaderPartName">
            <summary>
              Looks up a localized string similar to Header.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.FormatterPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for formatter &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LogEnabledFilterEnabledPartName">
            <summary>
              Looks up a localized string similar to Enabled.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LogFiltersCategoryName">
            <summary>
              Looks up a localized string similar to Log filters.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LogFormattersCategoryName">
            <summary>
              Looks up a localized string similar to Log formatters.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LoggingSectionCategoryName">
            <summary>
              Looks up a localized string similar to Logging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LoggingSettingsDefaultCategoryPartName">
            <summary>
              Looks up a localized string similar to Default category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LoggingSettingsEnableTracingPartName">
            <summary>
              Looks up a localized string similar to Enable tracing.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LoggingSettingsLogWarningPartName">
            <summary>
              Looks up a localized string similar to Log warning on missing category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LoggingSettingsPolicyName">
            <summary>
              Looks up a localized string similar to Specify Logging Application Block Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.LoggingSettingsRevertImpersonationPartName">
            <summary>
              Looks up a localized string similar to Revert impersonation.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerPriorityPartName">
            <summary>
              Looks up a localized string similar to Priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerQueuePathPartName">
            <summary>
              Looks up a localized string similar to Queue path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerRecoverablePartName">
            <summary>
              Looks up a localized string similar to Recoverable.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerTransactionTypePartName">
            <summary>
              Looks up a localized string similar to Transaction type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerTtbrPartName">
            <summary>
              Looks up a localized string similar to Time to be received.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerTtrqPartName">
            <summary>
              Looks up a localized string similar to Time to reach queue.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerUseAuthenticationPartName">
            <summary>
              Looks up a localized string similar to Use authentication.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerUseDeadLetterQueuePartName">
            <summary>
              Looks up a localized string similar to Use dead letter queue.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.MsmqTraceListenerUseEncryptionPartName">
            <summary>
              Looks up a localized string similar to Use encryption.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.PriorityFilterMaximumPriorityPartName">
            <summary>
              Looks up a localized string similar to Maximum priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.PriorityFilterMinimumPriorityPartName">
            <summary>
              Looks up a localized string similar to Minimum priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.RollingFlatFileTraceListenerFileNamePartName">
            <summary>
              Looks up a localized string similar to File name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.RollingFlatFileTraceListenerLockBehaviorPartName">
            <summary>
              Looks up a localized string similar to Lock behavior.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.RollingFlatFileTraceListenerMaxArchivedFilesPartName">
            <summary>
              Looks up a localized string similar to Max archived files.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.RollingFlatFileTraceListenerRollFileExistsBehaviorPartName">
            <summary>
              Looks up a localized string similar to File exists behavior.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.RollingFlatFileTraceListenerRollIntervalPartName">
            <summary>
              Looks up a localized string similar to Roll interval.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.RollingFlatFileTraceListenerRollSizeKBPartName">
            <summary>
              Looks up a localized string similar to Roll size.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.RollingFlatFileTraceListenerTimeStampPatternPartName">
            <summary>
              Looks up a localized string similar to Timestamp pattern.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.SpecialSourcesCategoryName">
            <summary>
              Looks up a localized string similar to Special sources.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TextFormatterEscapeInstructions_1">
            <summary>
              Looks up a localized string similar to To write a multi-line template, use \n or \r\n to represent a new line;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TextFormatterEscapeInstructions_2">
            <summary>
              Looks up a localized string similar to backslashes must also be escaped as \\.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TextFormatterTemplatePartName">
            <summary>
              Looks up a localized string similar to Template.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceListenerFilterPartName">
            <summary>
              Looks up a localized string similar to Filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceListenerFormatterPartName">
            <summary>
              Looks up a localized string similar to Formatter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceListenerPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for listener &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceListenersCategoryName">
            <summary>
              Looks up a localized string similar to Listeners.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceListenerTraceOptionsPartName">
            <summary>
              Looks up a localized string similar to Trace options.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceSourceAutoFlushPartName">
            <summary>
              Looks up a localized string similar to Auto flush.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceSourceDefaultLevelPartName">
            <summary>
              Looks up a localized string similar to Default level.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceSourceListenersPartName">
            <summary>
              Looks up a localized string similar to Select the trace listeners.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.TraceSourcePolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify &apos;{0}&apos; source settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.Properties.Resources.XmlTraceListenerFileNamePartName">
            <summary>
              Looks up a localized string similar to File name.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1">
            <summary>
            Base class for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> implementations that provide manageability
            support for custom provider's configuration.
            </summary>
            <typeparam name="T">The custon provider's configuration element type.</typeparam>
            <remarks>
            The basic configuration for a custom provider includes the provider type and a collection of attributes.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.InitDataPropertyName">
            <summary>
            The name of the initial data property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.TraceOutputOptionsPropertyName">
            <summary>
            The name of the trace output options property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.FilterPropertyName">
            <summary>
            The name of the filter property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.AttributesPropertyName">
            <summary>
            The name of the attribute property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.ProviderTypePropertyName">
            <summary>
            The name of the provider type property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.BasicCustomTraceListenerDataManageabilityProvider`1.OverrideWithGroupPolicies(`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to override these properties.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.CustomTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.CustomTraceListenerDataManageabilityProvider.FormatterPropertyName">
            <summary>
            The name of the formatter property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.CustomTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.CustomTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.CustomTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.CustomTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.CustomTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to override these properties.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.FromAddressPropertyName">
            <summary>
            The name of the from address property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.SmtpPortPropertyName">
            <summary>
            The name of the smtp port property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.SmtpServerPropertyName">
            <summary>
            The name of the smtp server.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.SubjectLineEnderPropertyName">
            <summary>
            The name of the subject line ender property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.SubjectLineStarterPropertyName">
            <summary>
            The name of the subject line starter property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.ToAddressPropertyName">
            <summary>
            The name of the to address property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.EmailTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.EmailTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider.FileNamePropertyName">
            <summary>
            The name of the file name property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider.FooterPropertyName">
            <summary>
            The name of the footer property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider.HeaderPropertyName">
            <summary>
            The name of the header property
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FlatFileTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider.LogPropertyName">
            <summary>
            The name of the log property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider.MachineNamePropertyName">
            <summary>
            The name of the machine property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider.SourcePropertyName">
            <summary>
            The name of the source property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.FormattedEventLogTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.MessagePriorityPropertyName">
            <summary>
            The name of the message priority property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.QueuePathPropertyName">
            <summary>
            The name of the queue path property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.RecoverablePropertyName">
            <summary>
            The name of the recoverable property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.TimeToBeReceivedPropertyName">
            <summary>
            The name of the time to be received property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.TimeToReachQueuePropertyName">
            <summary>
            The name of the time to reach the queue property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.TransactionTypePropertyName">
            <summary>
            The name of the transaction type property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.UseAuthenticationPropertyName">
            <summary>
            The name of the use authentication property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.UseDeadLetterQueuePropertyName">
            <summary>
            The name of the use dead letter queue property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.UseEncryptionPropertyName">
            <summary>
            The name of the use encryption property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.MsmqTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.FileNamePropertyName">
            <summary>
            The name of the file name property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.FooterPropertyName">
            <summary>
            The name of the footer property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.HeaderPropertyName">
            <summary>
            The name of the header property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.RollFileExistsBehaviorPropertyName">
            <summary>
            The name of the file exists behaviour property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.RollIntervalPropertyName">
            <summary>
            The name of the roll interval property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.RollSizeKBPropertyName">
            <summary>
            The name of the roll file size in kilobytes property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.TimeStampPatternPropertyName">
            <summary>
            The name of the time stamp property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.MaxArchivedFilesPropertyName">
            <summary>
            The name of the maxArchivedFiles property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.RollingFlatFileTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.SystemDiagnosticsTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.SystemDiagnosticsTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.SystemDiagnosticsTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1">
            <summary>
            Represents the behavior required to provide Group Policy updates for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.FormatterPropertyName">
            <summary>
            Name for the formatter property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.TraceOutputOptionsPropertyName">
            <summary>
            Name for the traceOutputOptions property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.FilterPropertyName">
            <summary>
            Name for the filter property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.AddTraceOptionsPart(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Adds the part to edit the policy overrides for the trace options of a trace listener to the content
            built by the <paramref name="contentBuilder"/>.
            </summary>
            <param name="contentBuilder">The builder for the content where the part will be added.</param>
            <param name="parentKey"></param>
            <param name="traceOutputOptions">The default value for the part.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.AddFilterPart(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Diagnostics.SourceLevels)">
            <summary>
            Adds the part to edit the policy overrides for the filter of a trace listener to the content
            built by the <paramref name="contentBuilder"/>.
            </summary>
            <param name="contentBuilder">The builder for the content where the part will be added.</param>
            <param name="filter">The default value for the part.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.AddFormattersPart(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Adds the part to edit the policy overrides for the formatter of a trace listener to the content
            built by the <paramref name="contentBuilder"/>.
            </summary>
            <param name="contentBuilder">The builder for the content where the part will be added.</param>
            <param name="formatterName">The default value for the part.</param>
            <param name="configurationSource">The configuration source to use to retrieve the available formatters.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.TraceListenerDataManageabilityProvider`1.GetFormatterPolicyOverride(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Utility method that retrieves values from registry keys associated to Group Policy overrides
            for the formatter name, giving priority to the machine level key.
            </summary>
            <param name="policyKey">The registry key that holds the policy overrides.</param>
            <returns>The value for the formatter name on <paramref name="policyKey"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.WmiTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.WmiTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.WmiTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.WmiTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.WmiTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.XmlTraceListenerDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.XmlTraceListenerDataManageabilityProvider.FileNamePropertyName">
            <summary>
            The name of the file name property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.XmlTraceListenerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.XmlTraceListenerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.XmlTraceListenerDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Manageability.TraceListeners.XmlTraceListenerDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultPriority">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The Priority value for the Priority property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultRecoverable">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The default value for the Recoverable property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultUseAuthentication">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The default value for the UseAuthentication property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultUseDeadLetter">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The default value for the UseDeadLetter property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultUseEncryption">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The default value for the UseEncryption property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultTimeToReachQueue">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The default value for the TimeToReachQueue property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultTimeToBeReceived">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The default value for the TimeToBeReceived property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.DefaultTransactionType">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            The default value for the TransactionType property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/> class with name, path and formatter name.
            </summary>
            <param name="name">The name for the represented trace listener.</param>
            <param name="queuePath">The path name for the represented trace listener.</param>
            <param name="formatterName">The formatter name for the represented trace listener.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.#ctor(System.String,System.String,System.String,System.Messaging.MessagePriority,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.Boolean,System.Boolean,System.Messaging.MessageQueueTransactionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/> class.
            </summary>
            <param name="name">The name for the represented trace listener.</param>
            <param name="queuePath">The path name for the represented trace listener.</param>
            <param name="formatterName">The formatter name for the represented trace listener.</param>
            <param name="messagePriority">The priority for the represented trace listener.</param>
            <param name="recoverable">The recoverable flag for the represented trace listener.</param>
            <param name="timeToReachQueue">The timeToReachQueue for the represented trace listener.</param>
            <param name="timeToBeReceived">The timeToReachQueue for the represented trace listener.</param>
            <param name="useAuthentication">The use authentication flag for the represented trace listener.</param>
            <param name="useDeadLetterQueue">The use dead letter flag for the represented trace listener.</param>
            <param name="useEncryption">The use encryption flag for the represented trace listener.</param>
            <param name="transactionType">The transaction type for the represented trace listener.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.#ctor(System.String,System.String,System.String,System.Messaging.MessagePriority,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.Boolean,System.Boolean,System.Messaging.MessageQueueTransactionType,System.Diagnostics.TraceOptions,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData"/> class.
            </summary>
            <param name="name">The name for the represented trace listener.</param>
            <param name="queuePath">The path name for the represented trace listener.</param>
            <param name="formatterName">The formatter name for the represented trace listener.</param>
            <param name="messagePriority">The priority for the represented trace listener.</param>
            <param name="recoverable">The recoverable flag for the represented trace listener.</param>
            <param name="timeToReachQueue">The timeToReachQueue for the represented trace listener.</param>
            <param name="timeToBeReceived">The timeToReachQueue for the represented trace listener.</param>
            <param name="useAuthentication">The use authentication flag for the represented trace listener.</param>
            <param name="useDeadLetterQueue">The use dead letter flag for the represented trace listener.</param>
            <param name="useEncryption">The use encryption flag for the represented trace listener.</param>
            <param name="transactionType">The transaction type for the represented trace listener.</param>
            <param name="traceOutputOptions">The trace output options for the represented trace listener.</param>
            <param name="filter">The filter for the represented trace listener.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.QueuePath">
            <summary>
            Gets or sets the message queue path.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.Formatter">
            <summary>
            Gets or sets formatter name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.MessagePriority">
            <summary>
            Gets or sets the message priority.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.TimeToReachQueue">
            <summary>
            Gets or sets the time to reach queue.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.TimeToBeReceived">
            <summary>
            Gets or sets the time to be received.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.Recoverable">
            <summary>
            Gets or sets the recoverable value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.UseAuthentication">
            <summary>
            Gets or sets the use authentication value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.UseDeadLetterQueue">
            <summary>
            Gets or sets the use dead letter value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.UseEncryption">
            <summary>
            Gets or sets the use encryption value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.TransactionType">
            <summary>
            Gets or sets the transaction type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.MsmqTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData">
            <summary>
            Represents the configuration for a priority filter.
            </summary>    
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.#ctor">
            <summary>
            Initializes a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/> with a minimum priority.
            </summary>
            <param name="minimumPriority">The minimum priority.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new named <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData"/> with a minimum priority.
            </summary>
            <param name="name">The name.</param>
            <param name="minimumPriority">The minimum priority.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.MinimumPriority">
            <summary>
            Gets or sets the minimum value for messages to be processed.  Messages with a priority
            below the minimum are dropped immediately on the client.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.MaximumPriority">
            <summary>
            Gets or sets the maximum priority value for messages to be processed.  Messages with a priority
            above the maximum are dropped immediately on the client.
            </summary>		
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.PriorityFilterData.GetRegistrations">
            <summary>
            Creates an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instances describing the filter represented by 
            this configuration object.
            </summary>
            <returns>A an enumeration of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> instance describing a filter.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData">
            <summary>
            Represents the configuration data for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.
            </summary>	
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval,System.Diagnostics.TraceOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/> class.
            </summary>
            <param name="name">The name for the configuration object.</param>
            <param name="traceOutputOptions">The trace options.</param>
            <param name="fileName"></param>
            <param name="footer"></param>
            <param name="header"></param>
            <param name="rollSizeKB"></param>
            <param name="timeStampPattern"></param>
            <param name="rollFileExistsBehavior"></param>
            <param name="rollInterval"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval,System.Diagnostics.TraceOptions,System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData"/> class.
            </summary>
            <param name="name">The name for the configuration object.</param>
            <param name="traceOutputOptions">The trace options.</param>
            <param name="filter">The filter to apply.</param>
            <param name="fileName"></param>
            <param name="footer"></param>
            <param name="header"></param>
            <param name="rollSizeKB"></param>
            <param name="timeStampPattern"></param>
            <param name="rollFileExistsBehavior"></param>
            <param name="rollInterval"></param>
            <param name="formatter"></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.FileName">
            <summary>
            FileName
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.Footer">
            <summary>
            Gets and sets the footer.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.Formatter">
            <summary>
            Gets and sets the formatter name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.Header">
            <summary>
            Gets and sets the header.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.RollFileExistsBehavior">
            <summary>
            Exists Behavior
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.RollInterval">
            <summary>
            Roll Intervall
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.RollSizeKB">
            <summary>
            Roll Size KB 
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.TimeStampPattern">
            <summary>
            Time stamp
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.MaxArchivedFiles">
            <summary>
            Max rolled files
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData">
            <summary>
            Represents the configuration settings that describe the "all events", "not processed" and "errors" <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s
            for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData"/> with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData"/>.
            </summary>
            <param name="mandatory">The configuration for the optional trace source to send all messages received.</param>
            <param name="notProcessed">The configuration for the optional to send messages with unknown categories.</param>
            <param name="errors">The configuration for the mandatory trace source to log processing errors.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.AllEventsTraceSource">
            <summary>
            Gets or sets the configuration for the optional trace source to send all messages received.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.NotProcessedTraceSource">
            <summary>
            Gets or sets the configuration for the optional to send messages with unknown categories.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SpecialTraceSourcesData.ErrorsTraceSource">
            <summary>
            Gets or sets the configuration for the mandatory trace source to log processing errors.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData">
            <summary>
            Represents the configuration settings for any trace listener.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemDiagnosticsTraceListenerData"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="initData">The init data.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemDiagnosticsTraceListenerData"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="typeName">The type.</param>
            <param name="initData">The init data.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData.#ctor(System.String,System.Type,System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemDiagnosticsTraceListenerData"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="initData">The init data.</param>
            <param name="traceOutputOptions">The trace output options.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData">
            <summary>
            Represents the configuration settings for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData.DefaultTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/> class with a template.
            </summary>
            <param name="templateData">
            Template containing tokens to replace.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/> class with a name and template.
            </summary>
            <param name="name">
            The name of the formatter.
            </param>
            <param name="templateData">
            Template containing tokens to replace.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData"/> class with a name and template.
            </summary>
            <param name="name">
            The name of the formatter.
            </param>
            <param name="formatterType">
            The type of the formatter.
            </param>
            <param name="templateData">
            Template containing tokens to replace.
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData.Template">
            <summary>
            Gets or sets the template containing tokens to replace.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TextFormatterData.GetRegistrations">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry for this data section.
            </summary>
            <returns>The type registration for this data section</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData">
            <summary>
            Represents the configuration for a <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
            <remarks>
            Since trace listeners are not under our control, the building mechanism can't rely 
            on annotations to the trace listeners to determine the concrete <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> subtype 
            when deserializing. Because of this, the schema for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> includes the actual 
            type of the instance to build.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.listenerDataTypeProperty">
            <summary>
            Name of the property that holds the type for a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>.
            </summary>
            <remarks>
            This property will hold the type of the object it holds it. However, it's used during the 
            deserialization process when the actual type of configuration element to create has to be determined.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.traceOutputOptionsProperty">
            <summary>
            Name of the property that holds the <see cref="T:System.Diagnostics.TraceOptions"/> of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.filterProperty">
            <summary>
            Name of the property that holds the Filter of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> for the given <paramref name="traceListenerType"/>.
            </summary>
            <param name="traceListenerType">Type of trace listener this element represents.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.#ctor(System.String,System.Type,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> with a name and <see cref="T:System.Diagnostics.TraceOptions"/> for 
            a TraceListenerType.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListenerType">The trace listener type.</param>
            <param name="traceOutputOptions">The trace options.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.#ctor(System.String,System.Type,System.Diagnostics.TraceOptions,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> with a name, a <see cref="T:System.Diagnostics.TraceOptions"/> for 
            a TraceListenerType and a <see cref="T:System.Diagnostics.SourceLevels"/> for a Filter.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListenerType">The trace listener type.</param>
            <param name="traceOutputOptions">The trace options.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.ListenerDataType">
            <summary>
            Gets or sets the type of the actual <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> type.
            </summary>
            <remarks>
            Should match the this.GetType().
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.ListenerDataTypeName">
            <summary>
            Gets or sets the fully qualified name of the actual <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> type.
            </summary>
            <value>
            the fully qualified name of the actual <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> type.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.TraceOutputOptions">
            <summary>
            Gets or sets the <see cref="T:System.Diagnostics.TraceOptions"/> for the represented <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.Filter">
            <summary>
            Gets or sets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.Filter"/> for the represented <see cref="T:System.Diagnostics.TraceListener"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetRegistrations">
            <summary>
            Returns the type <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries for this configuration object.
            </summary>
            <returns>A set of registry entries.</returns>        
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetTraceListenerTypeRegistration">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry for the actual trace listener represented by this 
            configuration object.
            </summary>
            <returns>A registry entry.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetRegistrations"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates a <see cref="T:System.Diagnostics.TraceListener"/></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.GetTraceListenerWrapperTypeRegistration">
            <summary>
            Returns the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry for trace listener wrapper used to support configuration 
            updates.
            </summary>
            <returns>A registry entry.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData.WrappedTraceListenerName">
            <summary>
            Gets the name to use for the actual trace listener represented by this configuration object.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerDataCollection">
            <summary>
            Custom <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1"/> that deals with <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>.
            </summary>
            <remarks>
            The default implementation based on annotations on the feature types can't be used because trace listeners can't be annotated.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerDataCollection.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Returns the <see cref="T:System.Configuration.ConfigurationElement"/> type to created for the current xml node.
            </summary>
            <remarks>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/> include the configuration object type as a serialized attribute.
            </remarks>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData">
            <summary>
            Configuration for a reference to named <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData"/> class with a name.
            </summary>
            <param name="name">Name for trace listener.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceListenerReferenceData.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
            <remarks>
            Overriden in order to annotate with designtime attribute.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> class with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.#ctor(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> class with name and default level.
            </summary>
            <param name="name">The name for the represented log source.</param>
            <param name="defaultLevel">The trace level for the represented log source.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.#ctor(System.String,System.Diagnostics.SourceLevels,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData"/> class with name, default level and auto flush;
            </summary>
            <param name="name">The name for the represented log source.</param>
            <param name="defaultLevel">The trace level for the represented log source.</param>
            <param name="autoFlush">If Flush should be called on the Listeners after every write.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.DefaultLevel">
            <summary>
            Gets or sets the default <see cref="T:System.Diagnostics.SourceLevels"/> for the trace source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.AutoFlush">
            <summary>
            Gets or sets the AutoFlush indicating whether Flush should be called on the Listeners after every write.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.TraceListeners">
            <summary>
            Gets the collection of references to trace listeners for the trace source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.TraceSourceData.GetRegistrations">
            <summary>
             Returns the type <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries describing the <see cref="T:System.Diagnostics.TraceSource"/> represented
             by this configuration object.
            </summary>
            <returns>A set of registry entries.</returns>        
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.Unity.LoggingBlockExtension">
            <summary>
            Container extension to the policies required to create the Logging Application Block's
            objects described in the configuration file.
            </summary>
            <remarks>This function is now performed directly by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/>.
            This extension is now a noop and is obsolete.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/> class.
            </summary>
            <param name="name">The name for the configuration object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData.#ctor(System.String,System.Diagnostics.TraceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/> class.
            </summary>
            <param name="name">The name for the configuration object.</param>
            <param name="traceOutputOptions">The trace options.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData.#ctor(System.String,System.Diagnostics.TraceOptions,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData"/> class.
            </summary>
            <param name="name">The name for the configuration object.</param>
            <param name="traceOutputOptions">The trace options.</param>
            <param name="filter">The filter to apply.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.WmiTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData.#ctor">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData"/> with a filename and a formatter name.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="name">The name for the configuration object.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData.FileName">
            <summary>
            Gets and sets the file name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.XmlTraceListenerData.GetCreationExpression">
            <summary>
            Returns a lambda expression that represents the creation of the trace listener described by this
            configuration object.
            </summary>
            <returns>A lambda expression to create a trace listener.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems">
            <summary>
            Provides methods to maintain a key/value dictionary that is stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>.
            </summary>
            <remarks>
            A context item represents a key/value that needs to be logged with each message
            on the same CallContext.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems.CallContextSlotName">
            <summary>
            The name of the data slot in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> used by the application block.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems.SetContextItem(System.Object,System.Object)">
            <summary>
            Adds a key/value pair to a dictionary in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>.  
            Each context item is recorded with every log entry.
            </summary>
            <param name="key">Hashtable key.</param>
            <param name="value">Value of the context item.  Byte arrays will be base64 encoded.</param>
            <example>The following example demonstrates use of the AddContextItem method.
            <code>Logger.SetContextItem("SessionID", myComponent.SessionId);</code></example>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems.FlushContextItems">
            <summary>
            Empties the context items dictionary.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ContextItems.ProcessContextItems(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Merges each key/value pair from the context items dictionary with the ExtendedProperties
            dictionary of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>.
            </summary>
            <param name="log"><see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> object that is being logged.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter">
            <summary>
            <para>Provides exception formatting when not using the Exception Handling Application Block.</para>
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.Header">
            <summary>
            Name of the additional information entry that holds the header.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter"/> class.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.#ctor(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter"/> class with the additional information and the application name.</para>
            </summary>
            <param name="additionalInfo">
            <para>The additional information to log.</para>
            </param>
            <param name="applicationName">
            <para>The application name.</para>
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.GetMessage(System.Exception)">
            <summary>
            <para>Get the formatted message to be logged.</para>
            </summary>
            <param name="exception"><para>The exception object whose information should be written to log file.</para></param>
            <returns><para>The formatted message.</para></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExceptionFormatter.CollectAdditionalInfo">
            <devdoc>
            Add additional 'environment' information. 
            </devdoc>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider">
            <summary>
            A helper facade class that provides easy access to commonly needed COM+ diagnostic information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider.PopulateDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Populates an <see cref="T:System.Collections.Generic.IDictionary`2"/> with the COM+ properties provided by <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider"/>.
            </summary>
            <param name="dict">Dictionary used to populate the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider"></see></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider.OriginalCallerAccountName">
            <summary>
            Returns the COM+ Original Caller Account Name
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider.DirectCallerAccountName">
            <summary>
            Returns the COM+ Direct Caller Name
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider.TransactionId">
            <summary>
            Returns the COM+ Transaction ID
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider.ApplicationId">
            <summary>
            Returns the COM+ Application ID
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ComPlusInformationProvider.ActivityId">
            <summary>
            Returns the COM+ Activity ID
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider">
            <summary>
            Provides useful diagnostic information from the debug subsystem.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IDebugUtils)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider"/> class..
            </summary>
            <param name="debugUtils">Alternative <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IDebugUtils"/> to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider.PopulateDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Populates an <see cref="T:System.Collections.Generic.IDictionary`2"/> with helpful diagnostic information.
            </summary>
            <param name="dict">Dictionary used to populate the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.DebugInformationProvider"></see></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IContextUtils">
            <summary>
            Contract for accessing context information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IContextUtils.GetActivityId">
            <summary>
            Returns the ActivityId.
            </summary>
            <returns>The ActivityId</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IContextUtils.GetApplicationId">
            <summary>
            Returns the ApplicationId.
            </summary>
            <returns>The ApplicationId.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IContextUtils.GetTransactionId">
            <summary>
            Returns the TransactionId.
            </summary>
            <returns>The TransactionId.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IContextUtils.GetDirectCallerAccountName">
            <summary>
            Returns the direct caller account name.
            </summary>
            <returns>The direct caller account name.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IContextUtils.GetOriginalCallerAccountName">
            <summary>
            Returns the original caller account name.
            </summary>
            <returns>The original caller account name.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IDebugUtils">
            <summary>
            Contract for accessing debug information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.Helpers.IDebugUtils.GetStackTraceWithSourceInfo(System.Diagnostics.StackTrace)">
            <summary>
            Returns a text representation of the stack trace with source information if available.
            </summary>
            <param name="stackTrace">The source to represent textually.</param>
            <returns>The textual representation of the stack.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.IExtraInformationProvider">
            <summary>
            Defines a method to populate an <see cref="T:System.Collections.Generic.IDictionary`2"/> with helpful diagnostic information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.IExtraInformationProvider.PopulateDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Populates an <see cref="T:System.Collections.Generic.IDictionary`2"/> with helpful diagnostic information.
            </summary>
            <param name="dict">Dictionary containing extra information used to initialize the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.IExtraInformationProvider"></see> instance</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ManagedSecurityContextInformationProvider">
            <summary>
            Provides useful diagnostic information from the managed runtime.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ManagedSecurityContextInformationProvider.PopulateDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Populates an <see cref="T:System.Collections.Generic.IDictionary`2"/> with helpful diagnostic information.
            </summary>
            <param name="dict">Dictionary used to populate the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ManagedSecurityContextInformationProvider"></see></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ManagedSecurityContextInformationProvider.AuthenticationType">
            <summary>
            	Gets the AuthenticationType, calculating it if necessary. 
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ManagedSecurityContextInformationProvider.IdentityName">
            <summary>
            	Gets the IdentityName, calculating it if necessary. 
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.ManagedSecurityContextInformationProvider.IsAuthenticated">
            <summary>
            	Gets the IsAuthenticated, calculating it if necessary. 
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.UnmanagedSecurityContextInformationProvider">
            <summary>
            Gets the security context information from the unmanaged world
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.UnmanagedSecurityContextInformationProvider.PopulateDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Populates an <see cref="T:System.Collections.Generic.IDictionary`2"/> with helpful diagnostic information.
            </summary>
            <param name="dict">Dictionary used to populate the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.UnmanagedSecurityContextInformationProvider"></see></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.UnmanagedSecurityContextInformationProvider.CurrentUser">
            <summary>
            	Gets the CurrentUser, calculating it if necessary. 
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ExtraInformation.UnmanagedSecurityContextInformationProvider.ProcessAccountName">
            <summary>
            	Gets the ProcessAccountName, calculating it if necessary. 
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter">
            <summary>
            Represents a client-side log filter based on message category.  
            Either specific categories can be explicitly allowed, or specific categories can be denied.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.#ctor(System.String,System.Collections.Generic.ICollection{System.String},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.CategoryFilterMode)">
            <summary>
            Initializes a new instance with configuration data.
            </summary>
            <param name="name">Name of this category filter.</param>
            <param name="categoryFilters">Categories to be included in the filter.</param>
            <param name="categoryFilterMode"><see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilterMode"/> used to include or exclude category filters.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.Filter(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests a log entry against the category filters.
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.ShouldLog(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests a set of categories against the category filters.
            </summary>
            <param name="categories">The set of categories.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.ShouldLog(System.String)">
            <summary>
            Test a category against the category filters.
            </summary>
            <param name="category">The category.</param>
            <returns><b>true</b> if the category passes through the category filter, <b>false</b> otherwise.</returns>
            <remarks>A log entry for an allowed category may be rejected if the log entry has other denied categories
            in its categories liset.</remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilters">
            <summary>
            Gets the category names to filter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilterMode">
            <summary>
            Gets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter.CategoryFilterMode"/> to use for filtering.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter">
            <summary>
            Represents the interface for client-side message filters.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Filter(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Test to see if a message meets the criteria to be processed. 
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be distributed, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter.Name">
            <summary>
            Gets the name of the log filter
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilterErrorHandler">
            <summary>
            Contract for handling errors during evaluation of an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilterErrorHandler.FilterCheckingFailed(System.Exception,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter)">
            <summary>
            Perform any action to handle an error during checking.
            </summary>
            <param name="ex">The exception raised during filter evaluation.</param>
            <param name="logEntry">The log entry being evaluated.</param>
            <param name="filter">The fiter that raised the exception.</param>
            <returns>True if processing should continue, ignoring the failed filter, or 
            false if the filter evaluation should be considered as failed.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter">
            <summary>
            Represents a Boolean on/off filter.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter"/>.
            </summary>
            <param name="name">The name of the filter.</param>
            <param name="enabled">True if the filter allows messages, false otherwise.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter.Filter(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests to see if a message meets the criteria to be processed. 
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogEnabledFilter.Enabled">
            <summary>
            Gets or set the Boolean flag for the filter.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter">
            <summary>
            Abstract implementation of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter"/>.
            </summary>
            <param name="name">The name for the log filter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.Filter(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Test to see if a message meets the criteria to be processed. 
            </summary>
            <param name="log">Log entry to test.</param>
            <returns><b>true</b> if the message passes through the filter and should be logged, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilter.Name">
            <summary>
            Gets the name of the log filter
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper">
            <summary>
            Provides client-side log filtering based on category and priority.  Each filter
            implements the ILogFilter interface and is registered in this class.
            Category filtering is done using a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter"/> and priority filtering
            is done using a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilterErrorHandler)">
            <summary>
            Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper"/> class.  Registers each ILogFilter.
            </summary>
            <param name="filters">The instances of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter"/> to aggregate.</param>
            <param name="handler">The handler to deal with errors during filter checking.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.CheckFilters(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests the log message against the registered filters.
            </summary>
            <param name="log">Log entry message.</param>
            <returns>Return <b>true</b> if the message passes through all of the filters.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.GetFilter``1">
            <summary>
            Gets the first filter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the filter to get.</typeparam>
            <returns>The first filter of type <typeparamref name="T"/>, 
            or <see langword="null"/> if there is no such filter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.GetFilter``1(System.String)">
            <summary>
            Gets the filter of type <typeparamref name="T"/> named <paramref name="name"/>.
            </summary>
            <typeparam name="T">The type of the filter to get.</typeparam>
            <param name="name">The name of the filter to get.</param>
            <returns>The filter of type <typeparamref name="T"/> named <paramref name="name"/>, 
            or <see langword="null"/> if there is no such filter</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.LogFilterHelper.GetFilter(System.String)">
            <summary>
            Gets the filter named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the filter to get.</param>
            <returns>The filter named <paramref name="name"/>, 
            or <see langword="null"/> if there is no such filter</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter">
            <summary>
            Represents a client-side log filter based on message priority. 
            Messages with priorities between the minimum and maximum values are allowed to be processed, all other messages are dropped.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> class with a minimum priority and no maximum priority.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="minimumPriority">The minimum priority value.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter"/> class with a minimum and maximum priority.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="minimumPriority">The minimum priority value.</param>
            <param name="maximumPriority">The maximum priority value.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.Filter(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Tests a log entry to see if its priority is within the allowed limits.
            </summary>
            <param name="log">Log entry to test.</param>
            <returns>Returns true if the log entry passes through the category filter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.ShouldLog(System.Int32)">
            <summary>
            Tests a log entry to see if its priority is within the allowed limits.
            </summary>
            <param name="priority">Priority to test.</param>
            <returns>Returns true if the priority passes through the category filter.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.MinimumPriority">
            <summary>
            The minimum value for messages to be processed.  Messages with a priority
            below the minimum are dropped immediately on the client.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.PriorityFilter.MaximumPriority">
            <summary>
            The maximum value for messages to be processed. If not specified
            this property defaults to Int32.MaxInt
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter">
            <summary>
            Log formatter that will format a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> in a way suitable for wire transmission.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter.Format(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Formats a log entry as a serialized representation.
            </summary>
            <remarks>
            Will use a BinaryFormatter for doing the actual serialization.
            </remarks>
            <param name="log">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to format.</param>
            <returns>A string version of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> that can be deserialized back to a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.BinaryLogFormatter.Deserialize(System.String)">
            <summary>
            Deserializes the string representation of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> into a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> instance.
            </summary>
            <param name="serializedLogEntry">The serialized <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> representation.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1">
            <summary>
            Formats an instance for <typeparamref name="T"/> with a sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> instances.
            </summary>
            <remarks>
            <para>
            A formatter will convert a template into a sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> instances with the help
            of a set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler`1"/> instances that help parse the tokens in the template.
            </para>
            <para>
            The character '{' is used to determine the start of a token, and token handlers perform the actual parsing of 
            each token.
            </para>
            </remarks>
            <typeparam name="T">The type of object to format.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1"/> with a template and a set of
            token handlers.
            </summary>
            <param name="template">The template to use when </param>
            <param name="tokenHandlers">The handlers to use when parsing the template.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1.CreateSimpleTokenHandler(System.String)">
            <summary>
            Utility method to create a handler for tokens without parameters that parse a template into a formatter
            for a constant string.
            </summary>
            <param name="constant">The constant for the token handler's formatter</param>
            <returns>A token handler.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1.CreateSimpleTokenHandler(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter{`0})">
            <summary>
            Utility method to create a handler for tokens without parameters that parse a template into a given formatter.
            </summary>
            <param name="formatter">The formatter to be returned by the created token handler.</param>
            <returns>A token handler.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1.CreateParameterizedTokenHandler(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ParameterizedFormatterFactory{`0})">
            <summary>
            Utility method to create a handler for tokens with parameters surrounded by parenthesis.
            </summary>
            <param name="formatterFactory">The factory delegate to create a formatter based on the token parameter.</param>
            <returns>A token handler.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1.Format(`0,System.Text.StringBuilder)">
            <summary>
            Formats <paramref name="instance"/> based on the template specified for the formatter.
            </summary>
            <param name="instance">The instance to format.</param>
            <param name="output">The result of formatting the instance.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler`1">
            <summary>
            Transforms a token definition from a string template into a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/>.
            </summary>
            <remarks>
            <para>
            A token handler gets control of the template parsing process right after the token name has been consumed, 
            and consumes the rest of the token definition advancing the <paramref name="currentIndex"/> pointer to the end
            of the token.
            </para>
            <para>
            If the text following the token name cannot be parsed into the expected token, the <paramref name="currentIndex"/>
            should still be updated and <see langword="null"/> should be returned.
            </para>
            </remarks>
            <typeparam name="T">The type to format.</typeparam>
            <param name="template">The template being parsed.</param>
            <param name="currentIndex">The current index in the template.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> representing the token, or <see langword="null"/> if the parsing of the token
            was not successful.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1">
            <summary>
            Returns a string representation of <paramref name="instance"/>
            </summary>
            <typeparam name="T">The type to format.</typeparam>
            <param name="instance">The instance to format.</param>
            <returns>A string representing <paramref name="instance"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ParameterizedFormatterFactory`1">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> based on a <paramref name="parameter"/>.
            </summary>
            <remarks>
            This delegate is used by <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1.CreateParameterizedTokenHandler(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ParameterizedFormatterFactory{`0})"/>.
            </remarks>
            <typeparam name="T">The type to format.</typeparam>
            <param name="parameter">The parameter to use when creating a formatter, extracted from the token on a template.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> based on the parameter.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter">
            <summary>
            Represents the interface for formatting log entry messsages.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter.Format(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Formats a log entry and return a string to be outputted.
            </summary>
            <param name="log">Log entry to format.</param>
            <returns>String representing the log entry.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonFormatting">
            <summary>
            Specifies formatting options.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonFormatting.None">
            <summary>
            Specifies that no special formatting should be applied. This is the default.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonFormatting.Indented">
            <summary>
            Specifies that child objects should be indented.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter">
            <summary>
            Represents a log formatter that will format a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> in JSON-compliant format.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter.Deserialize``1(System.String)">
            <summary>
            Deserializes the string representation of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> into a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> instance.
            </summary>
            <param name="serializedLogEntry">The serialized <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> representation.</param>
            <typeparam name="T">The LogEntry that should be deserialized.</typeparam>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter" /> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter" /> class.
            </summary>
            <param name="attributes">Attributes to assign to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonFormatting)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter" /> class with the specified formatting options.
            </summary>
            <param name="formatting">The formatting options.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter.Formatting">
            <summary>
            Gets or sets the formatting of the written event.
            </summary>
            <value>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonFormatting"/> value.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.JsonLogFormatter.Format(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Formats a log entry and returns a string to be output.
            </summary>
            <param name="log">The log entry to format.</param>
            <returns>
            A string that represents the log entry.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter">
            <summary>
            Abstract implememtation of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.LogFormatter.Format(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Formats a log entry and return a string to be outputted.
            </summary>
            <param name="log">Log entry to format.</param>
            <returns>A string representing the log entry.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter">
            <summary>
            Represents a template based formatter for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> messages.
            </summary>
            <remarks>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/> uses a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1"/> initialized with a set of
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler`1"/> that can manage the default template tokens. Subclasses can supply extra
            token handlers that will be added to the default set for additional template processing.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.GenericTextFormatter`1"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler`1"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.#cctor">
            <summary>
            Sets up the default token handlers for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"/>;
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"></see> with a default template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"> with a template and no extra token handlers.</see>
            </summary>
            <param name="template">Template to be used when formatting.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry}})">
            <summary>
            Initializes a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter"> with a template and additional token handlers.</see>
            </summary>
            <param name="template">Template to be used when formatting.</param>
            <param name="extraTokenHandlers">The additional token handlers to use when processing the template.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.TimestampFormatterFactory(System.String)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> for the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.TimeStamp"/> property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.FormatFixedIsoDate(System.DateTime)">
             <summary>
             Generates ISO format yyyy-MM-dd
             </summary>
             <param name="date">The date time to format.</param>
            <returns>A formatted date in the format yyyy-MM-dd</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.FormatFixedUSDate(System.DateTime)">
            <summary>
             Formats a date time with a fixed US date format in a performant way.
            </summary>
             <param name="date">The date time to format.</param>
            <returns>A formatted date in the format MM/dd/yyyy</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.FormatFixedTime(System.DateTime)">
            <summary>
            Formats a date time with a fixed time format in a performant way.
            </summary>
            <param name="date">The date time to format.</param>
            <returns>A formatted time in the format HH:mm:ss.fff</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.ReflectedPropertyFormatterFactory(System.String)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> for any property on a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>
            retrieved through reflection.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.KeyValueFormatterFactory(System.String)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> for an entry in the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ExtendedProperties"/>
            dictionary.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.DictionaryTokenHandlerFactory(System.String)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/> for all the entries in the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ExtendedProperties"/>
            dictionary.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.Template">
            <summary>
            Gets or sets the formatting template.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.Format(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <overloads>
            Formats the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> object by replacing tokens with values
            </overloads>
            <summary>
            Formats the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> object by replacing tokens with values.
            </summary>
            <param name="log">Log entry to format.</param>
            <returns>Formatted string with tokens replaced with property values.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.FormatCategoriesCollection(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Provides a textual representation of a categories list.
            </summary>
            <param name="categories">The collection of categories.</param>
            <returns>A comma delimited textural representation of the categories.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.DefaultTextFormat">
            <summary>
            Gets the default format to use when formatting.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction">
            <summary>
            Abstract base for all <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction"></see>-derived classes. 
            Provides default algorithm for formatting a token.
            </summary>
            <remarks>
            Extending this class is not the recommended approach for handling tokens.
            </remarks>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry}})"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenHandler`1"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.Formatter`1"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction.#ctor(System.String)">
            <summary>
            Initializes an instance of a TokenFunction with a start delimiter and the default end delimiter.
            </summary>
            <param name="tokenStartDelimiter">Start delimiter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of a TokenFunction with a start and end delimiter.
            </summary>
            <param name="tokenStartDelimiter">Start delimiter.</param>
            <param name="tokenEndDelimiter">End delimiter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction.Format(System.Text.StringBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Searches for token functions in the message and replace all with formatted values.
            </summary>
            <param name="messageBuilder">Message template containing tokens.</param>
            <param name="log">Log entry containing properties to format.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction.FormatToken(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Abstract method to process the token value between the start and end delimiter.
            </summary>
            <param name="tokenTemplate">Token value between the start and end delimiters.</param>
            <param name="log">Log entry to process.</param>
            <returns>Formatted value to replace the token.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TokenFunction.GetInnerTemplate(System.Int32,System.String)">
            <summary>
            Returns the template in between the paratheses for a token function.
            Expecting tokens in this format: {keyvalue(myKey1)}.
            </summary>
            <param name="startPos">Start index to search for the next token function.</param>
            <param name="message">Message template containing tokens.</param>
            <returns>Inner template of the function.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.XmlLogFormatter">
            <summary>
            Formats a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> and any subclass of it to an XML string representation.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.XmlLogFormatter.Format(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Formats the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> into an XML String representation.
            </summary>
            <param name="log">A LogEntry or any sub class of it</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator">
            <summary>
            Coordinates logging operations with updates to the logging stack.
            </summary>
            <remarks>
            Use and modification of logging objects must be performed through the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator.RegisterLoggingUpdateHandler(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler)">
            <summary>
             Registers a logging update handler for responding to updated events.
            </summary>
            <param name="loggingUpdateHandler"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator.UnregisterLoggingUpdateHandler(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler)">
            <summary>
             Unregisters a logging update handler for responding to updated events.
            </summary>
            <param name="loggingUpdateHandler"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator.ExecuteReadOperation(System.Action)">
            <summary>
            Executes the supplied <see cref="T:System.Action"/> when no updates are being performed.
            </summary>
            <remarks>No updates to the logging objects should be performed by the supplied action.</remarks>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator.ExecuteWriteOperation(System.Action)">
            <summary>
            Executes the supplied <see cref="T:System.Action"/> in isolation.
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler">
            <summary>
            Contract for objects registered for notifications from a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler.PrepareForUpdate(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Prepares to update it's internal state, but does not commit this until <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler.CommitUpdate(System.Object)"/>
            </summary>
            <returns>
            A new version of the internal state.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler.CommitUpdate(System.Object)">
            <summary>
            Commits the update of internal state.
            </summary>
            <param name="context">
            The new internal state, as returned by the <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler.PrepareForUpdate(Microsoft.Practices.ServiceLocation.IServiceLocator)"/> method.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.DefaultLoggingEventLogger">
            <summary>
            The instrumentation gateway when no instances of the objects from the block are involved.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.DefaultLoggingEventLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.DefaultLoggingEventLogger"/> class, specifying whether 
            logging to the event log is allowed.
            </summary>
            <param name="eventLoggingEnabled"><code>true</code> if writing to the event log is allowed, <code>false</code> otherwise.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.DefaultLoggingEventLogger.LogConfigurationError(System.Exception)">
            <summary>
            Logs the occurrence of a configuration error for the Enterprise Library Logging Application Block through the 
            available instrumentation mechanisms.
            </summary>
            <param name="exception">The exception raised for the configuration error.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireLockAcquisitionError(System.String)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireConfigurationFailureEvent(System.Exception)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireFailureLoggingErrorEvent(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireLogEventRaised">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireTraceListenerEntryWrittenEvent">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider.FireReconfigurationErrorEvent(System.Exception)">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider.FireTraceOperationEnded(System.String,System.Int64)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider.FireTraceOperationStarted(System.String)">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider">
            <summary>
            Defines the logical events that can be instrumented for the Logging Application Block.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider"/> class.
            </summary>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="applicationInstanceName">The application instance name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The instance name.</param>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="applicationInstanceName">The application instance name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.FireTraceListenerEntryWrittenEvent">
            <summary>
            Fires the <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.traceListenerEntryWritten"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.FireReconfigurationErrorEvent(System.Exception)">
            <summary>
            
            </summary>
             <param name="exception">The exception that describes the reconfiguration error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.FireFailureLoggingErrorEvent(System.String,System.Exception)">
            <summary>
            </summary>
            <param name="message">A message describing the failure.</param>
            <param name="exception">The exception that caused the failure..</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.FireConfigurationFailureEvent(System.Exception)">
            <summary>
            </summary>
            <param name="configurationException">The exception that describes the configuration error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.FireLogEventRaised">
            <summary>
            Fires the <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.logEventRaised"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.FireLockAcquisitionError(System.String)">
            <summary/>
            <param name="message"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.LoggingInstrumentationProvider.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument the logging events to the instance names.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireLockAcquisitionError(System.String)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireConfigurationFailureEvent(System.Exception)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireFailureLoggingErrorEvent(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireLogEventRaised">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireTraceListenerEntryWrittenEvent">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullLoggingInstrumentationProvider.FireReconfigurationErrorEvent(System.Exception)">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullTracerInstrumentationProvider">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullTracerInstrumentationProvider.FireTraceOperationEnded(System.String,System.Int64)">
            <summary/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.NullTracerInstrumentationProvider.FireTraceOperationStarted(System.String)">
            <summary/>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider">
            <summary>
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider.TotalTraceOperationsStartedCounterName">
            <summary>
            Made public for test
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider.counterCategoryName">
            <summary>
            Made public for test
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider"/> class.
            </summary>
            <param name="performanceCountersEnabled"></param>
            <param name="eventLoggingEnabled"></param>
            <param name="applicationName"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider.FireTraceOperationStarted(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider.FireTraceOperationEnded(System.String,System.Int64)">
            <summary>
            </summary>
            <param name="operationName"></param>
            <param name="elapsedTimeInMilleseconds"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerInstrumentationProvider.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> operations associated to the instance names.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerPerformanceCounter">
            <summary>
            Manages the performance counters for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> operations.
            </summary>
            <remarks>
            This class allows the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class to interact with performace counter instances not know on forehand.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerPerformanceCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerPerformanceCounter"/> class.
            </summary>
            <param name="counterCategoryName">The counter category name.</param>
            <param name="counterName">The counter name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.TracerPerformanceCounter.IncrementBy(System.String,System.Int64)">
            <summary>
            Increments or decrements the value of the associated performance counter by a specified amount.
            </summary>
            <param name="instanceName">The instance to be incremented.</param>
            <param name="value">The value to increment by. A negative value decrements the counter.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry">
            <summary>
            Represents a log message.  Contains the common properties that are required for all log messages.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.#ctor(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> with a full set of constructor parameters
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to record.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.#ctor(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> with a full set of constructor parameters
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Collection of category names used to route the log entry to a one or more sinks.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to record.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Message">
            <summary>
            Message body to log.  Value from ToString() method from message object.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Categories">
            <summary>
            Category name used to route the log entry to a one or more trace listeners.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Priority">
            <summary>
            Importance of the log message.  Only messages whose priority is between the minimum and maximum priorities (inclusive)
            will be processed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.EventId">
            <summary>
            Event number or identifier.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity">
            <summary>
            Log entry severity as a <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.LoggedSeverity">
            <summary>
            <para>Gets the string representation of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration.</para>
            </summary>
            <value>
            <para>The string value of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Severity"/> enumeration.</para>
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Title">
            <summary>
            Additional description of the log entry message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.TimeStamp">
            <summary>
            Date and time of the log entry message.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.MachineName">
            <summary>
            Name of the computer.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.AppDomainName">
            <summary>
            The <see cref="T:System.AppDomain"/> in which the program is running
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ProcessId">
            <summary>
            The Win32 process ID for the current running process.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ProcessName">
            <summary>
            The name of the current running process.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ManagedThreadName">
            <summary>
            The name of the .NET thread.
            </summary>
             <seealso cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Win32ThreadId"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Win32ThreadId">
            <summary>
            The Win32 Thread ID for the current thread.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ExtendedProperties">
            <summary>
            Dictionary of key/value pairs to record.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.TimeStampString">
            <summary>
            Read-only property that returns the timeStamp formatted using the current culture.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ActivityId">
            <summary>
            Tracing activity id
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.RelatedActivityId">
            <summary>
            Related activity id
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Clone">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> that is a copy of the current instance.
            </summary>
            <remarks>
            If the dictionary contained in <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ExtendedProperties"/> implements <see cref="T:System.ICloneable"/>, the resulting
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> will have its ExtendedProperties set by calling <c>Clone()</c>. Otherwise the resulting
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> will have its ExtendedProperties set to <see langword="null"/>.
            </remarks>
            <implements>ICloneable.Clone</implements>
            <returns>A new <c>LogEntry</c> that is a copy of the current instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.AddErrorMessage(System.String)">
            <summary>
            Add an error or warning message to the start of the messages string builder.
            </summary>
            <param name="message">Message to be added to this instance</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ErrorMessages">
            <summary>
            Gets the error message with the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"></see>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>, 
            using a default formatting template.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.CollectIntrinsicProperties">
            <summary>
            Set the intrinsic properties such as MachineName and UserIdentity.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.GetProcessName">
            <summary>
            Gets the current process name.
            </summary>
            <returns>The process name.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.ActivityIdString">
            <summary>
            Tracing activity id as a string to support WMI Queries
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.CategoriesStrings">
            <summary>
            Category names used to route the log entry to a one or more trace listeners.
            This readonly property is available to support WMI queries
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger">
            <summary>
            Facade for writing a log entry to one or more <see cref="T:System.Diagnostics.TraceListener"/>s.  This class is sealed.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.SetContextItem(System.Object,System.Object)">
            <summary>
            Add a key/value pair to the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> dictionary.  
            Context items will be recorded with every log entry.
            </summary>
            <param name="key">Hashtable key</param>
            <param name="value">Value.  Objects will be serialized.</param>
            <example>The following example demonstrates use of the AddContextItem method.
            <code>Logger.SetContextItem("SessionID", myComponent.SessionId);</code></example>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.FlushContextItems">
            <summary>
            Empty the context items dictionary.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object)">
            <overloads>
            Write a new log entry to the default category.
            </overloads>
            <summary>
            Write a new log entry to the default category.
            </summary>
            <example>The following example demonstrates use of the Write method with
            one required parameter, message.
            <code>Logger.Write("My message body");</code></example>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String)">
            <summary>
            Write a new log entry to a specific category.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String,System.Int32)">
            <summary>
            Write a new log entry with a specific category and priority.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            Write a new log entry with a specific category, priority and event id.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType)">
            <summary>
            Write a new log entry with a specific category, priority, event id and severity.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a new log entry with a specific category, priority, event id, severity
            and title.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry and a dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to a specific category with a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to with a specific category, priority and a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry with a specific category, priority, event Id, severity
            title and dictionary of extended properties.
            </summary>
            <example>The following example demonstrates use of the Write method with
            a full set of parameters.
            <code></code></example>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Write a new log entry to a specific collection of categories.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32)">
            <summary>
            Write a new log entry with a specific collection of categories and priority.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32)">
            <summary>
            Write a new log entry with a specific collection of categories, priority and event id.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType)">
            <summary>
            Write a new log entry with a specific collection of categories, priority, event id and severity.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a new log entry with a specific collection of categories, priority, event id, severity
            and title.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to a specific collection of categories with a dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to with a specific collection of categories, priority and a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry with a specific category, priority, event Id, severity
            title and dictionary of extended properties.
            </summary>
            <example>The following example demonstrates use of the Write method with
            a full set of parameters.
            <code></code></example>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Write(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Write a new log entry as defined in the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> parameter.
            </summary>
            <example>The following examples demonstrates use of the Write method using
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> type.
            <code>
            LogEntry log = new LogEntry();
            log.Category = "MyCategory1";
            log.Message = "My message body";
            log.Severity = TraceEventType.Error;
            log.Priority = 100;
            Logger.Write(log);</code></example>
            <param name="log">Log entry object to write.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.GetFilter``1">
            <summary>
            Returns the filter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of filter requiered.</typeparam>
            <returns>The instance of <typeparamref name="T"/> in the filters collection, or <see langword="null"/> 
            if there is no such instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.GetFilter``1(System.String)">
            <summary>
            Returns the filter of type <typeparamref name="T"/> named <paramref name="name"/>.
            </summary>
            <typeparam name="T">The type of filter required.</typeparam>
            <param name="name">The name of the filter required.</param>
            <returns>The instance of <typeparamref name="T"/> named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.GetFilter(System.String)">
            <summary>
            Returns the filter named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the filter required.</param>
            <returns>The filter named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such filter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.IsLoggingEnabled">
            <summary>
            Query whether logging is enabled.
            </summary>
            <returns><code>true</code> if logging is enabled.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.ShouldLog(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Query whether a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> shold be logged.
            </summary>
            <param name="log">The log entry to check</param>
            <returns>Returns <code>true</code> if the entry should be logged.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Reset">
            <summary>
            Public for testing purposes.
            Reset the writer used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger"/> facade.
            </summary>
            <remarks>
            Threads that already acquired the reference to the old writer will fail when it gets disposed.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger.Writer">
            <summary>
            Gets the instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> used by the facade.
            </summary>
            <remarks>
            The lifetime of this instance is managed by the facade.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingException">
            <summary>
            Logging Application Block exception.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingException.#ctor">
            <summary>
            Initializes a new instance of the LoggingException class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LoggingException class 
            with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the LoggingException class with a 
            specified error message and a reference to the inner exception that is 
            the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for 
            the exception.
            </param>
            <param name="exception">The exception that is the cause of the current 
            exception.  If the innerException parameter is not a <see langword="null"/> reference, 
            the current exception is raised in a catch block that handles the inner 
            exception.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the LoggingException class with 
            serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or 
            destination.
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator">
            <summary>
            Coordinates logging operations with updates to the logging stack.
            </summary>
            <remarks>
            Implements the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator"/> interface using a <see cref="T:System.Threading.ReaderWriterLock"/>.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator"/> class with 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/>.
            </summary>
            <remarks>
            The LoggingUpdateCoordinator attaches itself to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/> events.
            </remarks>
            <param name="eventSource">The source for configuration change events.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator"/> class with 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/>.
            </summary>
            <remarks>
            The LoggingUpdateCoordinator attaches itself to the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/> events.
            </remarks>
            <param name="eventSource">The source for configuration change events.</param>
            <param name="instrumentationProvider">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider"/> to use for exception and instrumentation event notification.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.RegisterLoggingUpdateHandler(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler)">
            <summary>
             Registers a logging update handler for responding to updated events.
            </summary>
            <param name="loggingUpdateHandler">The handler to register.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.UnregisterLoggingUpdateHandler(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler)">
            <summary>
             Unregisters a logging update handler for responding to updated events.
            </summary>
            <param name="loggingUpdateHandler">The handler to unregister.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.ExecuteReadOperation(System.Action)">
            <summary>
            Executes the supplied <see cref="T:System.Action"/> when no updates are being performed.
            </summary>
            <remarks>No updates to the logging objects should be performed by the supplied action.</remarks>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.ExecuteWriteOperation(System.Action)">
            <summary>
            Executes the supplied <see cref="T:System.Action"/> in isolation.
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LoggingUpdateCoordinator.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource">
            <summary>
            Provides tracing services through a set of <see cref="T:System.Diagnostics.TraceListener"/>s.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.DefaultAutoFlushProperty">
            <summary>
            Default Auto Flush property for the LogSource instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name.
            </summary>
            <param name="name">The name for the instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name and a level.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="level">The <see cref="T:System.Diagnostics.SourceLevels"/> value.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Diagnostics.TraceListener},System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name, a collection of <see cref="T:System.Diagnostics.TraceListener"/>s and a level.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListeners">The collection of <see cref="T:System.Diagnostics.TraceListener"/>s.</param>
            <param name="level">The <see cref="T:System.Diagnostics.SourceLevels"/> value.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Diagnostics.TraceListener},System.Diagnostics.SourceLevels,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name, a collection of <see cref="T:System.Diagnostics.TraceListener"/>s, a level and the auto flush.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListeners">The collection of <see cref="T:System.Diagnostics.TraceListener"/>s.</param>
            <param name="level">The <see cref="T:System.Diagnostics.SourceLevels"/> value.</param>
            <param name="autoFlush">If Flush should be called on the Listeners after every write.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Diagnostics.TraceListener},System.Diagnostics.SourceLevels,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> class with a name, a collection of <see cref="T:System.Diagnostics.TraceListener"/>s, a level and the auto flush.
            </summary>
            <param name="name">The name for the instance.</param>
            <param name="traceListeners">The collection of <see cref="T:System.Diagnostics.TraceListener"/>s.</param>
            <param name="level">The <see cref="T:System.Diagnostics.SourceLevels"/> value.</param>
            <param name="autoFlush">If Flush should be called on the Listeners after every write.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Name">
            <summary>
            Gets the name for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Listeners">
            <summary>
            Gets the collection of trace listeners for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Level">
            <summary>
            Gets the <see cref="T:System.Diagnostics.SourceLevels"/> values at which to trace for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.AutoFlush">
            <summary>
            Gets or sets the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.AutoFlush"/> values for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Writes trace data to the trace listeners in the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Listeners"/> collection using the specified 
            event type, event identifier, and trace data. 
            </summary>
            <param name="eventType">The value that specifies the type of event that caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="logEntry">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter)">
            <summary>
            Writes trace data to the trace listeners in the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Listeners"/> collection that have not already been
            written to for tracing using the specified event type, event identifier, and trace data.
            </summary>
            <remarks>
            The <paramref name="traceListenerFilter"/> will be updated to reflect the trace listeners that were written to by the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>.
            </remarks>
            <param name="eventType">The value that specifies the type of event that caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="logEntry">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to trace.</param>
            <param name="traceListenerFilter">The filter for already written to trace listeners.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter">
            <summary>
            Instance based class to write log messages based on a given configuration.
            Messages are routed based on category.
            </summary>
            <remarks>
            <para>
            To write log messages to the default configuration, use the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger"/> facade.  
            Only create an instance of a LogWriter if you need to write log messages using a custom configuration.
            </para>
            <para>
            The LogWriter works as an entry point to the <see cref="N:System.Diagnostics"/> trace listeners. 
            It will trace the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> through the <see cref="N:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners"/>s associated with the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s 
            for all the matching categories in the elements of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Categories"/> property of the log entry. 
            If the "all events" special log source is configured, the log entry will be traced through the log source regardles of other categories 
            that might have matched.
            If the "all events" special log source is not configured and the "unprocessed categories" special log source is configured,
            and the category specified in the logEntry being logged is not defined, then the logEntry will be logged to the "unprocessed categories"
            special log source.
            If both the "all events" and "unprocessed categories" special log sources are not configured and the property LogWarningsWhenNoCategoriesMatch
            is set to true, then the logEntry is logged to the "logging errors and warnings" special log source.
            </para>
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.LogWriterFailureEventID">
            <summary>
            EventID used on LogEntries that occur when internal LogWriter mechanisms fail.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.TraceSources">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> mappings available for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
            <param name="disposing"><see langword="true"/> when disposing, <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.FlushContextItems">
            <summary>
            Empties the context items dictionary.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetFilter``1">
            <summary>
            Returns the filter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of filter requiered.</typeparam>
            <returns>The instance of <typeparamref name="T"/> in the filters collection, or <see langword="null"/> 
            if there is no such instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetFilter``1(System.String)">
            <summary>
            Returns the filter of type <typeparamref name="T"/> named <paramref name="name"/>.
            </summary>
            <typeparam name="T">The type of filter required.</typeparam>
            <param name="name">The name of the filter required.</param>
            <returns>The instance of <typeparamref name="T"/> named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetFilter(System.String)">
            <summary>
            Returns the filter named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the filter required.</param>
            <returns>The filter named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such filter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.GetMatchingTraceSources(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Gets a list of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects for the log entry.
            </summary>
            <param name="logEntry">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to get the matching trace sources.</param>
            <returns>A collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.IsLoggingEnabled">
            <summary>
            Queries whether logging is enabled.
            </summary>
            <returns><b>true</b> if logging is enabled.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.IsTracingEnabled">
            <summary>
            Queries whether tracing is enabled.
            </summary>
            <returns><b>true</b> if tracing is enabled.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.ResetLockTimeouts">
            <summary>
            Reset lock timeouts to thier original values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.SetContextItem(System.Object,System.Object)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> dictionary.  
            Context items will be recorded with every log entry.
            </summary>
            <param name="key">Hashtable key</param>
            <param name="value">Value.  Objects will be serialized.</param>
            <example>The following example demonstrates use of the AddContextItem method.
            <code>Logger.SetContextItem("SessionID", myComponent.SessionId);</code></example>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.ShouldLog(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Queries whether a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> shold be logged.
            </summary>
            <param name="log">The log entry to check.</param>
            <returns><b>true</b> if the entry should be logged.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object)">
            <overloads>
            Write a new log entry to the default category.
            </overloads>
            <summary>
            Write a new log entry to the default category.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String)">
            <summary>
            Write a new log entry to a specific category.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32)">
            <summary>
            Write a new log entry with a specific category and priority.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            Write a new log entry with a specific category, priority and event id.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType)">
            <summary>
            Write a new log entry with a specific category, priority, event id and severity.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a new log entry with a specific category, priority, event id, severity
            and title.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry and a dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to a specific category with a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to with a specific category, priority and a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry with a specific category, priority, event Id, severity
            title and dictionary of extended properties.
            </summary>
            <example>The following example demonstrates use of the Write method with
            a full set of parameters.
            <code></code></example>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="category">Category name used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Write a new log entry to a specific collection of categories.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Write a new log entry with a specific collection of categories and priority.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            Write a new log entry with a specific collection of categories, priority and event id.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType)">
            <summary>
            Write a new log entry with a specific collection of categories, priority, event id and severity.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. 
            (Unspecified, Information, Warning or Error).</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Write a new log entry with a specific collection of categories, priority, event id, severity
            and title.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to a specific collection of categories with a dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry to with a specific collection of categories, priority and a dictionary 
            of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(System.Object,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Write a new log entry with a specific category, priority, event Id, severity
            title and dictionary of extended properties.
            </summary>
            <param name="message">Message body to log.  Value from ToString() method from message object.</param>
            <param name="categories">Category names used to route the log entry to a one or more trace listeners.</param>
            <param name="priority">Only messages must be above the minimum priority are processed.</param>
            <param name="eventId">Event number or identifier.</param>
            <param name="severity">Log message severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration. (Unspecified, Information, Warning or Error).</param>
            <param name="title">Additional description of the log entry message.</param>
            <param name="properties">Dictionary of key/value pairs to log.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter.Write(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Writes a new log entry as defined in the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> parameter.
            </summary>
            <param name="log">Log entry object to write.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterFactory">
            <summary>
            Factory to create <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> class with the default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterFactory.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> class with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance.
            </summary>
            <param name="configurationSource">The source for configuration information.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterFactory"/> that resolves objects
            using the supplied <paramref name="container"/>.
            </summary>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to use to resolve objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterFactory.Create">
            <summary>
            Creates a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> based on the configuration in the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> 
            instance of the factory.
            </summary>
            <returns>The created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl">
            <summary>
            Instance based class to write log messages based on a given configuration.
            Messages are routed based on category.
            </summary>
            <remarks>
            <para>
            To write log messages to the default configuration, use the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger"/> facade.  
            Only create an instance of a LogWriterImpl if you need to write log messages using a custom configuration.
            </para>
            <para>
            The LogWriterImpl works as an entry point to the <see cref="N:System.Diagnostics"/> trace listeners. 
            It will trace the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> through the <see cref="N:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners"/>s associated with the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s 
            for all the matching categories in the elements of the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry.Categories"/> property of the log entry. 
            If the "all events" special log source is configured, the log entry will be traced through the log source regardles of other categories 
            that might have matched.
            If the "all events" special log source is not configured and the "unprocessed categories" special log source is configured,
            and the category specified in the logEntry being logged is not defined, then the logEntry will be logged to the "unprocessed categories"
            special log source.
            If both the "all events" and "unprocessed categories" special log sources are not configured and the property LogWarningsWhenNoCategoriesMatch
            is set to true, then the logEntry is logged to the "logging errors and warnings" special log source.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ILoggingInstrumentationProvider,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/> class.
            </summary>
            <param name="structureHolder">The initial implementation of the logging stack</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
            <param name="updateCoordinator">The coordinator for logging operations.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#ILoggingUpdateHandler#PrepareForUpdate(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
             Prepares to update it's internal state, but does not commit this until <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler.CommitUpdate(System.Object)"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.Telerik#Microsoft#Practices#EnterpriseLibrary#Logging#ILoggingUpdateHandler#CommitUpdate(System.Object)">
            <summary>
             Commits the update of internal state.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.TraceSources">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> mappings available for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/>.
            </summary>
            <param name="disposing"><see langword="true"/> when disposing, <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.DoGetMatchingTraceSources(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Returns the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s that matches the collection of categories provided.
            </summary>
            <param name="logEntry">The log entry.</param>
            <returns>The matching <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.FilterCheckingFailed(System.Exception,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Performs any action to handle an error during checking.
            </summary>
            <param name="ex">The exception raised during filter evaluation.</param>
            <param name="logEntry">The log entry being evaluated.</param>
            <param name="filter">The fiter that raised the exception.</param>
            <returns>True signaling processing should continue.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetFilter``1">
            <summary>
            Returns the filter of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of filter requiered.</typeparam>
            <returns>The instance of <typeparamref name="T"/> in the filters collection, or <see langword="null"/> 
            if there is no such instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetFilter``1(System.String)">
            <summary>
            Returns the filter of type <typeparamref name="T"/> named <paramref name="name"/>.
            </summary>
            <typeparam name="T">The type of filter required.</typeparam>
            <param name="name">The name of the filter required.</param>
            <returns>The instance of <typeparamref name="T"/> named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetFilter(System.String)">
            <summary>
            Returns the filter named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the filter required.</param>
            <returns>The filter named <paramref name="name"/> in 
            the filters collection, or <see langword="null"/> if there is no such filter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.GetMatchingTraceSources(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Gets a list of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects for the log entry.
            </summary>
            <param name="logEntry">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> to get the matching trace sources.</param>
            <returns>A collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.IsLoggingEnabled">
            <summary>
            Queries whether logging is enabled.
            </summary>
            <returns><b>true</b> if logging is enabled.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.IsTracingEnabled">
            <summary>
            Queries whether tracing is enabled.
            </summary>
            <returns><b>true</b> if tracing is enabled.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.RevertExistingImpersonation">
            <devdoc>
            Checks to determine whether impersonation is in place, and if it is then it reverts it returning
            the impersonation context that must be used to undo the revert.
            </devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.ShouldLog(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Queries whether a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> shold be logged.
            </summary>
            <param name="log">The log entry to check.</param>
            <returns><b>true</b> if the entry should be logged.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterImpl.Write(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Writes a new log entry as defined in the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> parameter.
            </summary>
            <param name="log">Log entry object to write.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder">
            <summary>
            This type supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Holds the collaborators of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> to allow for an easy replacement should configuration change.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Filters.ILogFilter},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource},Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This constructor supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder"/> class.
            </summary>
            <param name="filters">The collection of filters to use when processing an entry.</param>
            <param name="traceSourceNames">Names of the trace sources to dispatch entries to.</param>
            <param name="traceSources">The trace sources to dispatch entries to.</param>
            <param name="allEventsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which all log entries should be logged.</param>
            <param name="notProcessedTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which log entries with at least one non-matching category should be logged.</param>
            <param name="errorsTraceSource">The special <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/> to which internal errors must be logged.</param>
            <param name="defaultCategory">The default category to set when entry categories list of a log entry is empty.</param>
            <param name="tracingEnabled">The tracing status.</param>
            <param name="logWarningsWhenNoCategoriesMatch">true if warnings should be logged when a non-matching category is found.</param>
            <param name="revertImpersonation">true if impersonation should be reverted while logging.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.Filters">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.TraceSources">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.AllEventsTraceSource">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.NotProcessedTraceSource">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.ErrorsTraceSource">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.DefaultCategory">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.TracingEnabled">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.LogWarningsWhenNoCategoriesMatch">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.RevertImpersonation">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder.Dispose">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Releases the resources used by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriterStructureHolder"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.NativeMethods">
            <summary>
            Platform Invocation methods used to support Tracer.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.NativeMethods.GetCurrentProcessId">
            <summary>
            Made public for testing purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.NativeMethods.GetModuleFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            Made public for testing purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.NativeMethods.GetModuleHandle(System.String)">
            <summary>
            Made public for testing purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.NativeMethods.GetCurrentThreadId">
            <summary>
            Made public for testing purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.NativeMethods.ExtendedNameFormat.NameDnsDomain">
            <summary>
            DNS domain name + SAM username 
            eg: engineering.widget.com\JohnDoe
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter">
            <summary>
            A formatter object that allows for replacement of tokens in
            a log handler category string.
            </summary>
            <remarks>This class supports the following replacements:
            <list>
            <item><term>{method}</term><description>Target method name.</description></item>
            <item><term>{type}</term><description>Target method's implementing type.</description></item>
            <item><term>{namespace}</term><description>Namespace containing target's type.</description></item>
            <item><term>{assembly}</term><description>Assembly containing target's type.</description></item>
            </list></remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter.#ctor(System.Reflection.MethodBase)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter"/> using information from the
            given method.
            </summary>
            <param name="method">Method used to generate the category replacements.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter.FormatCategory(System.String)">
            <summary>
            Perform the formatting operation, replaceing tokens in the template.
            </summary>
            <param name="template">Template string to do token replacement in.</param>
            <returns>The template, with tokens replaced.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> that will log information using the
            Logging Application Block before and/or after the
            call to the target completes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> with default settings that writes
            to the default log writer.
            </summary>
            <remarks>See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults"/> class for the default values.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> with default settings that writes
            to the given <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/>.
            </summary>
            <remarks>See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults"/> class for the default values.</remarks>
            <param name="logWriter"><see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/> to write logs to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> that writes to the specified <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/>
            using the given logging settings.
            </summary>
            <param name="logWriter"><see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/> to write log entries to.</param>
            <param name="eventId">EventId to include in log entries.</param>
            <param name="logBeforeCall">Should the handler log information before calling the target?</param>
            <param name="logAfterCall">Should the handler log information after calling the target?</param>
            <param name="beforeMessage">Message to include in a before-call log entry.</param>
            <param name="afterMessage">Message to include in an after-call log entry.</param>
            <param name="includeParameters">Should the parameter values be included in the log entry?</param>
            <param name="includeCallStack">Should the current call stack be included in the log entry?</param>
            <param name="includeCallTime">Should the time to execute the target be included in the log entry?</param>
            <param name="priority">Priority of the log entry.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> that writes to the specified <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/>
            using the given logging settings.
            </summary>
            <param name="logWriter"><see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter"/> to write log entries to.</param>
            <param name="eventId">EventId to include in log entries.</param>
            <param name="logBeforeCall">Should the handler log information before calling the target?</param>
            <param name="logAfterCall">Should the handler log information after calling the target?</param>
            <param name="beforeMessage">Message to include in a before-call log entry.</param>
            <param name="afterMessage">Message to include in an after-call log entry.</param>
            <param name="includeParameters">Should the parameter values be included in the log entry?</param>
            <param name="includeCallStack">Should the current call stack be included in the log entry?</param>
            <param name="includeCallTime">Should the time to execute the target be included in the log entry?</param>
            <param name="priority">Priority of the log entry.</param>
            <param name="order">Order in which the handler will be executed.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.EventId">
            <summary>
            Event ID to include in log entry
            </summary>
            <value>event id</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogBeforeCall">
            <summary>
            Should there be a log entry before calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogAfterCall">
            <summary>
            Should there be a log entry after calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.BeforeMessage">
            <summary>
            Message to include in a pre-call log entry.
            </summary>
            <value>The message</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.AfterMessage">
            <summary>
            Message to include in a post-call log entry.
            </summary>
            <value>the message.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Categories">
            <summary>
            Gets the collection of categories to place the log entries into.
            </summary>
            <remarks>The category strings can include replacement tokens. See
            the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter"/> class for the list of tokens.</remarks>
            <value>The list of category strings.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.IncludeParameters">
            <summary>
            Should the log entry include the parameters to the call?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.IncludeCallStack">
            <summary>
            Should the log entry include the call stack?
            </summary>
            <remarks>Logging the call stack requires full trust code access security permissions.</remarks>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.IncludeCallTime">
            <summary>
            Should the log entry include the time to execute the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Priority">
            <summary>
            Priority for the log entry.
            </summary>
            <value>priority</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Severity">
            <summary>
            Severity to log at.
            </summary>
            <value><see cref="T:System.Diagnostics.TraceEventType"/> giving the severity.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.LogWriter">
            <summary>
            Log writer to log to.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Order">
            <summary>
            Gets or sets the order in which the handler will be executed
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Executes the call handler.
            </summary>
            <param name="input"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> containing the information about the current call.</param>
            <param name="getNext">delegate to get the next handler in the pipeline.</param>
            <returns>Return value from the target method.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults">
            <summary>
            A class containing the default values for the various <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> settings.
            </summary>
            <remarks>The default values are:
            <list type="table">
            <item><term>EventId</term><description>0</description></item>
            <item><term>LogBeforeCall</term><description>true</description></item>
            <item><term>LogAfterCall</term><description>true</description></item>
            <item><term>BeforeMessage</term><description></description></item>
            <item><term>AfterMessage</term><description></description></item>
            <item><term>Title</term><description>Call Logging</description></item>
            <item><term>IncludeParameters</term><description>true</description></item>
            <item><term>IncludeCallStack</term><description>false</description></item>
            <item><term>IncludeCallTime</term><description>true</description></item>
            <item><term>Priority</term><description>-1</description></item>
            <item><term>Severity</term><description><see cref="T:System.Diagnostics.TraceEventType"/>.Information</description></item>
            </list></remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Order">
            <summary>
            Default Order = 0
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.EventId">
            <summary>
            Default EventId = 0
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.LogBeforeCall">
            <summary>
            Default option to log before the call = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.LogAfterCall">
            <summary>
            Default option to log after the call = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.BeforeMessage">
            <summary>
            Default message in before-call logs = nothing
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.AfterMessage">
            <summary>
            Default message in after-call logs = nothing
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Title">
            <summary>
            Default log entry title = "Call Logging" (localizable)
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.IncludeParameters">
            <summary>
            Default option to include parameter values = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.IncludeCallStack">
            <summary>
            Default option to include the call stack = false
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.IncludeCallTime">
            <summary>
            Default option to include total time to call target = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Priority">
            <summary>
            Default priority = -1
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerDefaults.Severity">
            <summary>
            Default severity = <see cref="T:System.Diagnostics.TraceEventType"/>.Information
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute">
            <summary>
            An attribute to apply the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/> to the target type, property or method.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.Categories">
            <summary>
            Gets or sets the collection of categories to place the log entries into.
            </summary>
            <remarks>The category strings can include replacement tokens. See
            the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.CategoryFormatter"/> class for the list of tokens.</remarks>
            <value>The list of category strings.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.EventId">
            <summary>
            Event ID to include in log entry.
            </summary>
            <value>event id</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.LogBeforeCall">
            <summary>
            Should there be a log entry before calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.LogAfterCall">
            <summary>
            Should there be a log entry after calling the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.BeforeMessage">
            <summary>
            Message to include in a pre-call log entry.
            </summary>
            <value>The message</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.AfterMessage">
            <summary>
            Message to include in a post-call log entry.
            </summary>
            <value>the message.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.IncludeParameters">
            <summary>
            Should the log entry include the parameters to the call?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.IncludeCallStack">
            <summary>
            Should the log entry include the call stack?
            </summary>
            <remarks>Logging the call stack requires full trust code access security permissions.</remarks>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.IncludeCallTime">
            <summary>
            Should the log entry include the time to execute the target?
            </summary>
            <value>true = yes, false = no</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.Priority">
            <summary>
            Priority for the log entry.
            </summary>
            <value>priority</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.Severity">
            <summary>
            Severity to log at.
            </summary>
            <value><see cref="T:System.Diagnostics.TraceEventType"/> giving the severity.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandlerAttribute.CreateHandler(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates the log handler for the target using the configured values.
            </summary>
            <returns>the created <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> class that contains the extra information logged
            by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.LogCallHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.#ctor">
            <summary>
            Create an empty <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.#ctor(System.Object,System.String,System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry"/>.
            </summary>
            <param name="message">Log message.</param>
            <param name="category">Log category.</param>
            <param name="priority">Log priority.</param>
            <param name="eventId">Log event id.</param>
            <param name="severity">Log severity.</param>
            <param name="title">Log title.</param>
            <param name="properties">Extra properties. This contains the parameters to the call.</param>
            <param name="typeName">Name of type implementing the method being called.</param>
            <param name="methodName">Method name being called.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.#ctor(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry"/>.
            </summary>
            <param name="message">Log message.</param>
            <param name="categories">Categories of the log entry.</param>
            <param name="priority">Log priority.</param>
            <param name="eventId">Log event id.</param>
            <param name="severity">Log severity.</param>
            <param name="title">Log title.</param>
            <param name="properties">Extra properties. This contains the parameters to the call.</param>
            <param name="typeName">Name of type implementing the method being called.</param>
            <param name="methodName">Method name being called.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.TypeName">
            <summary>
            Type name
            </summary>
            <value>type name</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.MethodName">
            <summary>
            Method name
            </summary>
            <value>method name</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.ReturnValue">
            <summary>
            Return value from the call.
            </summary>
            <value>return value</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.CallStack">
            <summary>
            The call stack from the current call.
            </summary>
            <value>call stack string.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.Exception">
            <summary>
            Exception thrown from the target.
            </summary>
            <value>If exception was thrown, this is the exception object. Null if no exception thrown.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.CallTime">
            <summary>
            Total time to call the target.
            </summary>
            <value>null if not logged, else the elapsed time.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.ElapsedTime">
            <summary>
            This is to support WMI instrumentation by returning
            the actual <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.PolicyInjection.TraceLogEntry.CallTime"/> 
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.AllEventsTraceSourceName">
            <summary>
              Looks up a localized string similar to All Events.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.AverageTraceExecutionTimeBaseHelpResource">
            <summary>
              Looks up a localized string similar to Avg. Trace Execution Time Base is the base for the average execution time for traced operations..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.AverageTraceExecutionTimeHelpResource">
            <summary>
              Looks up a localized string similar to Avg. Trace Execution Time is the average execution time for traced operations..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.BlockName">
            <summary>
              Looks up a localized string similar to Enterprise Library Logging Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ComPlusInfo_ActivityId">
            <summary>
              Looks up a localized string similar to ActivityId.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ComPlusInfo_ApplicationId">
            <summary>
              Looks up a localized string similar to ApplicationId.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ComPlusInfo_DirectCallerAccountName">
            <summary>
              Looks up a localized string similar to DirectCallerAccountName.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ComPlusInfo_OriginalCallerAccountName">
            <summary>
              Looks up a localized string similar to OriginalCallerAccountName.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ComPlusInfo_TransactionID">
            <summary>
              Looks up a localized string similar to TransactionID.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ConfigurationFailureLogging">
            <summary>
              Looks up a localized string similar to A configuration failure occurred while logging..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ConfigurationFailureUpdating">
            <summary>
              Looks up a localized string similar to The error occurred while refreshing the logging configuration. The configuration will not be updated..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ConfigurationSectionNotFound">
            <summary>
              Looks up a localized string similar to Unable to create object -- configuration section {0} not found in configuration file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.CouldNotLookupAccountSid">
            <summary>
              Looks up a localized string similar to LookupAccountSid was not successful.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DebugInfo_SchemaHelperAtString">
            <summary>
              Looks up a localized string similar to 	at .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DebugInfo_SchemaHelperLine">
            <summary>
              Looks up a localized string similar to 	in {0}: line {1}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DebugInfo_SchemaHelperUnknownType">
            <summary>
              Looks up a localized string similar to &lt;UnknownType&gt;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DebugInfo_StackTrace">
            <summary>
              Looks up a localized string similar to StackTrace.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DebugInfo_StackTraceException">
            <summary>
              Looks up a localized string similar to Unable to process stack trace..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DebugInfo_StackTraceSecurityException">
            <summary>
              Looks up a localized string similar to Insufficient privilege to generate stack trace..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DefaultLogDestinationFailed">
            <summary>
              Looks up a localized string similar to Failed to log message to the default log destination..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DefaultLogDestinationMessage">
            <summary>
              Looks up a localized string similar to An error occurred while the Distributor was processing the message.  Please check your configuration files for errors or typos.  Verify that your sinks are reachable (queues exist, permissions are set, database exists, and so forth...).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DefaultLogDestinationSinkName">
            <summary>
              Looks up a localized string similar to Enterprise Library Backup Sink.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DefaultLogEntryTitle">
            <summary>
              Looks up a localized string similar to Call Logging.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DefaultTextFormat">
            <summary>
              Looks up a localized string similar to Timestamp: {timestamp}{newline}Message: {message}{newline}Category: {category}{newline}Priority: {priority}{newline}EventId: {eventid}{newline}Severity: {severity}{newline}Title:{title}{newline}Machine: {localMachine}{newline}App Domain: {localAppDomain}{newline}ProcessId: {localProcessId}{newline}Process Name: {localProcessName}{newline}Thread Name: {threadName}{newline}Win32 ThreadId:{win32ThreadId}{newline}Extended Properties: {dictionary({key} - {value}{newline})}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DistEventLoggerMessagePrefix">
             <summary>
               Looks up a localized string similar to Message: 
            .
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DistEventLoggerSummary">
            <summary>
              Looks up a localized string similar to Summary for.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.DistributorEventLoggerDefaultApplicationName">
            <summary>
              Looks up a localized string similar to Enterprise Library Distributor Service.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.EmailSinkMissingParameters">
            <summary>
              Looks up a localized string similar to E-Mail Sink is missing one of these keys in the Distributor&apos;s XML file: ToAddress, FromAddress, and/or SmtpServer..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorsTraceSourceName">
            <summary>
              Looks up a localized string similar to Logging Errors &amp; Warnings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ErrorWritingData">
            <summary>
              Looks up a localized string similar to The message {0} could not be written..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.EventLogAccessDenied">
            <summary>
              Looks up a localized string similar to Access denied to the event log &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.EventLogSinkMissingEventSource">
            <summary>
              Looks up a localized string similar to Event Log Sink is missing the key -EventSourceName- in the Distributor&apos;s configuration file..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCannotCheckImpersonatedIdentity">
            <summary>
              Looks up a localized string similar to Cannot check for impersonation; assuming not impersonating..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCannotFindAppropriateConstructor">
            <summary>
              Looks up a localized string similar to Unable to find appropriate {1} argument constructor for {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCannotLoadDefaultCategory">
            <summary>
              Looks up a localized string similar to The default category &apos;{0}&apos; is not defined in Logging Distributor configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCannotLoadDefaultFormatter">
            <summary>
              Looks up a localized string similar to The default formatter &apos;{0}&apos; is not defined in Logging Distributor configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCannotRevertImpersonatedIdentity">
            <summary>
              Looks up a localized string similar to Cannot revert impersonation..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCategoryFilterDataName">
            <summary>
              Looks up a localized string similar to The name for the CategoryFilterData can not be null..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCategoryNotDefined">
            <summary>
              Looks up a localized string similar to The category &apos;{0}&apos; is not defined in the Logging Distributor configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionConfigurationObjectIsNotCustomTraceListenerData">
            <summary>
              Looks up a localized string similar to The configuration object for type &apos;{0}&apos; with name &apos;{1}&apos; has type &apos;{2}&apos; instead of CustomTraceListenerData which is required for custom providers..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCreationLinqExpressionMustBeNew">
            <summary>
              Looks up a localized string similar to The creation expression for this type registration must be a Linq New or MemberInit Expression..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCustomListenerTypeDoesNotHaveDefaultConstructor">
            <summary>
              Looks up a localized string similar to The type &apos;{1}&apos; specified for custom trace listener named &apos;{0}&apos; does not a default constructor, which is required when no InitData is specified in the configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCustomListenerTypeDoesNotHaveRequiredConstructorSignature">
            <summary>
              Looks up a localized string similar to The type &apos;{1}&apos; specified for custom trace listener named &apos;{0}&apos; does not a constructor with the required signature {2}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionCustomTraceListenerTypeDoesNotHaveRequiredConstructor">
            <summary>
              Looks up a localized string similar to Custom TraceListener type {1} for name {0} does not have the required constructor .ctor(string)..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionDetails">
            <summary>
              Looks up a localized string similar to Exception Information Details:.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionDuringFormattingOriginalEntryForReporting">
            <summary>
              Looks up a localized string similar to An error occurred while formatting the log entry for reporting {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionFailedToAcquireLockToUpdate">
            <summary>
              Looks up a localized string similar to Log writer failed to acquire lock while updating configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionFailedToAcquireLockToWriteLog">
            <summary>
              Looks up a localized string similar to Log writer failed to acquire lock while writing log entry..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionFormatterHeader">
            <summary>
              Looks up a localized string similar to HEADER.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionFormatterNotDefined">
            <summary>
              Looks up a localized string similar to The formatter &apos;{0}&apos; is not defined in the Logging Distributor configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionIncompatibleConfigurationType">
            <summary>
              Looks up a localized string similar to The factory {0} was created to use {1} objects to inject data into {2} objects. The type {3} was supplied to the Create method which is not compatible..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionLoggingSectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration section for Logging cannot be found in the configuration source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionMethodMustBeImplementedBySubclasses">
            <summary>
              Looks up a localized string similar to Must be implemented by subclasses..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionNoSinkDefined">
            <summary>
              Looks up a localized string similar to The requested log sink &apos;{0}&apos; is not defined in the current configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionNoSinksDefined">
            <summary>
              Looks up a localized string similar to The Distributor Settings does not have any log sinks defined in configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionNullOrEmptyString">
            <summary>
              Looks up a localized string similar to The value can not be a null or empty string..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionReadEnvironmentVariablesDenied">
            <summary>
              Looks up a localized string similar to Environment Variables access denied..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionStackTraceDetails">
            <summary>
              Looks up a localized string similar to StackTrace Information Details:.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionSummary">
            <summary>
              Looks up a localized string similar to Summary for.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionTraceListenerConfigurationElementMissingTypeAttribute">
            <summary>
              Looks up a localized string similar to Missing TraceListenerData type in configuration &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionTraceListenerConfigurationElementTypeNotFound">
            <summary>
              Looks up a localized string similar to Invalid TraceListenerData type in configuration &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionTraceListenerConfigurationNotFound">
            <summary>
              Looks up a localized string similar to The configuration for TraceListener named {0} is missing from configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionType">
            <summary>
              Looks up a localized string similar to Exception Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExceptionWriterShouldNotBeNull">
            <summary>
              Looks up a localized string similar to The writer argument should not be null when passing a configurationsource for instrumentation..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ExtendedPropertyError">
            <summary>
              Looks up a localized string similar to Unable to read system property. Error message: {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FailureWhileCheckingFilters">
            <summary>
              Looks up a localized string similar to Failure while checking filters for log entry..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FailureWhileReportingMissingCategories">
            <summary>
              Looks up a localized string similar to Failure while reporting missing log categories for log entry..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FailureWhileTracing">
            <summary>
              Looks up a localized string similar to Failure while sending log entry to the TraceListeners..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FileSinkMissingConfiguration">
            <summary>
              Looks up a localized string similar to Flat File Sink is missing one of these keys in the Distributor&apos;s configuration file: FilePath and/or FileName.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FilterEvaluationFailed">
            <summary>
              Looks up a localized string similar to Evaluation of filter &apos;{0}&apos; failed and the filter will be ignored. See summary information below for more information. Should this problem persist, stop the service and check the configuration file(s) for possible error(s) in the configuration of the categories and sinks..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FilterEvaluationFailed2">
            <summary>
              Looks up a localized string similar to ProcessQueueMessage - additional information.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FilterEvaluationFailed3">
             <summary>
               Looks up a localized string similar to 
            Message: 
            {0}.
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.FormatterFactoryName">
            <summary>
              Looks up a localized string similar to Log Formatter Factory.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.InstanceNameNotFoundForSpecifiedType">
            <summary>
              Looks up a localized string similar to Unable to find instance  name &apos;{0}&apos; for &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.InstrumentationCounterCategory">
            <summary>
              Looks up a localized string similar to Enterprise Library Logging Service.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.InstrumentationCounterCategoryHelp">
            <summary>
              Looks up a localized string similar to Enterprise Library Logging Service application performance counters..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.InstrumentationEventSource">
            <summary>
              Looks up a localized string similar to Enterprise Library Logging Service.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.IntrinsicPropertyError">
            <summary>
              Looks up a localized string similar to Unable to read intrinsic property.  Error message: {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.InvalidSink">
            <summary>
              Looks up a localized string similar to Error logging with &apos;{0}&apos; sink from configuration. The default log sink will be used instead to process the message..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.InvalidSinkMessage">
             <summary>
               Looks up a localized string similar to 
            Message: 
            {0}.
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.LogEntryIntrinsicPropertyNoUnmanagedCodePermissionError">
            <summary>
              Looks up a localized string similar to Permission for UnmanagedCode is not available..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.LoggingEventRaisedHelpResource">
            <summary>
              Looks up a localized string similar to Logging Events Raised/sec is the rate at which logging events were raised..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ManagedSecurity_AuthenticationType">
            <summary>
              Looks up a localized string similar to AuthenticationType.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ManagedSecurity_IdentityName">
            <summary>
              Looks up a localized string similar to IdentityName.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ManagedSecurity_IsAuthenticated">
            <summary>
              Looks up a localized string similar to IsAuthenticated.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.MethodNotImplemented">
            <summary>
              Looks up a localized string similar to The method {0}::{1} is not implemented..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.MissingCategories">
             <summary>
               Looks up a localized string similar to There is no explicit mapping for the categories &apos;{0}&apos;. The log entry was: 
            {1}.
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.MissingDefaultFormatter">
            <summary>
              Looks up a localized string similar to The default formatter is missing from the configuration file.  The entry will be written using a TextFormatter and an embedded template..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NotProcessedTraceSourceName">
            <summary>
              Looks up a localized string similar to Unprocessed Category.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NumLogsDefaultSinkSec">
            <summary>
              Looks up a localized string similar to Distributor: # of Logs to Default Sink/Sec.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NumLogsDefaultSinkSecMsg">
            <summary>
              Looks up a localized string similar to Number of logs per second distributed by the Log Distributor to the Default Log Sink (EventLog)..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NumLogsDistributedSec">
            <summary>
              Looks up a localized string similar to Distributor: # of Logs Distributed/Sec.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NumLogsDistributedSecMsg">
            <summary>
              Looks up a localized string similar to Number of logs distributed per second by the Log Distributor..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NumLogsWrittenSec">
            <summary>
              Looks up a localized string similar to Client: # of Logs Written/Sec.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.NumLogsWrittenSecMsg">
            <summary>
              Looks up a localized string similar to Number of logs per second written by client using the Enterprise Library Logging Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ParameterMustImplementType">
            <summary>
              Looks up a localized string similar to Parameter must implement type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ProcessMessageFailed">
            <summary>
              Looks up a localized string similar to Processing of the message failed. See summary information below for more information. Should this problem persist, stop the service and check the configuration file(s) for possible error(s) in the configuration of the categories and sinks..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ProcessMessageFailed2">
            <summary>
              Looks up a localized string similar to ProcessQueueMessage - additional information.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ProcessMessageFailed3">
             <summary>
               Looks up a localized string similar to 
            Message: 
            {0}.
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.PropertyAccessFailed">
            <summary>
              Looks up a localized string similar to Access failed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReconfigurationFailure">
            <summary>
              Looks up a localized string similar to An unknown error occurred reconfiguring the Logging Application Block. Reconfiguration will not take place..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenException">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} threw an exception&gt;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenIndexer">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} is indexer&gt;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenNotFound">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} not found&gt;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.ReflectedPropertyTokenNotReadable">
            <summary>
              Looks up a localized string similar to &lt;Error: property {0} is not readable&gt;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.SinkFactoryName">
            <summary>
              Looks up a localized string similar to Log Sink Factory.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.SinkFailure">
            <summary>
              Looks up a localized string similar to Sink failed because: {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TemplateForFailedLogEntry">
            <summary>
              Looks up a localized string similar to {timestamp}: {title} - {message}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TotalLoggingEventsRaisedHelpResource">
            <summary>
              Looks up a localized string similar to Total Logging Events Raised is the total number of logging events raised..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TotalTraceListenerEntriesWrittenHelpResource">
            <summary>
              Looks up a localized string similar to Total Trace Listener Entries Written is the total number of entries that were traced by individual trace listeners..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TotalTraceOperationsStartedHelpResource">
            <summary>
              Looks up a localized string similar to Total Trace Operations Started is the total number of tracing operations started..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceListenerEntryWrittenHelpResource">
            <summary>
              Looks up a localized string similar to Trace Listener Entries Written/sec is the rate at which entries were traced by individual trace listeners..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceOperationStartedHelpResource">
            <summary>
              Looks up a localized string similar to Trace Operations Started/sec is the rate at which tracing operations were started..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.Tracer_EndMessageFormat">
            <summary>
              Looks up a localized string similar to End Trace: Activity &apos;{0}&apos; in method &apos;{1}&apos; at {2} ticks (elapsed time: {3} seconds).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.Tracer_StartMessageFormat">
            <summary>
              Looks up a localized string similar to Start Trace: Activity &apos;{0}&apos; in method &apos;{1}&apos; at {2} ticks.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceSourceFailed">
            <summary>
              Looks up a localized string similar to Tracing to LogSource &apos;{0}&apos; failed. Processing for other sources will continue. See summary information below for more information. Should this problem persist, stop the service and check the configuration file(s) for possible error(s) in the configuration of the categories and sinks..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceSourceFailed2">
            <summary>
              Looks up a localized string similar to ProcessQueueMessage - additional information.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.TraceSourceFailed3">
             <summary>
               Looks up a localized string similar to 
            Message: 
            {0}.
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error has occurred..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.UnknownFailure">
            <summary>
              Looks up a localized string similar to Unknwon failure..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.UnmanagedSecurity_CurrentUser">
            <summary>
              Looks up a localized string similar to CurrentUser.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Properties.Resources.UnmanagedSecurity_ProcessAccountName">
            <summary>
              Looks up a localized string similar to ProcessAccountName.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter">
            <summary>
            Used by <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogSource"/>s to keep the knowledge of which <see cref="N:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners"/> have been 
            already traced through. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListenerFilter.GetAvailableTraceListeners(System.Collections.Generic.IEnumerable{System.Diagnostics.TraceListener})">
            <summary>
            Gets the availiable trace listners from a list of all the trace listners.
            </summary>
            <param name="traceListeners">The list of all the trace listners.</param>
            <returns>A filtered list of trace listeners.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AttributeSettingTraceListenerWrapper">
            <summary>
            Wraps a <see cref="T:System.Diagnostics.TraceListener"/> to allow the attribute properties to
            be injected.  This is primarily used with custom trace listeners that
            provide attributes in their configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AttributeSettingTraceListenerWrapper.#ctor(System.Diagnostics.TraceListener,System.Collections.Specialized.NameValueCollection)">
            <summary>
             Initializes an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AttributeSettingTraceListenerWrapper"/>.
            </summary>
            <param name="listener">The <see cref="T:System.Diagnostics.TraceListener"/> to wrap.</param>
            <param name="attributes">The attributes to set on the trace listener.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AttributeSettingTraceListenerWrapper.InnerTraceListener">
            <summary>
            Gets the wrapped <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.AttributeSettingTraceListenerWrapper.Name">
            <summary>
            Gets or sets a name for this <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
            <returns>
            A name for this <see cref="T:System.Diagnostics.TraceListener"/>. The default is an empty string ("").
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener">
            <summary>
            Base class for custom trace listeners that support formatters.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.CustomTraceListener.Formatter">
            <summary>
            Gets or sets the log entry formatter.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode">
            <summary>
            This enumeration defines the options that the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            can use to authenticate to the STMP server.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode.None">
            <summary>
            No authentication
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode.WindowsCredentials">
            <summary>
            Use the Windows credentials for the current process
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode.UserNameAndPassword">
            <summary>
            Pass a user name and password
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> that writes an email message, formatting the output with an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.#ctor(System.String,System.String,System.String,System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> with a toaddress, fromaddress, 
            subjectlinestarter, subjectlinender, smtpserver, and a formatter
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> with a toaddress, fromaddress, 
            subjectlinestarter, subjectlinender, smtpserver, smtpport, and a formatter
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> with a toaddress, fromaddress, 
            subjectlinestarter, subjectlinender, smtpserver, smtpport, and a formatter
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
            <param name="formatter">The Formatter <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> which determines how the 
            email message should be formatted</param>
            <param name="authenticationMode">Authentication style to use when connecting to SMTP server.</param>
            <param name="userName">User name to use for authentication if using username/password authentication.</param>
            <param name="password">Password to use for authentication if using username/password authentication.</param>
            <param name="useSSL">Use SSL to connect to mail server if true, regular socket if false.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> with a toaddress, fromaddress, 
            subjectlinestarter, subjectlinender, smtpserver, smtpport, and a formatter
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> with a toaddress, fromaddress, 
            subjectlinestarter, subjectlinender, smtpserver, smtpport.
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailAuthenticationMode,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/> with a toaddress, fromaddress, 
            subjectlinestarter, subjectlinender, smtpserver, smtpport and authentication information.
            </summary>
            <param name="toAddress">A semicolon delimited string the represents to whom the email should be sent.</param>
            <param name="fromAddress">Represents from whom the email is sent.</param>
            <param name="subjectLineStarter">Starting text for the subject line.</param>
            <param name="subjectLineEnder">Ending text for the subject line.</param>
            <param name="smtpServer">The name of the SMTP server.</param>
            <param name="smtpPort">The port on the SMTP server to use for sending the email.</param>
            <param name="authenticationMode">Authentication style to use when connecting to SMTP server.</param>
            <param name="userName">User name to use for authentication if using username/password authentication.</param>
            <param name="password">Password to use for authentication if using username/password authentication.</param>
            <param name="useSSL">Use SSL to connect to mail server if true, regular socket if false.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.Write(System.String)">
            <summary>
            Sends an email message given a predefined string
            </summary>
            <param name="message">The string to write as the email message</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.WriteLine(System.String)">
            <summary>
            Sends an email message given a predefined string
            </summary>
            <param name="message">The string to write as the email message</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Delivers the trace data as an email message.
            </summary>
            <param name="eventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener.GetSupportedAttributes">
            <summary>
            Declare the supported attributes for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EmailTraceListener"/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener">
            <summary>
            Proxy listener for writing the log using the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Logger"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.CategoriesXPathQueries">
            <summary>
            Gets the xpath queries for the categories.
            </summary>
            <value>
            The xpath queries for the categories.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.IsThreadSafe">
            <summary>
            Gets the value indicating the receiver is thread safe.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.NamespaceManager">
            <summary>
            Gets the <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.xmlNamespaceManager"/> for the listenter.
            </summary>
            <value>
            The <see cref="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.xmlNamespaceManager"/> for the listenter.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.GetSupportedAttributes">
            <summary>
            Gets the supported attributes, namely "categoriesXPathQueries" and "namespaces".
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.SplitNamespacesString(System.String)">
            <summary>
            Splits a namespace string.
            </summary>
            <param name="namespacesString">The string to split.</param>
            <returns>The string split into keys and values.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.SplitXPathQueriesString(System.String)">
            <summary>
            Splits the XPathQuery strings.
            </summary>
            <param name="xpathsStrings">The XPath queries.</param>
            <returns>A list of xpaths.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information through the Logging Application Block.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">An identification of the source of the trace request.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information through the Logging Application Block.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">An identification of the source of the trace request.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args"/> array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information through the Logging Application Block.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">An identification of the source of the trace request.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Writes trace information, a message, a related activity identity and event information.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
            <param name="relatedActivityId">A <see cref="T:System.Guid"/> object identifying a related activity.</param>
            <remarks>The <paramref name="relatedActivityId"/> is saved to a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> so the logging infrastructure can reconstruct the transfer message.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.Write(System.String)">
            <summary>
            Writes the specified message through the Logging Application Block.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EntLibLoggingProxyTraceListener.WriteLine(System.String)">
            <summary>
            Writes the specified message through the Logging Application Block.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EnvironmentHelper">
            <summary>
            Helper class for working with environment variables.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.EnvironmentHelper.ReplaceEnvironmentVariables(System.String)">
            <summary>
            Sustitute the Environment Variables
            </summary>
            <param name="fileName">The filename.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> that writes to a flat file, formatting the output with an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.FileStream,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.FileStream"/> and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="stream">The file stream writen to.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.FileStream)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="stream">The file stream.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.StreamWriter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.StreamWriter"/> and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="writer">The stream writer.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="writer">The stream writer.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a file name and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a file name.
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.String,System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a file name, a header, a footer and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="fileName">The file stream.</param>
            <param name="header">The header.</param>
            <param name="footer">The footer.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a file name, a header, and a footer.
            </summary>
            <param name="fileName">The file stream.</param>
            <param name="header">The header.</param>
            <param name="footer">The footer.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.FileStream,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.FileStream"/> and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="stream">The file stream.</param>
            <param name="name">The name.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.FileStream,System.String)">
            <summary>
            Initializes a new name instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="stream">The file stream.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.StreamWriter,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.StreamWriter"/> and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="writer">The stream writer.</param>
            <param name="name">The name.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.IO.StreamWriter,System.String)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="writer">The stream writer.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a file name and 
            a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="name">The name.</param>
            <param name="formatter">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.#ctor(System.String,System.String)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/> with a file name.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Delivers the trace data to the underlying file.
            </summary>
            <param name="eventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener.GetSupportedAttributes">
            <summary>
            Declare the supported attributes for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener"/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener">
            <summary>
            FormattedEventLogTraceListener is a <see cref="T:System.Diagnostics.TraceListener"/> that wraps an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> 
            and uses a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> to transform the data to trace.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.DefaultLogName">
            <summary>
            Default to use when no log name is provided.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.DefaultMachineName">
            <summary>
            Default to use when no machine name is provided.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with a default <see cref="T:System.Diagnostics.EventLogTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with an 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a default <see cref="T:System.Diagnostics.EventLogTraceListener"/>.
            </summary>
            <param name="formater">The formatter for the wrapper.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor(System.Diagnostics.EventLog)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with a 
            <see cref="T:System.Diagnostics.EventLogTraceListener"/> initialized with <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="eventLog">The event log for the wrapped listener.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor(System.Diagnostics.EventLog,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with an 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.Diagnostics.EventLogTraceListener"/> 
            initialized with <see cref="T:System.Diagnostics.EventLog"/>.
            </summary>
            <param name="eventLog">The event log for the wrapped listener.</param>
            <param name="formatter">The formatter for the wrapper.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with a 
            <see cref="T:System.Diagnostics.EventLogTraceListener"/> initialized with a source name.
            </summary>
            <param name="source">The source name for the wrapped listener.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with an 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.Diagnostics.EventLogTraceListener"/> 
            initialized with source name and default log and machine names.
            </summary>
            <param name="source">The source name for the wrapped listener.</param>
            <param name="formatter">The formatter for the wrapper.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor(System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with an 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.Diagnostics.EventLogTraceListener"/> 
            initialized with source name.
            </summary>
            <param name="source">The source name for the wrapped listener.</param>
            <param name="log">The name of the event log.</param>
            <param name="formatter">The formatter for the wrapper.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener.#ctor(System.String,System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener"/> with an 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.Diagnostics.EventLogTraceListener"/> 
            </summary>
            <param name="source">The source name for the wrapped listener.</param>
            <param name="log">The name of the event log.</param>
            <param name="machineName">The machine name for the event log.</param>
            <param name="formatter">The formatter for the wrapper.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener">
            <summary>
            Extends <see cref="T:System.Diagnostics.TextWriterTraceListener"/> to add formatting capabilities.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="formatter">The formatter to format the messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.Stream,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="formatter">The formatter to format the messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.TextWriter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="formatter">The formatter to format the messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a file name.
            </summary>
            <param name="fileName">The file name to write to.</param>
            <param name="formatter">The formatter to format the messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a file name.
            </summary>
            <param name="fileName">The file name to write to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.Stream,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="name">The name.</param>
            <param name="formatter">The formatter to format the messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.TextWriter,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="name">The name.</param>
            <param name="formatter">The formatter to format the messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a file name.
            </summary>
            <param name="fileName">The file name to write to.</param>
            <param name="name">The name.</param>
            <param name="formatter">The formatter to format the messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.#ctor(System.String,System.String)">
            <summary>
            Initializes a new named instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> and a file name.
            </summary>
            <param name="fileName">The file name to write to.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Intercepts the tracing request to format the object to trace.
            </summary>
            <remarks>
            Formatting is only performed if the object to trace is a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> and the formatter is set.
            </remarks>
            <param name="eventCache">The context information.</param>
            <param name="source">The trace source.</param>
            <param name="eventType">The severity.</param>
            <param name="id">The event id.</param>
            <param name="data">The object to trace.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.Formatter">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> used to format the trace messages.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener.GetSupportedAttributes">
            <summary>
            Declares "formatter" as a supported attribute name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase">
            <summary>
            Base class for <see cref="T:System.Diagnostics.TraceListener"/>s that deal with formatters.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.#ctor">
            <summary>
            Initalizes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initalizes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase"/> with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="formatter">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> to use when tracing a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.IsThreadSafe">
            <summary>
            Specifies whether this TraceListener is threadsafe
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.Formatter">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> used to format the trace messages.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerBase.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Overriding TraceData method for the base TraceListener class because it calls the 
            private WriteHeader and WriteFooter methods which actually call the Write method again
            and this amounts to multiple log messages 
            </summary>
            <param name="eventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase">
            <summary>
            Base class for <see cref="N:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners"/> that wrap other trace listeners and 
            use a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/> to format the trace information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.#ctor">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.#ctor(System.Diagnostics.TraceListener)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase"/> with an inner <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
            <param name="innerListener">The wrapped listener.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.#ctor(System.Diagnostics.TraceListener,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter)">
            <summary>
            Initializes a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase"/> with an inner <see cref="T:System.Diagnostics.TraceListener"/> 
            and a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter"/>.
            </summary>
            <param name="innerListener">The wrapped listener.</param>
            <param name="formater">The formatter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Forwards the trace request to the wrapped listener.
            </summary>
            <param name="eventCache">The context information.</param>
            <param name="source">The trace source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The event id.</param>
            <param name="data">The objects to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Formats the object to trace and forward the trace request to the wrapped listener with the formatted result.
            </summary>
            <remarks>
            Formatting is only performed if the object to trace is a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> and the formatter is set.
            </remarks>
            <param name="eventCache">The context information.</param>
            <param name="source">The trace source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The event id.</param>
            <param name="data">The object to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Forwards the trace request to the wrapped listener.
            </summary>
            <param name="eventCache">The context information.</param>
            <param name="source">The trace source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The event id.</param>
            <param name="message">The message to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Forwards the trace request to the wrapped listener.
            </summary>
            <param name="eventCache">The context information.</param>
            <param name="source">The trace source.</param>
            <param name="severity">The severity.</param>
            <param name="id">The event id.</param>
            <param name="format">The format to use.</param>
            <param name="args">The objects to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.Write(System.String)">
            <summary>
            Forwards the trace request to the wrapped listener.
            </summary>
            <param name="message">The message to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.WriteLine(System.String)">
            <summary>
            Forwards the tracing to the wrapped listener.
            </summary>
            <param name="message">The message to trace.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.InnerListener">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceListener"/> wrapped.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceListener"/> wrapped.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTraceListenerWrapperBase.Dispose(System.Boolean)">
            <summary>
            Deal with resources.
            </summary>
            <param name="disposing">true if called from a Dispose message.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterface">
            <summary>
            Specifies the contract for a MSMQ interface object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterface.Close">
            <summary>
            Close the msmq.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterface.Send(System.Messaging.Message,System.Messaging.MessageQueueTransactionType)">
            <summary>
            Send a message to the MSMQ.
            </summary>
            <param name="message">The <see cref="T:System.Messaging.Message"/> to send.</param>
            <param name="transactionType">The <see cref="T:System.Messaging.MessageQueueTransactionType"/> value that specifies the type of transaciton to use.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterface.Transactional">
            <summary>
            The transactional status of the MSMQ.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterfaceFactory">
            <summary>
            Specifies the contract for a provider of MSMQ interfaces.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterfaceFactory.CreateMsmqInterface(System.String)">
            <summary>
            Returns a new MSMQ interface.
            </summary>
            <param name="queuePath">The MSMQ queue path.</param>
            <returns>The new MSMQ interface.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface">
            <summary>
            Implementation of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface"/> that forwards messages to an actual MSMQ.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface.Close">
            <summary>
            Closes the underlying MSMQ.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface.Dispose">
            <summary>
            Disposes the underlying MSMQ.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface.Send(System.Messaging.Message,System.Messaging.MessageQueueTransactionType)">
            <summary>
            Sends a message to the underlying MSMQ.
            </summary>
            <param name="message">The <see cref="T:System.Messaging.Message"/> to send.</param>
            <param name="transactionType">The <see cref="T:System.Messaging.MessageQueueTransactionType"/> value that specifies the type of transaciton to use.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface.Transactional">
            <summary>
            Returns the transactional status of the underlying MSMQ.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterfaceFactory">
            <summary>
            Implementation of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterfaceFactory"/> contract that deals with an actual MSMQ.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterfaceFactory.CreateMsmqInterface(System.String)">
            <summary>
            Returns a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqSendInterface"/>
            </summary>
            <param name="queuePath">The MSMQ queue path.</param>
            <returns>The new MSMQ interface.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener">
            <summary>
            Is a <see cref="T:System.Diagnostics.TraceListener"/> that delivers the log entries to an Msmq instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener.#ctor(System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter,System.Messaging.MessagePriority,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.Boolean,System.Boolean,System.Messaging.MessageQueueTransactionType)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.
            </summary>
            <param name="name">The name of the new instance.</param>
            <param name="queuePath">The path to the queue to deliver to.</param>
            <param name="formatter">The formatter to use.</param>
            <param name="messagePriority">The priority for the messages to send.</param>
            <param name="recoverable">The recoverable flag for the messages to send.</param>
            <param name="timeToReachQueue">The timeToReachQueue for the messages to send.</param>
            <param name="timeToBeReceived">The timeToBeReceived for the messages to send.</param>
            <param name="useAuthentication">The useAuthentication flag for the messages to send.</param>
            <param name="useDeadLetterQueue">The useDeadLetterQueue flag for the messages to send.</param>
            <param name="useEncryption">The useEncryption flag for the messages to send.</param>
            <param name="transactionType">The <see cref="T:System.Messaging.MessageQueueTransactionType"/> for the message to send.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener.#ctor(System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter,System.Messaging.MessagePriority,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.Boolean,System.Boolean,System.Messaging.MessageQueueTransactionType,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.IMsmqSendInterfaceFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener"/>.
            </summary>
            <param name="name">The name of the new instance.</param>
            <param name="queuePath">The path to the queue to deliver to.</param>
            <param name="formatter">The formatter to use.</param>
            <param name="messagePriority">The priority for the messages to send.</param>
            <param name="recoverable">The recoverable flag for the messages to send.</param>
            <param name="timeToReachQueue">The timeToReachQueue for the messages to send.</param>
            <param name="timeToBeReceived">The timeToBeReceived for the messages to send.</param>
            <param name="useAuthentication">The useAuthentication flag for the messages to send.</param>
            <param name="useDeadLetterQueue">The useDeadLetterQueue flag for the messages to send.</param>
            <param name="useEncryption">The useEncryption flag for the messages to send.</param>
            <param name="transactionType">The <see cref="T:System.Messaging.MessageQueueTransactionType"/> for the message to send.</param>
            <param name="msmqInterfaceFactory">The factory to create the msmq interfaces.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener.QueuePath">
            <summary>
            Gets the path to the queue.
            </summary>
            <value>
            The path to the queue.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener.CreateMessage(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Create a message from a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/>.
            </summary>
            <param name="logEntry">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/></param>
            <returns>A <see cref="T:System.Messaging.Message"/> object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Sends the traced object to its final destination through a <see cref="T:System.Messaging.MessageQueue"/>.
            </summary>
            <param name="eventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener.Write(System.String)">
            <summary>
            Writes the specified message to the message queue.
            </summary>
            <param name="message">Message to be written.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.MsmqTraceListener.WriteLine(System.String)">
            <summary>
            Writes the specified message to the message queue.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ReconfigurableTraceListenerWrapper">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> wrapper that reacts to update requests in the Logging Application Block disposing the
            listener it currently wraps and resolving a new one.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ReconfigurableTraceListenerWrapper.#ctor(System.Diagnostics.TraceListener,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ReconfigurableTraceListenerWrapper"/> class with an initial
            <see cref="T:System.Diagnostics.TraceListener"/> to wrap and the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateCoordinator"/> that notifies of
            update requests.
            </summary>
            <param name="wrappedTraceListener">The <see cref="T:System.Diagnostics.TraceListener"/> to wrap.</param>
            <param name="coordinator">The coordinator for updates in the Logging Application Block.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ReconfigurableTraceListenerWrapper.InnerTraceListener">
            <summary>
            Gets the wrapped <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ReconfigurableTraceListenerWrapper.PrepareForUpdate(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
             Prepares to update it's internal state, but does not commit this until <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.ILoggingUpdateHandler.CommitUpdate(System.Object)"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ReconfigurableTraceListenerWrapper.CommitUpdate(System.Object)">
            <summary>
             Commits the update of internal state.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.ReconfigurableTraceListenerWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:SelfUpdatingTraceListenerWrapper"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior">
            <summary>
            Defines the behavior when the roll file is created.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior.Overwrite">
            <summary>
            Overwrites the file if it already exists.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior.Increment">
            <summary>
            Use a secuence number at the end of the generated file if it already exists. If it fails again then increment the secuence until a non existent filename is found.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFilePurger">
            <summary>
            Purges archive files generated by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFilePurger.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFilePurger"/> class.
            </summary>
            <param name="directory">The folder where archive files are kept.</param>
            <param name="baseFileName">The base name for archive files.</param>
            <param name="cap">The number of archive files to keep.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFilePurger.Purge">
            <summary>
            Purges archive files.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFilePurger.GetSequence(System.String)">
            <summary>
            Extracts the sequence number from an archive file name.
            </summary>
            <param name="fileName">The archive file name.</param>
            <returns>The sequence part of the file name.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener">
            <summary>
            Performs logging to a file and rolls the output file when either time or size thresholds are 
            exceeded.
            </summary>
            <remarks>
            Logging always occurs to the configured file name, and when roll occurs a new rolled file name is calculated
            by adding the timestamp pattern to the configured file name.
            <para/>
            The need of rolling is calculated before performing a logging operation, so even if the thresholds are exceeded
            roll will not occur until a new entry is logged.
            <para/>
            Both time and size thresholds can be configured, and when the first of them occurs both will be reset.
            <para/>
            The elapsed time is calculated from the creation date of the logging file.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.#ctor(System.String,System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter,System.Int32,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/> 
            </summary>
            <param name="fileName">The filename where the entries will be logged.</param>
            <param name="header">The header to add before logging an entry.</param>
            <param name="footer">The footer to add after logging an entry.</param>
            <param name="formatter">The formatter.</param>
            <param name="rollSizeKB">The maxium file size (KB) before rolling.</param>
            <param name="timeStampPattern">The date format that will be appended to the new roll file.</param>
            <param name="rollFileExistsBehavior">Expected behavior that will be used when the roll file has to be created.</param>
            <param name="rollInterval">The time interval that makes the file rolles.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.#ctor(System.String,System.String,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.ILogFormatter,System.Int32,System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollFileExistsBehavior,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/> 
            </summary>
            <param name="fileName">The filename where the entries will be logged.</param>
            <param name="header">The header to add before logging an entry.</param>
            <param name="footer">The footer to add after logging an entry.</param>
            <param name="formatter">The formatter.</param>
            <param name="rollSizeKB">The maxium file size (KB) before rolling.</param>
            <param name="timeStampPattern">The date format that will be appended to the new roll file.</param>
            <param name="rollFileExistsBehavior">Expected behavior that will be used when the roll file has to be created.</param>
            <param name="rollInterval">The time interval that makes the file rolles.</param>
            <param name="maxArchivedFiles">The maximum number of archived files to keep.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.RollingHelper">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper"/> for the flat file.
            </summary>
            <value>
            The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper"/> for the flat file.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the file, performing a roll if necessary.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.DateTimeProvider">
            <summary>
            A data time provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.DateTimeProvider.CurrentDateTime">
            <summary>
            Gets the current data time.
            </summary>
            <value>
            The current data time.
            </value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper">
            <summary>
            Encapsulates the logic to perform rolls.
            </summary>
            <remarks>
            If no rolling behavior has been configured no further processing will be performed.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.managedWriter">
            <summary>
            A tally keeping writer used when file size rolling is configured.<para/>
            The original stream writer from the base trace listener will be replaced with
            this listener.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.owner">
            <summary>
            The trace listener for which rolling is being managed.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.performsRolling">
            <summary>
            A flag indicating whether at least one rolling criteria has been configured.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper"/> class with a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/>.
            </summary>
            <param name="owner">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener"/> to use.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.DateTimeProvider">
            <summary>
            Gets the provider for the current date. Necessary for unit testing.
            </summary>
            <value>
            The provider for the current date. Necessary for unit testing.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.NextRollDateTime">
            <summary>
            Gets the next date when date based rolling should occur if configured.
            </summary>
            <value>
            The next date when date based rolling should occur if configured.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.CalculateNextRollDate(System.DateTime)">
            <summary>
            Calculates the next roll date for the file.
            </summary>
            <param name="dateTime">The new date.</param>
            <returns>The new date time to use.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.CheckIsRollNecessary">
            <summary>
            Checks whether rolling should be performed, and returns the date to use when performing the roll.
            </summary>
            <returns>The date roll to use if performing a roll, or <see langword="null"/> if no rolling should occur.</returns>
            <remarks>
            Defer request for the roll date until it is necessary to avoid overhead.<para/>
            Information used for rolling checks should be set by now.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.ComputeArchiveFileName(System.String,System.DateTime)">
            <summary>
            Gets the file name to use for archiving the file.
            </summary>
            <param name="actualFileName">The actual file name.</param>
            <param name="currentDateTime">The current date and time.</param>
            <returns>The new file name.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.FindMaxSequenceNumber(System.String,System.String,System.String)">
            <summary>
            Finds the max sequence number for a log file.
            </summary>
            <param name="directoryName">The directory to scan.</param>
            <param name="fileName">The file name.</param>
            <param name="extension">The extension to use.</param>
            <returns>The next sequence number.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.PerformRoll(System.DateTime)">
            <summary>
            Perform the roll for the next date.
            </summary>
            <param name="rollDateTime">The roll date.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.RollIfNecessary">
            <summary>
            Rolls the file if necessary.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.StreamWriterRollingHelper.UpdateRollingInformationIfNecessary">
            <summary>
            Updates bookeeping information necessary for rolling, as required by the specified
            rolling configuration.
            </summary>
            <returns>true if update was successful, false if an error occurred.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter">
            <summary>
            Represents a file stream writer that keeps a tally of the length of the file.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter.#ctor(System.IO.FileStream)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter"/> class with a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.FileStream"/> to write to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter.#ctor(System.IO.FileStream,System.Text.Encoding)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter"/> class with a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.FileStream"/> to write to.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter.Tally">
            <summary>
            Gets the tally of the length of the string.
            </summary>
            <value>
            The tally of the length of the string.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            
            <param name="value">The character to write to the text stream. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and current writer is closed. </exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"></see> is at the end the stream. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the stream.
            </summary>
            
            <param name="buffer">A character array containing the data to write. If buffer is null, nothing is written. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and current writer is closed. </exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"></see> is at the end the stream. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the stream.
            </summary>
            
            <param name="count">The number of characters to read from buffer. </param>
            <param name="buffer">A character array containing the data to write. </param>
            <param name="index">The index into buffer at which to begin writing. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and current writer is closed. </exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"></see> is at the end the stream. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is negative. </exception>
            <exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener.TallyKeepingFileStreamWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            
            <param name="value">The string to write to the stream. If value is null, nothing is written. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and current writer is closed. </exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.IO.StreamWriter.AutoFlush"></see> is true or the <see cref="T:System.IO.StreamWriter"></see> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"></see> is at the end the stream. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval">
            <summary>
            Defines the frequency when the file need to be rolled.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.None">
            <summary>
            None Interval
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.Minute">
            <summary>
            Minute Interval
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.Hour">
            <summary>
            Hour interval
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.Day">
            <summary>
            Day Interval
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.Week">
            <summary>
            Week Interval
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.Month">
            <summary>
            Month Interval
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.Year">
            <summary>
            Year Interval
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollInterval.Midnight">
            <summary>
            At Midnight
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper">
            <summary>
            Wraps a <see cref="T:System.Diagnostics.TraceListener"/> and forwards all trace requests to it.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.InnerTraceListener">
            <summary>
             The wrapped <see cref="T:System.Diagnostics.TraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Close">
            <summary>
            When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Diagnostics.TraceListener"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Fail(System.String)">
            <summary>
            Emits an error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">A message to emit. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Fail(System.String,System.String)">
            <summary>
            Emits an error message and a detailed error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">A message to emit. 
                            </param><param name="detailMessage">A detailed message to emit. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Flush">
            <summary>
            When overridden in a derived class, flushes the output buffer.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.
                            </param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.
                            </param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
                            </param><param name="id">A numeric identifier for the event.
                            </param><param name="data">The trace data to emit.
                            </param><filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.
                            </param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.
                            </param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
                            </param><param name="id">A numeric identifier for the event.
                            </param><param name="data">An array of objects to emit as data.
                            </param><filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes trace and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.
                            </param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.
                            </param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
                            </param><param name="id">A numeric identifier for the event.
                            </param><filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.
                            </param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.
                            </param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
                            </param><param name="id">A numeric identifier for the event.
                            </param><param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args"/> array.
                            </param><param name="args">An object array containing zero or more objects to format.
                            </param><filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.
                            </param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.
                            </param><param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.
                            </param><param name="id">A numeric identifier for the event.
                            </param><param name="message">A message to write.
                            </param><filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Writes trace information, a message, a related activity identity and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.
                            </param><param name="source">A name used to identify the output, typically the name of the application that generated the trace event.
                            </param><param name="id">A numeric identifier for the event.
                            </param><param name="message">A message to write.
                            </param><param name="relatedActivityId">A <see cref="T:System.Guid"/>  object identifying a related activity.
                            </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Write(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Write(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write. 
                            </param><param name="category">A category name used to organize the output. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.Write(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">A message to write. 
                            </param><param name="category">A category name used to organize the output. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.WriteLine(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write. 
                            </param><param name="category">A category name used to organize the output. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.WriteLine(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="message">A message to write. 
                            </param><param name="category">A category name used to organize the output. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.TraceListenerWrapper.IsThreadSafe">
            <summary>
            Gets a value indicating whether the trace listener is thread safe. 
            </summary>
            <returns>
            true if the trace listener is thread safe; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener">
            <summary>
            WmiTraceListener is a <see cref="T:System.Diagnostics.TraceListener"/> that send a WMI event
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener"/> 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener.Write(System.String)">
            <summary>
            Sends an event given a predefined string
            </summary>
            <param name="message">The string to write as the event</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener.WriteLine(System.String)">
            <summary>
            Sends an email message given a predefined string
            </summary>
            <param name="message">The string to write as the email message</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.WmiTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Delivers the trace data as an event.
            </summary>
            <param name="eventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener">
            <summary>
            A <see cref="T:System.Diagnostics.TraceListener"/> that writes an XML.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.XmlTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Delivers the trace data as an XML message.
            </summary>
            <param name="eventCache">The context information provided by <see cref="N:System.Diagnostics"/>.</param>
            <param name="source">The name of the trace source that delivered the trace data.</param>
            <param name="eventType">The type of event.</param>
            <param name="id">The id of the event.</param>
            <param name="data">The data to trace.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager">
            <summary>
            Represents a performance tracing class to log method entry/exit and duration.    
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.LogWriter">
            <summary>
            For testing purpose
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.InstrumentationProvider">
            <summary>
            For testing purpose
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager"/> giving the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.LogWriter"/>.
            </summary>
            <param name="logWriter">The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.LogWriter"/> that is used to write trace messages.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager"/> giving the <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.LogWriter"/>.
            </summary>
            <param name="logWriter">The <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.LogWriter"/> that is used to write trace messages.</param>
            <param name="instrumentationProvider">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider"/> used to determine if instrumentation should be enabled</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.StartTrace(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name.
            </summary>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.TraceManager.StartTrace(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer">
            <summary>
            Represents a performance tracing class to log method entry/exit and duration.
            </summary>
            <remarks>
            <para>Lifetime of the Tracer object will determine the beginning and the end of
            the trace.  The trace message will include, method being traced, start time, end time 
            and duration.</para>
            <para>Since Tracer uses the Logging Application Block to log the trace message, you can include application
            data as part of your trace message. Configured items from call context will be logged as
            part of the message.</para>
            <para>Trace message will be logged to the log category with the same name as the tracer operation name.
            You must configure the operation categories, or the catch-all categories, with desired log sinks to log 
            the trace messages.</para>
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.priority">
            <summary>
            Priority value for Trace messages
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.eventId">
            <summary>
            Event id for Trace messages
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.startTitle">
            <summary>
            Title for operation start Trace messages
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.endTitle">
            <summary>
            Title for operation end Trace messages
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.ActivityIdPropertyKey">
            <summary>
            Name of the entry in the ExtendedProperties having the activity id
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name.
            </summary>
            <remarks>
            If an existing activity id is already set, it will be kept. Otherwise, a new activity id will be created.
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            The activity id will override a previous activity id
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name.
            </summary>
            <remarks>
            If an existing activity id is already set, it will be kept. Otherwise, a new activity id will be created.
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="writer">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="instrumentationConfiguration">The configuration source that is used to determine instrumentation should be enabled.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name.
            </summary>
            <remarks>
            If an existing activity id is already set, it will be kept. Otherwise, a new activity id will be created.
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="writer">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> used to retrieve the instrumentation provider for this tracer.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical name.
            It retrieves require dependent objects from the given <paramref name="container"/>.
            </summary>
            <remarks>
            If an existing activity id is already set, it will be kept. Otherwise, a new activity id will be created.
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> used to retrieve dependent objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,System.Guid,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            The activity id will override a previous activity id
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
            <param name="writer">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="instrumentationConfiguration">configuration source that is used to determine instrumentation should be enabled</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,System.Guid,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            The activity id will override a previous activity id
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
            <param name="writer">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> used to retrieve the instrumentation provider for this tracer.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,System.Guid,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            This is meant to be used internally
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="activityId">The activity id</param>
            <param name="writer">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="instrumentationProvider">Instrumentation provider to use for firing logical instrumentation events from Tracer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.#ctor(System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter,Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Instrumentation.ITracerInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> class with the given logical operation name and activity id.
            </summary>
            <remarks>
            This is meant to be used internally
            </remarks>
            <param name="operation">The operation for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/></param>
            <param name="writer">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogWriter"/> that is used to write trace messages</param>
            <param name="instrumentationProvider">Instrumentation provider to use for firing logical instrumentation events from Tracer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.Dispose">
            <summary>
            Causes the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer"/> to output its closing message.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.Tracer.IsTracingEnabled">
            <summary>
            Answers whether tracing is enabled
            </summary>
            <returns>true if tracing is enabled</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry">
            <summary>
            Extension of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry"/> for adding XML Support.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry.#ctor(System.Object,System.Collections.Generic.ICollection{System.String},System.Int32,System.Int32,System.Diagnostics.TraceEventType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry"/> class.
            </summary>
            <param name="message"></param>
            <param name="category"></param>
            <param name="priority"></param>
            <param name="eventId"></param>
            <param name="severity"></param>
            <param name="title"></param>
            <param name="properties"></param>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry.xmlString">
            <summary>
            Field to be able to serialize the XPathNavigator. This a tradeoff.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Logging.XmlLogEntry.Xml">
            <summary>
            XML to Log.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> that updates performance counters when calling the target.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.TotalInstanceName">
            <summary>
            Instance name for the "total" instance
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.NumberOfCallsCounterName">
            <summary>
            Number of calls counter name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.CallsPerSecondCounterName">
            <summary>
            Calls per second counter name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.AverageCallDurationCounterName">
            <summary>
            Average call duration counter name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.AverageCallDurationBaseCounterName">
            <summary>
            Average call duration base counter name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.TotalExceptionsCounterName">
            <summary>
            Total exceptions counter name
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.ExceptionsPerSecondCounterName">
            <summary>
            Exceptions per second counter name
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.#ctor(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler"/> using the given category
            and instance name.
            </summary>
            <remarks>See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults"/> for a list
            of the default values for each property.</remarks>
            <param name="category">Performance counter category to update. This counter category
            must be installed separately or the handler will fail.</param>
            <param name="counterInstanceName">Counter instance name. This may include replacement
            tokens. See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> class for a list of the tokens.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler"/> using the given settings.
            </summary>
            <param name="category">Performance counter category to update. This counter category
            must be installed separately or the handler will fail.</param>
            <param name="instanceName">Counter instance name. This may include replacement
            tokens. See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> class for a list of the tokens.</param>
            <param name="useTotalCounter">Should a "Total" instance be updated?</param>
            <param name="incrementNumberOfCalls">Should the number of calls counter be updated?</param>
            <param name="incrementCallsPerSecond">Should the "calls / second" counter be updated?</param>
            <param name="incrementAverageCallDuration">Should the "average seconds / call" counter be updated?</param>
            <param name="incrementTotalExceptions">Should the "# of exceptions" counter be updated?</param>
            <param name="incrementExceptionsPerSecond">Should the "# exceptions / second" counter be updated?</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler"/> using the given settings.
            </summary>
            <param name="category">Performance counter category to update. This counter category
            must be installed separately or the handler will fail.</param>
            <param name="instanceName">Counter instance name. This may include replacement
            tokens. See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> class for a list of the tokens.</param>
            <param name="useTotalCounter">Should a "Total" instance be updated?</param>
            <param name="incrementNumberOfCalls">Should the number of calls counter be updated?</param>
            <param name="incrementCallsPerSecond">Should the "calls / second" counter be updated?</param>
            <param name="incrementAverageCallDuration">Should the "average seconds / call" counter be updated?</param>
            <param name="incrementTotalExceptions">Should the "# of exceptions" counter be updated?</param>
            <param name="incrementExceptionsPerSecond">Should the "# exceptions / second" counter be updated?</param>
            <param name="handlerOrder">Order of the handler.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.UseTotalCounter">
            <summary>
            Should a "Total" instance be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.IncrementNumberOfCalls">
            <summary>
            Should the number of calls counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.Category">
            <summary>
            Performance counter category to update.
            </summary>
            <value>category name</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.InstanceName">
            <summary>
            Counter instance name. This may include replacement
            tokens. See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> class for a list of the tokens.
            </summary>
            <value>instance name.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.IncrementCallsPerSecond">
            <summary>
            Should the "calls / second" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.IncrementAverageCallDuration">
            <summary>
            Should the "average seconds / call" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.IncrementTotalExceptions">
            <summary>
            Should the "# of exceptions" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.IncrementExceptionsPerSecond">
            <summary>
            Should the "# exceptions / second" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.Order">
            <summary>
            Gets or sets the order in which the handler will be executed
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Executes the handler. Increments the various counter according to configuration.
            </summary>
            <param name="input"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> describing the current call.</param>
            <param name="getNext">delegate to call to get the next handler in the pipeline.</param>
            <returns>Return value from target method.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults">
            <summary>
            Defaults for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults"/> class.
            </summary>
            <remarks>The default values are:
            <list>
            <item><term>UseTotalCounter</term><description>true</description></item>
            <item><term>IncrementNumberOfCalls</term><description>true</description>></item>
            <item><term>IncrementCallsPerSecond</term><description>true</description></item>
            <item><term>IncrementAverageCallDuration</term><description>true</description></item>
            <item><term>IncrementTotalExceptions</term><description>false</description></item>
            <item><term>IncrementExceptionsPerSecond</term><description>false</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults.UseTotalCounter">
            <summary>
            Use total counter = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults.IncrementNumberOfCalls">
            <summary>
            Increment number of calls counter = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults.IncrementCallsPerSecond">
            <summary>
            Increment calls per second counter = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults.IncrementAverageCallDuration">
            <summary>
            Increment seconds / call counter = true
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults.IncrementTotalExceptions">
            <summary>
            Increment total number of exceptions counter = false
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults.IncrementExceptionsPerSecond">
            <summary>
            Increment exceptions per second counter = false
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute">
            <summary>
            An attribute that applies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler"/> to the target.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute"/> with the given 
            category and instance names. All other properties start at the default values.
            </summary>
            <remarks>See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerDefaults"/> class for
            the default values.</remarks>
            <param name="category">Performance counter category name.</param>
            <param name="instanceName">Performance counter instance name. This may contain substitution
            tokens; see <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> for the list of tokens.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.CategoryName">
            <summary>
            Performance counter category to update.
            </summary>
            <value>category name</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.InstanceName">
            <summary>
            Counter instance name. This may include replacement
            tokens. See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> class for a list of the tokens.
            </summary>
            <value>instance name.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.IncrementAverageCallDuration">
            <summary>
            Should the "average seconds / call" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.IncrementCallsPerSecond">
            <summary>
            Should the "calls / second" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.IncrementExceptionsPerSecond">
            <summary>
            Should the "# exceptions / second" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.IncrementNumberOfCalls">
            <summary>
            Should the number of calls counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.IncrementTotalExceptions">
            <summary>
            Should the "# of exceptions" counter be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.UseTotalCounter">
            <summary>
            Should a "Total" instance be updated?
            </summary>
            <value>true or false</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandlerAttribute.CreateHandler(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <returns>A new call handler object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.AuthorizationCallHandlerAttribute">
            <summary>
            Attribute that hooks up the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler"/> to the
            target.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.AuthorizationCallHandlerAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.AuthorizationCallHandlerAttribute"/> that uses the given
            operation name.
            </summary>
            <remarks>The operation name may include replacement tokens. See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/>
            for the list of tokens.</remarks>
            <param name="operationName">Operation name to use for checking.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.AuthorizationCallHandlerAttribute.OperationName">
            <summary>
            Operation name.
            </summary>
            <value>operation name.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.AuthorizationCallHandlerAttribute.ProviderName">
            <summary>
            Security provider name.
            </summary>
            <value>Security Provider name. Defaults to the default security provider.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.AuthorizationCallHandlerAttribute.CreateHandler(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <returns>A new call handler object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData">
            <summary>
            Configuration element for the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData.#ctor">
            <summary>
            Constructs an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData"/> with default settings.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData"/> instance with the given
            rule name and assembly name pattern to match.
            </summary>
            <param name="matchingRuleName">Name of rule from the configuration file.</param>
            <param name="assemblyName">Assembly name to match.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData.Match">
            <summary>
            The assembly name to match.
            </summary>
            <value>Assembly name to match.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.AssemblyMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData">
            <summary>
            Configuration element for the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule"/> configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule.</param>
            <param name="attributeType">Attribute to find on the target.</param>
            <param name="searchInheritanceChain">Should we search the inheritance chain to find the attribute?</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule.</param>
            <param name="attributeTypeName">Name of the attribute type to match on the target.</param>
            <param name="searchInheritanceChain">Should we search the inheritance chain to find the attribute?</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.SearchInheritanceChain">
            <summary>
            Should we search the inheritance chain to find the attribute?
            </summary>
            <value>The "searchInheritanceChain" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.AttributeTypeName">
            <summary>
            Name of attribute type to match.
            </summary>
            <value>The "attributeType" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.AttributeType">
            <summary>
            The underlying type object for the attribute we want to search for.
            </summary>
            <value>This wraps the AttributeTypeName property in a type converter.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomAttributeMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData">
            <summary>
            A configuration element that lets you configure matching rules
            that don't have any explicit configuration support.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule instance.</param>
            <param name="type">Type of the matching rule to create.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> instance.
            </summary>
            <param name="name">Name of the matching rule instance.</param>
            <param name="typeName">Name of type of matching rule to create.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
            <value>The attribute collection.</value>  
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">The property to get.</param>
            <returns>The value of the requested property.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Property to set.</param>
            <param name="value">New value for property.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="sourceElement">Source configuration element</param>
            <param name="parentElement">Parent configuration element</param>
            <param name="saveMode">ConfigurationSaveMode</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="parentElement">Parent element</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#PolicyInjection#Configuration#CustomMatchingRuleData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
            <returns>True if element has been modified, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.CustomMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AddPolicyInjectionSettings">
            <summary>
              Looks up a localized string similar to Add Policy Injection Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A Matching Rule that selects target classes based on the assembly name or by specifying a reference to an assembly..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Assembly Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataMatchDescription">
             <summary>
               Looks up a localized string similar to The name of the assembly to match. 
            It can be the name and version; the name, version and culture; or the full assembly name of the assembly excluding the .dll file name extension. 
            It cannot include wildcard characters. .
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Assembly Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Assembly Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Assembly Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.AssemblyMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataAttributeTypeNameDescription">
            <summary>
              Looks up a localized string similar to The type name of the custom attribute that is applied to members of the target object..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataAttributeTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Attribute Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A Matching Rule that selects target classes and class members based on a custom attribute type that is applied to class members..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Attribute Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Attribute Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataSearchInheritanceChainDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the rule should also search base classes for members that carry the custom attribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataSearchInheritanceChainDisplayName">
            <summary>
              Looks up a localized string similar to Search Inheritance Chain.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Attribute Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomAttributeMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomMatchingRuleDataAddCommand">
            <summary>
              Looks up a localized string similar to Custom Matching Rule (using type picker).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A custom implementation of a Matching Rule that is added to Enterprise Library..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.CustomMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataCollectionDescription">
            <summary>
              Looks up a localized string similar to A collection of matches for a Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataCollectionDisplayName">
            <summary>
              Looks up a localized string similar to Match Data Collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataDescription">
            <summary>
              Looks up a localized string similar to A class that holds information about a single match for a Matching Rule, such as the string to match and whether the match is case-sensitive..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataDisplayName">
            <summary>
              Looks up a localized string similar to Match.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataIgnoreCaseDescription">
             <summary>
               Looks up a localized string similar to Specifies whether the match should be carried out on a case-sensitive basis. 
            The default is false..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataIgnoreCaseDisplayName">
            <summary>
              Looks up a localized string similar to Ignore Case.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataMatchDescription">
            <summary>
              Looks up a localized string similar to The string value the Matching Rule will compare to class, member, or parameter names..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Match.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A base class for all Matching Rules..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataDescription">
             <summary>
               Looks up a localized string similar to A Matching Rule that selects target classes and class members based on the names of the class members (methods or properties). 
            Wildcard characters can be used for the member name..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Member Name Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataMatchesDescription">
             <summary>
               Looks up a localized string similar to The collection of method and property names to match. 
            Wildcard characters can be included..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataMatchesDisplayName">
            <summary>
              Looks up a localized string similar to Member Names.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Member Name Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Member Name Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MemberNameMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataDescription">
             <summary>
               Looks up a localized string similar to A Matching Rule that selects target classes and class members based on the name and signature (the list of parameter types) of its members. 
            This rule allows the use of wildcard characters for the member names..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Method Signature Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataIgnoreCaseDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the match should be carried out on a case-sensitive basis. The default is false..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataIgnoreCaseDisplayName">
            <summary>
              Looks up a localized string similar to Ignore Case.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataMatchDescription">
            <summary>
              Looks up a localized string similar to The name of the method to match. Wildcard characters can be included..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Method Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Method Signature Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataParametersDescription">
            <summary>
              Looks up a localized string similar to The collection of parameter type names (not the parameter names) that make up the matching method signature..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataParametersDisplayName">
            <summary>
              Looks up a localized string similar to Parameters.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Method Signature Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.MethodSignatureMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A Matching Rule that selects target classes and class members based on their namespace name, using wildcard characters for the child namespace names but not for the root namespace name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Namespace Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataMatchesDescription">
             <summary>
               Looks up a localized string similar to The collection of namespaces to match. 
            Wildcard characters can be used for the child namespace names but not for the root namespace name..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataMatchesDisplayName">
            <summary>
              Looks up a localized string similar to Namespaces.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Namespace Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Namespace Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.NamespaceMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementDataCollectionDescription">
             <summary>
               Looks up a localized string similar to The collection of parameter types to match. 
            The type name can be a fully qualified type name or just the class name. Each match also specifies whether the match
            is case-sensitive, and the parameter kind (which must be one of Input, Output, InputOrOutput, and ReturnValue)..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementDataCollectionDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Type Element Data Collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementDescription">
             <summary>
               Looks up a localized string similar to The type name, case-sensitivity, and usage for an individual parameter type to match. 
            The type name can be a fully qualified type name or just the class name..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Type Element.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementNameDescription">
             <summary>
               Looks up a localized string similar to A unique ID for this parameter. 
            This name does not need to match the corresponding parameter in the target types; only the type is used..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementParameterTypeNameDescription">
            <summary>
              Looks up a localized string similar to An individual parameter type to match. The type name can be a fully qualified type name or just the class name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeElementParameterTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Type Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataDescription">
             <summary>
               Looks up a localized string similar to The type name, case-sensitivity, and usage for an individual parameter type to match. 
            The type name can be a fully qualified type name or just the class name..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Type Match.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataIgnoreCaseDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the match should be carried out on a case-sensitive basis. The default is false..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataIgnoreCaseDisplayName">
            <summary>
              Looks up a localized string similar to Ignore Case.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataMatchDescription">
            <summary>
              Looks up a localized string similar to An individual parameter type to match. The type name can be a fully qualified type name or just the class name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataParameterKindDescription">
             <summary>
               Looks up a localized string similar to The usage of the parameter as a value from the ParameterKind enumeration. 
            Valid values are Input, Output, InputOrOutput, and ReturnValue..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchDataParameterKindDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Kind.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A Matching Rule that selects target classes and class members based on the type name of a parameter for a member of the target object..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Type Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataMatchesDescription">
             <summary>
               Looks up a localized string similar to The collection of parameter types to match. 
            The type name can be a fully qualified type name or just the class name. Each match also specifies whether the match
            is case-sensitive, and the parameter kind (which must be one of Input, Output, InputOrOutput, and ReturnValue)..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataMatchesDisplayName">
            <summary>
              Looks up a localized string similar to Parameter Types.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Parameter Type Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Parameter Type Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ParameterTypeMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataCategoryNameDescription">
            <summary>
              Looks up a localized string similar to The name of the category of the target performance counter..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataCategoryNameDisplayName">
            <summary>
              Looks up a localized string similar to Category Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataDescription">
             <summary>
               Looks up a localized string similar to A Call Handler that increments a specific counter each time it executes in response to invocation of the selected method or setting of the selected property. 
            This handler uses the instrumentation features that are part of the Enterprise Library Core. .
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Performance Counter Call Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementAverageCallDurationDescription">
            <summary>
              Looks up a localized string similar to Whether to increment an &apos;Average duration of each call&apos; counter each time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementAverageCallDurationDisplayName">
            <summary>
              Looks up a localized string similar to Increment Average Call Duration.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementCallsPerSecondDescription">
            <summary>
              Looks up a localized string similar to Whether to increment a &apos;Number of calls per second&apos; counter each time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementCallsPerSecondDisplayName">
            <summary>
              Looks up a localized string similar to Increment Calls Per Second.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementExceptionsPerSecondDescription">
            <summary>
              Looks up a localized string similar to Whether to increment a &apos;Number of exceptions per second&apos; counter each time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementExceptionsPerSecondDisplayName">
            <summary>
              Looks up a localized string similar to Increment Exceptions Per Second.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementNumberOfCallsDescription">
            <summary>
              Looks up a localized string similar to Whether to increment a &apos;Total number of calls&apos; counter each time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementNumberOfCallsDisplayName">
            <summary>
              Looks up a localized string similar to Increment Number Of Calls.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementTotalExceptionsDescription">
            <summary>
              Looks up a localized string similar to Whether to increment a &apos;Total number of exceptions&apos; counter each time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataIncrementTotalExceptionsDisplayName">
            <summary>
              Looks up a localized string similar to Increment Total Exceptions.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataInstanceNameDescription">
             <summary>
               Looks up a localized string similar to The name of the instance of the target performance counter. 
            Can include the tokens {method}, {type}, {namespace}, {assembly}, and {appdomain}..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataInstanceNameDisplayName">
            <summary>
              Looks up a localized string similar to Instance Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Performance Counter Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataOrderDescription">
             <summary>
               Looks up a localized string similar to The position of the handler within the policy handler chain, starting from 1. 
            The default value is zero, which means that there is no explicit order specified for the handler in relation to other handlers in the same handler chain..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataOrderDisplayName">
            <summary>
              Looks up a localized string similar to Order.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Performance Counter Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataUseTotalCounterDescription">
            <summary>
              Looks up a localized string similar to Whether to increment a &apos;Total&apos; counter each time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PerformanceCounterCallHandlerDataUseTotalCounterDisplayName">
            <summary>
              Looks up a localized string similar to Use Total Counter.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataDescription">
            <summary>
              Looks up a localized string similar to A set of Matching Rules that select types and their members, and a set of Call Handlers that will execute when calls are made to these types and their members..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataDisplayName">
            <summary>
              Looks up a localized string similar to Policy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataHandlersDescription">
            <summary>
              Looks up a localized string similar to The set of Call Handlers for this Policy..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataHandlersDisplayName">
            <summary>
              Looks up a localized string similar to Handlers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataMatchingRulesDescription">
            <summary>
              Looks up a localized string similar to The set of Matching Rules for this Policy..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataMatchingRulesDisplayName">
            <summary>
              Looks up a localized string similar to Matching Rules.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Policy..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyInjectionSettingsDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for the Policy Injection Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyInjectionSettingsDisplayName">
            <summary>
              Looks up a localized string similar to Policy Injection Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyInjectionSettingsPoliciesDescription">
            <summary>
              Looks up a localized string similar to The set of Policies configured for the Policy Injection Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PolicyInjectionSettingsPoliciesDisplayName">
            <summary>
              Looks up a localized string similar to Policies.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataDescription">
             <summary>
               Looks up a localized string similar to A class that contains details of a property to match. 
            It includes the property name, whether the match is case-sensitive, and a value from the PropertyMatchingOption enumeration that indicates 
            if the rule should match on the Get, Set, or both the accessors for a selected parameter. 
            Valid values for this are Get, Set, and GetOrSet..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataDisplayName">
            <summary>
              Looks up a localized string similar to Property Match.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataIgnoreCaseDescription">
             <summary>
               Looks up a localized string similar to Specifies whether the match should be carried out on a case-sensitive basis. 
            The default is false..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataIgnoreCaseDisplayName">
            <summary>
              Looks up a localized string similar to Ignore Case.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataMatchDescription">
             <summary>
               Looks up a localized string similar to The name of a property to match. It can include or consist of the * or ? wildcard characters to select 
            multiple properties, and may use square brackets [ ] to specify a range of characters..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Property Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataMatchOptionDescription">
             <summary>
               Looks up a localized string similar to A value from the PropertyMatchingOption enumeration that indicates if the rule should match on the 
            Get, Set, or both the accessors for a selected parameter. Valid values are Get, Set, and GetOrSet..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchDataMatchOptionDisplayName">
            <summary>
              Looks up a localized string similar to Match Option.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataDescription">
             <summary>
               Looks up a localized string similar to A Matching Rule that selects target classes and class members based on their name, 
            including using wildcard characters, and the combination of accessors they implement..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Property Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataMatchesDescription">
            <summary>
              Looks up a localized string similar to The collection of match details containing the property names, case-sensitivity, and accessor details to match..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataMatchesDisplayName">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Property Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Property Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.PropertyMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A Matching Rule that selects target classes and class members based on the type of the return value..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Return Type Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataIgnoreCaseDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the match should be carried out on a case-sensitive basis. The default is false..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataIgnoreCaseDisplayName">
            <summary>
              Looks up a localized string similar to Ignore Case.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataMatchDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the type of the return value of the method to match, or just the type name. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Return Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Return Type Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Return Type Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.ReturnTypeMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A base class for Matching Rules that selects target classes and class members using string matches..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to String Based Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataIgnoreCaseDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the match should be carried out on a case-sensitive basis. The default is false..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataIgnoreCaseDisplayName">
            <summary>
              Looks up a localized string similar to Ignore Case.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataMatchDescription">
            <summary>
              Looks up a localized string similar to The string to match..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Match.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the String Based Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the String Based Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.StringBasedMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataDescription">
             <summary>
               Looks up a localized string similar to A Matching Rule that selects target classes and class members based on the name of an attribute of 
            type Tag that is applied to a class, or to members (methods or properties) within a class..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Tag Attribute Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataIgnoreCaseDescription">
            <summary>
              Looks up a localized string similar to Specifies whether the match should be carried out on a case-sensitive basis. The default is false..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataIgnoreCaseDisplayName">
            <summary>
              Looks up a localized string similar to Ignore Case.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataMatchDescription">
            <summary>
              Looks up a localized string similar to The name of the Tag attribute applied to the target object. It cannot include wildcard characters..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataMatchDisplayName">
            <summary>
              Looks up a localized string similar to Tag Attribute Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Tag Attribute Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Tag Attribute Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TagAttributeMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataDescription">
            <summary>
              Looks up a localized string similar to A Matching Rule that selects target classes and class members based on the namespace and class name of the target type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Type Matching Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataMatchesDescription">
             <summary>
               Looks up a localized string similar to The collection of matches for types, including the type name and the case sensitivity. 
            The type name may include the full namespace and class name of the target object, or just the class name..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataMatchesDisplayName">
            <summary>
              Looks up a localized string similar to Type Matches.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Type Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Type Matching Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.DesignResources.TypeMatchingRuleDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.InjectionFriendlyRuleDrivenPolicy">
            <summary>
            Dependency injection-friendlier subclass of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.InjectionFriendlyRuleDrivenPolicy.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule},System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.InjectionFriendlyRuleDrivenPolicy"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that stores information about a single
            matchable item. Specifically, the string to match, and whether it is case
            sensitive or not.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.#ctor">
            <summary>
            Constructs an empty <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> with the given matching string.
            </summary>
            <param name="match">String to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> with the given matching string and case-sensitivity flag.
            </summary>
            <param name="match">String to match.</param>
            <param name="ignoreCase">true to do case insensitive comparison, false to do case sensitive.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.Match">
            <summary>
            Gets or sets the string to match against.
            </summary>
            <value>The "match" attribute value out of the configuration file.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData.IgnoreCase">
            <summary>
            Gets or sets the case sensitivity flag.
            </summary>
            <value>The "ignoreCase" attribute value out of the configuration file.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElementCollection"/> storing <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> elements,
            or elements derived from <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/>.
            </summary>
            <typeparam name="T">Type of element contained in the collection. Must be <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> or derived from <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/>.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.CreateNewElement">
            <summary>
            Creates a new empty item to store into the collection.
            </summary>
            <returns>The created object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key value from the stored element.
            </summary>
            <param name="element">Element to retrieve key from.</param>
            <returns>The value of the "match" property.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Add(`0)">
            <summary>
            Adds the given element to the collection.
            </summary>
            <param name="match">Element to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the given index.
            </summary>
            <param name="index">Index to remove from.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Remove(System.String)">
            <summary>
            Removes the match from the element with the given name.
            </summary>
            <param name="match">Match string to remove.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index.
            </summary>
            <param name="index">Index to get/set item from.</param>
            <returns>Item at index.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchDataCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> to do a foreach over
            the contents of the collection.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData">
            <summary>
            A configuration element base class that stores configuration information about a matching rule.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData.#ctor">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData.#ctor(System.String,System.Type)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Name of the rule in config.</param>
            <param name="matchingRuleType">The underlying type of matching rule this object configures.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData">
            <summary>
            A configuration element that supports the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in configuration file.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in configuration file.</param>
            <param name="match">Member name pattern to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData})">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in configuration file.</param>
            <param name="matches">Collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> containing the patterns
            to match. If any pattern matches, the rule matches.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.Matches">
            <summary>
            The collection of patterns to match.
            </summary>
            <value>The "matches" child element in config.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MemberNameMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData">
            <summary>
            Configuration element that stores the configuration information for an instance
            of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Name of matching rule in config.</param>
            <param name="memberName">Method name pattern to match.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData.Parameters">
            <summary>
            The collection of parameters that make up the matching method signature.
            </summary>
            <value>The "parameters" child element.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MethodSignatureMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection">
            <summary>
            A configuration element that stores a collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.CreateNewElement">
            <summary>
            Creates a new element to store in the collection.
            </summary>
            <returns>The new element.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key from the element.
            </summary>
            <param name="element">Element to retrieve key from.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.Add(Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> to the collection.
            </summary>
            <param name="parameterTypeElement">The element to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.Get(System.Int32)">
            <summary>
            Gets the element at the given index.
            </summary>
            <param name="index">Index of desired element.</param>
            <returns>The element at that index.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElementDataCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="index">Index of element to remove.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement">
            <summary>
            A configuration element representing a single parameter in a method signature.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> instance.
            </summary>
            <param name="name">unique identifier for this parameter. The name does
            NOT need to match the target's parameter name.</param>
            <param name="parameterType">Expected type of parameter</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.Name">
            <summary>
            A unique ID for this parameter. This name does not need to match
            the corresponding parameter in the target types; only the type is
            used.
            </summary>
            <value>A name for this property that is unique in this rule's configuration.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeElement.ParameterTypeName">
            <summary>
            The parameter type required.
            </summary>
            <value>The "typeName" config attribute.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData">
            <summary>
            Configuration element that stores the configuration information for an instance
            of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in configuration file.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in configuration file.</param>
            <param name="namespaceName">Namespace pattern to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData})">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule name in configuration file.</param>
            <param name="matches">Collection of namespace patterns to match. If any
            of the patterns match then the rule matches.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.Matches">
            <summary>
            The collection of match data containing patterns to match.
            </summary>
            <value>The "matches" child element.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.NamespaceMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData">
            <summary>
            A configuration element storing configuration information for an instance of
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData})">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="matches">Collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> to match against.
            If any of them match, the rule matches.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.Matches">
            <summary>
            The collection of parameter types to match against.
            </summary>
            <value>The "matches" subelement.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData">
            <summary>
            An extended <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> class that also includes the
            <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> of the parameter to match.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
            <param name="match">Parameter type to match. Kind is InputOrOutput.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
            <param name="match">Parameter type to match.</param>
            <param name="kind"><see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData"/> instance.
            </summary>
            <param name="match">Parameter type to match.</param>
            <param name="kind"><see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> to match.</param>
            <param name="ignoreCase">If false, type name comparisons are case sensitive. If true, 
            comparisons are case insensitive.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind">
            <summary>
            What kind of parameter is this? See <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ParameterTypeMatchData.ParameterKind"/> for available values.
            </summary>
            <value>The "parameterKind" config attribute.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData">
            <summary>
            A configuration element that stores information for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.CallHandlers.PerformanceCounterCallHandler"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData"/>.
            </summary>
            <param name="instanceName">Name of the handler section.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData"/>.
            </summary>
            <param name="instanceName">Name of the handler section.</param>
            <param name="handlerOrder">Order of the handler.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.CategoryName">
            <summary>
            Performance counter category name.
            </summary>
            <value>The "categoryName" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.InstanceName">
            <summary>
            Performance counter instance name.
            </summary>
            <remarks>This string may include substitution tokens. See <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/>
            for the list of tokens.</remarks>
            <value>The "instanceName" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.UseTotalCounter">
            <summary>
            Increment "Total" counter instance.
            </summary>
            <value>The "useTotalCounter" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.IncrementNumberOfCalls">
            <summary>
            Increment the "total # of calls" counter?
            </summary>
            <value>The "incrementNumberOfCalls" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.IncrementCallsPerSecond">
            <summary>
            Increment the "calls / second" counter?
            </summary>
            <value>the "incrementCallsPerSecond" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.IncrementAverageCallDuration">
            <summary>
            Increment "average seconds / call" counter?
            </summary>
            <value>The "incrementAverageCallDuration" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.IncrementTotalExceptions">
            <summary>
            Increment "total # of exceptions" counter?
            </summary>
            <value>The "incrementTotalExceptions" config attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.IncrementExceptionsPerSecond">
            <summary>
            Increment the "exceptions / second" counter?
            </summary>
            <value>The "incrementExceptionsPerSecond" config attribute.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PerformanceCounterCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that maps the information about
            a policy from the configuration source.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData"/> with the given name.
            </summary>
            <param name="policyName">Name of the policy.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.#ctor">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData"/> with no name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.MatchingRules">
            <summary>
            Gets or sets the collection of matching rules from configuration.
            </summary>
            <value>The matching rule data collection.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.Handlers">
            <summary>
            Get or sets the collection of handlers from configuration.
            </summary>
            <value>The handler data collection.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData.GetRegistrations">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the policy represented by this config element and its associated objects.
            </summary>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> that stores the policy set in configuration.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.SectionName">
            <summary>
            Section name as it appears in the configuration file.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.Policies">
            <summary>
            Gets or sets the collection of Policies from configuration.
            </summary>
            <value>The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyData"/> collection.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <param name="elementName">The name of the unknown subelement.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.</param>
            <returns>true when an unknown element is encountered while deserializing; otherwise, false.</returns>
            <remarks>This class will ignore an element named "injectors".</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.ConfigureContainer(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Adds to the <paramref name="container"/> the policy definitions represented in the configuration file.
            </summary>
            <param name="container">The container on which the injection policies must be configured.</param>
            <param name="configurationSource">The configuration source from which additional information
            can be retrieved, if necessary.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the Policy Injection settings represented by this config section.
            </summary>
            <param name="configurationSource">This is currently ignored by this routine.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PolicyInjectionSettings.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData">
            <summary>
            A configuration element class that stores configuration information for instances
            of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData})">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="matches">Collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> containing
            property patterns to match.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.Matches">
            <summary>
            The collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> containing property names to match.
            </summary>
            <value>The "matches" config subelement.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData">
            <summary>
            A derived <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> which adds storage for which methods
            on the property to match.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
            <param name="match">Property name pattern to match. The rule will match both getter and setter methods of a property.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
            <param name="match">Property name pattern to match.</param>
            <param name="option">Which of the property methods to match. See <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/>
            for the valid options.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData"/> instance.
            </summary>
            <param name="match">Property name pattern to match.</param>
            <param name="option">Which of the property methods to match. See <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/>
            for the valid options.</param>
            <param name="ignoreCase">If false, type name comparisons are case sensitive. If true, 
            comparisons are case insensitive.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.PropertyMatchData.MatchOption">
            <summary>
            Which methods of the property to match. Default is to match both getters and setters.
            </summary>
            <value>The "matchOption" config attribute.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData">
            <summary>
            A configuration element that stores configuration information about an
            instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="returnTypeName">Return type to match.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData.Match">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.ReturnTypeMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData">
            <summary>
            Base class for matching rule configuration data for those rules that take
            a single match instance consisting of a string to match and an
            ignore case flag.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.#ctor(System.String,System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Name of the matching rule</param>
            <param name="matches">String to match.</param>
            <param name="matchingRuleType">Type of the underlying matching rule.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.Match">
            <summary>
            The string to match.
            </summary>
            <value>The "match" configuration attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.StringBasedMatchingRuleData.IgnoreCase">
            <summary>
            Should comparisons be case sensitive?
            </summary>
            <value>The "ignoreCase" configuration attribute. If false, comparison is
            case sensitive. If true, comparison is case insensitive.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData">
            <summary>
            A configuration element that stores configuration information for
            an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="tagToMatch">Tag string to match.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData.Match">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TagAttributeMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData">
            <summary>
            Configuration element that stores configuration information for
            an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="typeName">Type name to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.#ctor(System.String,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData})">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData"/> instance.
            </summary>
            <param name="matchingRuleName">Matching rule instance name in configuration.</param>
            <param name="matches">Collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> containing
            types to match. If any one matches, the rule matches.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.Matches">
            <summary>
            The collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.MatchData"/> giving the types to match.
            </summary>
            <value>The "matches" configuration subelement.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Configuration.TypeMatchingRuleData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the matching rule represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.InstanceInterceptionPolicySettingInjectionMember">
            <summary>
             Sets the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> on the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/> for
             a type in the <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.InstanceInterceptionPolicySettingInjectionMember.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
             Initializes the InstanceInterceptionPolicySettingInjectionMember with the provided interceptor.
            </summary>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to set on the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/></param>
            <exception cref="T:System.ArgumentNullException">A valid interceptor is required</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.InstanceInterceptionPolicySettingInjectionMember.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the container with 
            an appropriate <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/>
            </summary>
            <param name="serviceType">Type of the interface being registered. This parameter is
            ignored by this class.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.InstanceInterceptionPolicySettingInjectionMember.Interceptor">
            <summary>
             The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> set on the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/>
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.AssemblyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.CustomAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MemberNameMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.MethodSignatureMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.NamespaceMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ParameterTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.PropertyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.ReturnTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TagAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule">
            <summary>
            Placeholder for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.MatchingRules.TypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <remarks>
            This type is available to support the configuration subsystem. Use 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> instead.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection">
            <summary>
            A static facade class that provides the main entry point into the
            Policy Injection Application Block. Methods on this class
            create intercepted objects, or wrap existing instances with
            interceptors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create``1(System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified in
            the default policy configuration.
            </summary>
            <typeparam name="TObject">Type of object to create.</typeparam>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create``2(System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified in
            the default policy configuration.
            </summary>
            <typeparam name="TObject">Concrete object type to create.</typeparam>
            <typeparam name="TInterface">Type of reference to return. Must be an interface the object implements.</typeparam>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create(System.Type,System.Object[])">
            <summary>
            Creates a new object of type <paramref name="typeToCreate"/> and
            adds interception as needed to match the policies specified in
            the default policy configuration.
            </summary>
            <param name="typeToCreate">Type of object to create.</param>
            <param name="args">Arguments to pass to the <paramref name="typeToCreate"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Create(System.Type,System.Type,System.Object[])">
            <summary>
            Creates a new object of type <paramref name="typeToCreate"/> and
            adds interception as needed to match the policies specified in
            the default policy configuration.
            </summary>
            <param name="typeToCreate">Concrete object type to create.</param>
            <param name="typeToReturn">Type of reference to return. Must be an interface the object implements.</param>
            <param name="args">Arguments to pass to the <paramref name="typeToCreate"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Wrap``1(System.Object)">
            <summary>
            Creates a proxy for the given object that adds interception policies as
            defined in the default configuration source.
            </summary>
            <remarks>
            Despite the name of the <typeparamref name="TInterface"/> parameter, this
            may be any type that the instance is assignable to, including both interfaces
            that it implements and the concrete type of the object.
            </remarks>
            <typeparam name="TInterface">Type of the proxy to return.</typeparam>
            <param name="instance">Instance object to wrap.</param>
            <returns>The proxy for the instance, or the raw object if no policies apply.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjection.Wrap(System.Type,System.Object)">
            <summary>
            Creates a proxy for the given object that adds interception policies as
            defined in the default configuration source.
            </summary>
            <param name="typeToReturn">Type of the proxy to return.</param>
            <param name="instance">Instance object to wrap.</param>
            <returns>The proxy for the instance, or the raw object if no policies apply.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector">
            <summary>
            A non-static facade class that provides the main entry point into the
            Policy Injection Application Block. Methods on this class
            create intercepted objects, or wrap existing instances with
            interceptors.
            </summary>
            <remarks>
            <para>
            This facade can be initialized with either an <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> or an 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>. In the latter case, a new container will be created and it will be disposed
            when the policy injector is disposed.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector"/> class with the supplied configuration source.
            </summary>
            <param name="configurationSource">The configuration source from which to retrieve configuration information.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector"/> class with the supplied service locator.
            </summary>
            <param name="serviceLocator">The service locator from which an <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> can be resolved
            to perform interception.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="serviceLocator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">when an <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> cannot be resolved from the 
            <paramref name="serviceLocator"/>, or the resolved container does not have the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception"/>
            extension.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Wrap``1(System.Object)">
            <summary>
            Creates a proxy for the given object that adds interception policies.
            </summary>
            <remarks>
            Despite the name of the <typeparamref name="TInterface"/> parameter, this
            may be any type that the instance is assignable to, including both interfaces
            that it implements and the concrete type of the object.
            </remarks>
            <typeparam name="TInterface">Type of the proxy to return.</typeparam>
            <param name="instance">Instance object to wrap.</param>
            <returns>The proxy for the instance, or the raw object if no policies apply.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Wrap(System.Type,System.Object)">
            <summary>
            Creates a proxy for the given object that adds interception policies.
            </summary>
            <param name="typeToReturn">Type of the proxy to return.</param>
            <param name="instance">Instance object to wrap.</param>
            <returns>The proxy for the instance, or the raw object if no policies apply.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create``1(System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified for the injector.
            </summary>
            <typeparam name="TObject">Type of object to create.</typeparam>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create``2(System.Object[])">
            <summary>
            Creates a new object of type <typeparamref name="TObject"/> and
            adds interception as needed to match the policies specified for the injector.
            </summary>
            <typeparam name="TObject">Concrete object type to create.</typeparam>
            <typeparam name="TInterface">Type of reference to return. Must be an interface the object implements.</typeparam>
            <param name="args">Arguments to pass to the <typeparamref name="TObject"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create(System.Type,System.Object[])">
            <summary>
            Creates a new object of type <paramref name="typeToCreate"/> and
            adds interception as needed to match the policies specified for the injector.
            </summary>
            <param name="typeToCreate">Type of object to create.</param>
            <param name="args">Arguments to pass to the <paramref name="typeToCreate"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Create(System.Type,System.Type,System.Object[])">
            <summary>
            Creates a new object of type <paramref name="typeToCreate"/> and
            adds interception as needed to match the policies specified for the injector.
            </summary>
            <param name="typeToCreate">Concrete object type to create.</param>
            <param name="typeToReturn">Type of reference to return. Must be an interface the object implements.</param>
            <param name="args">Arguments to pass to the <paramref name="typeToCreate"/> constructor.</param>
            <returns>The intercepted object (or possibly a raw instance if no policies apply).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Dispose">
            <summary>
            Dispose this policy injector.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.PolicyInjector.Dispose(System.Boolean)">
            <summary>
            Dispose this policy injector.
            </summary>
            <param name="disposing"><see langword="true"/> if being called from the IDisposable.Dispose method, 
            <see langword="false"/> if being called from a finalizer.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.AverageCallDurationBaseCounterHelp">
            <summary>
              Looks up a localized string similar to Base counter used to calculate average call time..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.AverageCallDurationCounterHelp">
            <summary>
              Looks up a localized string similar to Tracks the average length of time for a monitored method to complete..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.CallsPerSecondCounterHelp">
            <summary>
              Looks up a localized string similar to Tracks calls / second to the monitored methods..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.CouldNotFindPolicyInConfiguration">
            <summary>
              Looks up a localized string similar to The configuration information for Policy &apos;{0}&apos; can not be found in the configuration source.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.ExceptionAttributeNoSubclassOfAttribute">
            <summary>
              Looks up a localized string similar to Type must be a subclass of System.Attribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.ExceptionsPerSecondCounterHelp">
            <summary>
              Looks up a localized string similar to Tracks the number of exceptions / second thrown by the monitored methods..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.InterceptionNotSupported">
            <summary>
              Looks up a localized string similar to The type {0} is not interceptable..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.NoCategoryErrorMessage">
            <summary>
              Looks up a localized string similar to You must specify the /category=&lt;name&gt;(;&lt;name&gt;) switch on the command line..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.NoHandlersInPolicy">
            <summary>
              Looks up a localized string similar to The policy {0} does not have any handlers..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.NumberOfCallsCounterHelp">
            <summary>
              Looks up a localized string similar to Records the total number of calls to the monitored methods..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.NumberOfExceptionsCounterHelp">
            <summary>
              Looks up a localized string similar to Records the total number of exceptions thrown by the monitored methods..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.PerformanceCounterCategoryHelp">
            <summary>
              Looks up a localized string similar to Performance counters that are updated by the Policy Injection Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.PlaceholderRule">
            <summary>
              Looks up a localized string similar to This rule is not intended to be used directly. Use the rules from the Telerik.Microsoft.Practices.Unity.Interception assembly instead..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.PolicyInjectionSectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration section for Policy Injection cannot be found in the configuration source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.PolicyInjection.Properties.Resources.TracePoliciesApplied">
            <summary>
              Looks up a localized string similar to Injection Policies applied to object..
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator">
            <summary>
            Represents an operator that performs a logical-AND of its
            contained left and right expressions, but only evaluates
            its second expression if the first expression evaluates to true.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator"/>
            class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator"/>
            class with the specified
            </summary>
            <param name="left">The expression that will be evaluated first.</param>
            <param name="right">The expression that will be evaluated last.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator.Left">
            <summary>
            Gets or sets the first expression that will be evaluated -
            the expression to the left of the operator.
            </summary>
            <value>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression"/>.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator.Right">
            <summary>
            Gets or sets the second expression that will be evaluated -
            the expression to the right of the operator.
            </summary>
            <value>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression"/>.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AndOperator.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Performs the logical-AND of the left
            and right expressions.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns>True if both the left and right expressions evaluate to true,
            otherwise false.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnonymousExpression">
            <summary>
            Represents the value of an <see cref="T:System.Security.Principal.IIdentity"/> object
            whose <see cref="P:System.Security.Principal.IIdentity.IsAuthenticated"/> property is false.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnonymousExpression.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnonymousExpression"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnonymousExpression.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the specified 
            <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns><strong>True</strong> if the principal contains
            an anonymous identity, otherwise <strong>false</strong>.</returns>
            <exception cref="T:System.NotSupportedException">This expression
            can only be evaluated against an identity. It has no 
            meaning for a principal's roles because there
            is no common definition of an anonymous role.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnonymousExpression.Evaluate(System.Security.Principal.IIdentity)">
            <summary>
            Evaluates the specified 
            <see cref="T:System.Security.Principal.IIdentity"/>.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IIdentity"/>
            that the current expression will be evaluated against.</param>
            <returns><strong>True</strong> if the identity is
            an anonymous identity, otherwise <strong>false</strong>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnyExpression">
            <summary>
            Represents an expression that evaluates to true
            for any specified principal.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnyExpression.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnyExpression"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnyExpression.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the specified principal and returns
            true if the principal is not null.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns><strong>True</strong> if the principal
            is not null, otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AnyExpression.Evaluate(System.Security.Principal.IIdentity)">
            <summary>
            Evaluates the specified 
            <see cref="T:System.Security.Principal.IIdentity"/>.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IIdentity"/>
            that the current expression will be evaluated against.</param>
            <returns><strong>True</strong> if the identity not null, 
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationFactory">
            <summary>
            Static factory class used to get instances of a specified IAuthorizationProvider
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationFactory.GetAuthorizationProvider">
            <summary>
            Returns the default IAuthorizationProvider instance. 
            Guaranteed to return an intialized IAuthorizationProvider if no exception thrown
            </summary>
            <returns>Default Authorization provider instance.</returns>
            <exception cref="T:System.Configuration.ConfigurationException">Unable to create default IAuthorizationProvider</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationFactory.GetAuthorizationProvider(System.String)">
            <summary>
            Returns the named IAuthorizationProvider instance. Guaranteed to return an initialized IAuthorizationProvider if no exception thrown.
            </summary>
            <param name="authorizationProviderName">Name defined in configuration for the Authorization provider to instantiate</param>
            <returns>Named Authorization provider instance</returns>
            <exception cref="T:System.ArgumentNullException">providerName is null</exception>
            <exception cref="T:System.ArgumentException">providerName is empty</exception>
            <exception cref="T:System.Configuration.ConfigurationException">Could not find instance specified in providerName</exception>
            <exception cref="T:System.InvalidOperationException">Error processing configuration information defined in application configuration file.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider">
            <summary>
            Abstract implementation of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.IAuthorizationProviderInstrumentationProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider"/>.
            </summary>
            <param name="instrumentationProvider">The instrumentation prover to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider.Authorize(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            When implemented in a derived class, Evaluates the specified authority against the specified context.
            </summary>
            <param name="principal">Must be an <see cref="T:System.Security.Principal.IPrincipal"/> object.</param>
            <param name="context">Must be a string that is the name of the rule to evaluate.</param>
            <returns><c>true</c> if the authority is authorized, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider.InstrumentationProvider">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.IAuthorizationProviderInstrumentationProvider"/> instance that defines the logical events used to instrument this Authorization Provider instance.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProviderFactory">
            <summary>
            Provides methods for the creation of
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProviderFactory.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProviderFactory"/> class 
            with the default configuration source.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProviderFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProviderFactory.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProviderFactory"/> class 
            with the given configuration source.</para>
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that should be used to create <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instances.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider">
            <summary>
            Represents an authorization provider that evaluates
            Boolean expressions to determine whether 
            <see cref="T:System.Security.Principal.IPrincipal"/> objects
            are authorized.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider.#ctor(System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationRule})">
            <summary>
            Initialize an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/> class.
            </summary>
            <param name="authorizationRules">The collection of rules.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider.#ctor(System.Collections.Generic.IDictionary{System.String,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationRule},Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.IAuthorizationProviderInstrumentationProvider)">
            <summary>
            Initialize an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/> class.
            </summary>
            <param name="authorizationRules">The collection of rules.</param>
            <param name="instrumentationProvider">The instrumentation prover to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider.Authorize(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Evaluates the specified authority against the specified context.
            </summary>
            <param name="principal">Must be an <see cref="T:System.Security.Principal.IPrincipal"/> object.</param>
            <param name="ruleName">The name of the rule to evaluate.</param>
            <returns><c>true</c> if the expression evaluates to true,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression">
            <summary>
            Represents an operator, operand or expression
            that results in one of two values - true or false.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the current expression against the specified 
            <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> implementation that caches the authenticated session information and
            performs token handling.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.#ctor(System.Int32,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> class.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.#ctor(System.Int32,System.Int32,Telerik.Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.ISecurityCacheProviderInstrumentationProvider)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> class with a specific <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.ISecurityCacheProviderInstrumentationProvider"/>.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.SaveIdentity(System.Security.Principal.IIdentity)">
            <summary>
            Caches an authenticated <see cref="T:System.Security.Principal.IIdentity"/> object.
            </summary>
            <param name="identity">
            <see cref="T:System.Security.Principal.IIdentity"/> object representing an authenticated user.
            </param>
            <returns>Token to identify the cached Identity</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.SaveIdentity(System.Security.Principal.IIdentity,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches an authenticated <see cref="T:System.Security.Principal.IIdentity"/> object using an existing token
            enabling the grouping of related items.
            </summary>
            <param name="identity">
            IIdentity object representing an authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.SavePrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Caches an authenticated IPrincipal object.
            </summary>
            <param name="principal">
            IPrincipal object representing an authenticated user and roles.
            </param>
            <returns>Token to identify the cached IPrincipal object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.SavePrincipal(System.Security.Principal.IPrincipal,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches an authenticated IPrincipal object using an existing token
            enabling the grouping of related items.
            </summary>
            <param name="principal">
            IPrincipal object representing an authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.SaveProfile(System.Object)">
            <summary>
            Caches a profile for an authenticated user.
            </summary>
            <param name="profile">
            Object representing the profile of authenticated user.
            </param>
            <returns>Token to identify the cached Profile object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.SaveProfile(System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches a profile for an authenticated user using an existing token
            (enabling the grouping of related items).
            </summary>
            <param name="profile">
            Object representing the profile of authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.ExpireIdentity(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing IIdentity object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.ExpirePrincipal(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing IPrincipal object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.ExpireProfile(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing Profile object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.GetIdentity(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing IIdentity object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached IIdentity object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.GetPrincipal(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing IPrincipal object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached IPrincipal object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider.GetProfile(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing Profile object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached Profile object</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData">
            <summary>
            Configuration data for the Security Cache.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/> class with 
            a specified name, sliding expiration, absolute expiration and cache manager instance name. 
            </summary>
            <param name="name">The name if the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.CachingStoreProvider"/> instance.</param>
            <param name="slidingExpiration">The number of minutes between the time the added object was last accessed and when that object expires.</param>
            <param name="absoluteExpiration">The number of minutes in which an added object expires and is removed from the cache.</param>
            <param name="cacheManager">The name of the CacheManager instance that is used to store cached items.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData.CacheManager">
            <summary>
            Gets or sets the Caching Application Block Cache instance name.
            </summary>
            <value>Caching Application Block Cache Instance Name.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData.SlidingExpiration">
            <summary>
            Gets or sets the Sliding Session Expiration duration (in minutes).
            </summary>
            <value>Sliding Session Expiration duration</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData.AbsoluteExpiration">
            <summary>
            Gets or sets the Absolute Session Expiration duration (in minutes).
            </summary>
            <value>Absolute Session Expiration duration</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataAbsoluteExpirationDescription">
            <summary>
              Looks up a localized string similar to The number of minutes since the security information was first added to the cache that it will expire. The default is 60 minutes..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataAbsoluteExpirationDisplayName">
            <summary>
              Looks up a localized string similar to Absolute Expiration (minutes).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataCacheManagerDescription">
            <summary>
              Looks up a localized string similar to The name of the Cache Manager configured in the Caching Application Block Cache to use as the security information store..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataCacheManagerDisplayName">
            <summary>
              Looks up a localized string similar to Cache Manager.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataDescription">
            <summary>
              Looks up a localized string similar to A provider that implements a cache for storing security information. It uses the caching mechanism implemented by the Caching Application Block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Security Cache.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Caching Store Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataSlidingExpirationDescription">
            <summary>
              Looks up a localized string similar to The number of minutes since the security information was last accessed that it will expire. The default is 10 minutes..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataSlidingExpirationDisplayName">
            <summary>
              Looks up a localized string similar to Sliding Expiration Time (minutes).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Caching Store Provider ..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.DesignResources.CachingStoreProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider.CacheManagerPropertyName">
            <summary>
            The name of the cache manager property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider.AbsoluteExpirationPropertyName">
            <summary>
            The name of the absolute expiration property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider.SlidingExpirationPropertyName">
            <summary>
            The name of the sliding expriration property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider.#ctor">
            <summary>
            Initialize an instnace of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.Manageability.CachingStoreProviderDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Configuration.CachingStoreProviderData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Properties.Resources.CachingStoreProviderAbsoluteExpirationPartName">
            <summary>
              Looks up a localized string similar to Absolute expiration.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Properties.Resources.CachingStoreProviderCacheManagerPartName">
            <summary>
              Looks up a localized string similar to Cache manager.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Properties.Resources.CachingStoreProviderSlidingExpirationPartName">
            <summary>
              Looks up a localized string similar to Sliding expiration.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.Properties.Resources.SecurityCacheProviderPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for security cache provider &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.SecurityCacheItem">
            <summary>
            Represents an item stored in SecurityCache
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.SecurityCacheItem.Identity">
            <summary>
            The IIdentity to cache.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.SecurityCacheItem.Profile">
            <summary>
            The profile to cache.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.SecurityCacheItem.Principal">
            <summary>
             The IPrincipal to cache.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Cache.CachingStore.SecurityCacheItem.IsRemoveable">
            <devDoc>
            A cache item is deemed removeable if all properties are null
            </devDoc>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData">
            <summary>
            Call handler data describing the information for the authorization call handler
            in configuration.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData.#ctor">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of the call handler.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData.#ctor(System.String,System.Int32)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of the call handler.</param>
            <param name="handlerOrder">Order of the call handler.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData.AuthorizationProvider">
            <summary>
            Authorization provider to use for this call handler.
            </summary>
            <value>The "authorizationProvider" attribute.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData.OperationName">
            <summary>
            Operation name to use for this call handler.
            </summary>
            <value>The "operationName" attribute.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData">
            <summary>
            Represents the common configuration data for all authorization providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initialize an instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData"/> class.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The <see cref="T:System.Type"/> that this element is the configuration for.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData.GetInstrumentationProviderRegistration(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <param name="configurationSource"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>An Expression that creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/></returns>
            <exception cref="T:System.NotImplementedException" />
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleData">
            <summary>
            Represents the configuration data for a
            rule that is governed by an 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleData.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleData.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleData"/> class with the specified name and expression.
            </summary>
            <param name="name">The name of the rule</param>
            <param name="expression">The expression to evaluate.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleData.Expression">
            <summary>
            Gets or sets the expression associated with
            this rule.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData">
            <summary>
            Represents the configuration data for an
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationRuleProvider"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData"/> class.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData.Rules">
            <summary>
            Gets or sets the list of rules associated with
            the provider.
            </summary>
            <value>A collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleData"/>.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <param name="configurationSource"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData">
            <summary>
            Configuration object for Custom Providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomAuthorizationProviderData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomAuthorizationProviderData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomAuthorizationProviderData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomAuthorizationProviderData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomAuthorizationProviderData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomAuthorizationProviderData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData">
            <summary>
            Configuration object for Custom Providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomSecurityCacheProviderData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomSecurityCacheProviderData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomSecurityCacheProviderData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomSecurityCacheProviderData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomSecurityCacheProviderData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.Telerik#Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Telerik#Microsoft#Practices#EnterpriseLibrary#Security#Configuration#CustomSecurityCacheProviderData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomSecurityCacheProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AddSecuritySettings">
            <summary>
              Looks up a localized string similar to Add Security Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataAuthorizationProviderDescription">
             <summary>
               Looks up a localized string similar to The name of the authorization provider instance to use. 
            This must map to a configured Authorization Provider instance in the Security Application Block..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataAuthorizationProviderDisplayName">
            <summary>
              Looks up a localized string similar to Authorization Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataDescription">
             <summary>
               Looks up a localized string similar to A Call Handler that checks if the current user (the security principal for the current thread) has the 
            requisite permission to access the selected object method or property. 
            This handler uses the Security Application Block to check permissions..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataDisplayName">
            <summary>
              Looks up a localized string similar to Authorization Call Handler.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Authorization Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataOperationNameDescription">
             <summary>
               Looks up a localized string similar to The name of the authorization operation, which may include the tokens {method}, {type}, 
            {namespace}, {assembly}, and {appdomain}..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataOperationNameDisplayName">
            <summary>
              Looks up a localized string similar to Operation Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataOrderDescription">
             <summary>
               Looks up a localized string similar to The position of the handler within the policy handler chain, starting from 1. 
            The default value is zero, which means that there is no explicit order specified for the handler 
            in relation to other handlers in the same handler chain..
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataOrderDisplayName">
            <summary>
              Looks up a localized string similar to Order.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Authorization Call Handler..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationCallHandlerDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationProviderDataDescription">
            <summary>
              Looks up a localized string similar to A base class for all authorization providers..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Authorization Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Authorization Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Authorization Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleDataDescription">
            <summary>
              Looks up a localized string similar to A rule that can be evaluated to determine authorization for an operation..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleDataDisplayName">
            <summary>
              Looks up a localized string similar to Authorization Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleDataExpressionDescription">
            <summary>
              Looks up a localized string similar to The authorization rule. This is a string that is a Boolean predicate expression (evaluating it can return True or False)..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleDataExpressionDisplayName">
            <summary>
              Looks up a localized string similar to Rule Expression.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Authorization Rule..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataDescription">
            <summary>
              Looks up a localized string similar to A class that can evaluate rules to determine authorization for a process to execute an operation..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Authorization Rule Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Authorization Rule Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataRulesDescription">
            <summary>
              Looks up a localized string similar to The list of authorization rules associated with this provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataRulesDisplayName">
            <summary>
              Looks up a localized string similar to Rules.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Authorization Rule Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.AuthorizationRuleProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomAuthorizationProviderDataAddCommand">
            <summary>
              Looks up a localized string similar to Custom Authorization Provider (using type picker).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomAuthorizationProviderDataDescription">
            <summary>
              Looks up a localized string similar to A custom implementation of an Authorization Provider, added to Enterprise Library..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomAuthorizationProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Authorization Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomAuthorizationProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Authorization Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomAuthorizationProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomAuthorizationProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Authorization Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomAuthorizationProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomSecurityCacheProviderDataAddCommand">
            <summary>
              Looks up a localized string similar to Custom Security Cache Provider (using type picker).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomSecurityCacheProviderDataDescription">
            <summary>
              Looks up a localized string similar to A custom implementation of a Security Cache Provider, added to Enterprise Library..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomSecurityCacheProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Custom Security Cache Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomSecurityCacheProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Custom Security Cache Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomSecurityCacheProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomSecurityCacheProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Custom Security Cache Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.CustomSecurityCacheProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecurityCacheProviderDataDescription">
            <summary>
              Looks up a localized string similar to Base class for all Security Cache Providers..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecurityCacheProviderDataDisplayName">
            <summary>
              Looks up a localized string similar to Security Cache Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecurityCacheProviderDataNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Security Cache Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecurityCacheProviderDataNameDisplayName">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecurityCacheProviderDataTypeNameDescription">
            <summary>
              Looks up a localized string similar to The fully qualified type name of the Security Cache Provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecurityCacheProviderDataTypeNameDisplayName">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsAuthorizationProvidersDescription">
            <summary>
              Looks up a localized string similar to The list of Authorization Providers configured for the block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsAuthorizationProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Authorization Providers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsDefaultAuthorizationProviderNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Authorization Provider to use if code does not specify a name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsDefaultAuthorizationProviderNameDisplayName">
            <summary>
              Looks up a localized string similar to Default Authorization Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsDefaultSecurityCacheProviderNameDescription">
            <summary>
              Looks up a localized string similar to The name of the Security Cache to use if code does not specify a name..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsDefaultSecurityCacheProviderNameDisplayName">
            <summary>
              Looks up a localized string similar to Default Security Cache Provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsDescription">
            <summary>
              Looks up a localized string similar to Configuration settings for the Security Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsDisplayName">
            <summary>
              Looks up a localized string similar to Security Settings.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsSecurityCacheProvidersDescription">
            <summary>
              Looks up a localized string similar to The list of Security Cache Providers configured for the block..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.DesignResources.SecuritySettingsSecurityCacheProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Security Caches.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.AuthorizationRuleProviderDataManageabilityProvider">
            <summary>
            Represents a manageability provider for authorization rules.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.AuthorizationRuleProviderDataManageabilityProvider.RulesPropertyName">
            <summary>
            The name of the rules property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.AuthorizationRuleProviderDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.AuthorizationRuleProviderDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.AuthorizationRuleProviderDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.AuthorizationRuleProviderDataManageabilityProvider.AddElementAdministrativeTemplateParts(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.AuthorizationRuleProviderDataManageabilityProvider.OverrideWithGroupPolicies(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationRuleProviderData,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.CustomAuthorizationProviderDataManageabilityProvider">
            <summary>
            Provides an implementation for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.CustomAuthorizationProviderData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.CustomAuthorizationProviderDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.CustomAuthorizationProviderDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.CustomSecurityCacheProviderDataManageabilityProvider">
            <summary>
            Represents a manageability provider for custom security cache provider.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.CustomSecurityCacheProviderDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.CustomSecurityCacheProviderDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.AuthorizationProviderPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for authorization provider &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.AuthorizationProvidersCategoryName">
            <summary>
              Looks up a localized string similar to Authorization providers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.AuthorizationRuleProviderRulesPartName">
            <summary>
              Looks up a localized string similar to Rules.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.SecurityCacheProviderPolicyNameTemplate">
            <summary>
              Looks up a localized string similar to Specify settings for security cache provider &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.SecurityCacheProvidersCategoryName">
            <summary>
              Looks up a localized string similar to Security cache providers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.SecuritySectionCategoryName">
            <summary>
              Looks up a localized string similar to Security.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.SecuritySettingsDefaultAuthorizationProviderPartName">
            <summary>
              Looks up a localized string similar to Default authorization provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.SecuritySettingsDefaultSecurityCacheProviderPartName">
            <summary>
              Looks up a localized string similar to Default security cache provider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.Properties.Resources.SecuritySettingsPolicyName">
            <summary>
              Looks up a localized string similar to Specify Security Application Block Settings.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider">
            <summary>
            <para>This type supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Represents the behavior required to provide Group Policy updates for the Security Application Block, and it also manages
            the creation of the ADM template categories and policies required to edit Group Policy Objects for the block.
            </summary>
            <remarks>
            This class performs the actual Group Policy update for the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings"/>
            configuration section. Processing for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData"/> and <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData"/> 
            instances is delegated to <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> objects registered to the 
            configuration object data types.
            </remarks>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
            <seealso cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.DefaultAuthorizationProviderPropertyName">
            <summary>
            The name of the default authorization provider property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.DefaultSecurityCacheProviderPropertyName">
            <summary>
            The name of the default security cache provider property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.AuthorizationProvidersKeyName">
            <summary>
            The name of the authorization provider key property.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.SecurityCacheProvidersKeyName">
            <summary>
            The name of the security cache provider key provider.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.
            </para>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider"/> class with a 
            given set of manageability providers to use when dealing with the configuration authorization and security cache providers.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the Security Application Block.
            </summary>
            <seealso cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Manageability.SecuritySettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationElements(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData">
            <summary>
            Configuration data for the Security Cache.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData"/> class.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The <see cref="T:System.Type"/> that this element is the configuration for.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData.GetInstrumentationProviderRegistration(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <param name="configurationSource"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>An Expression that creates a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/></returns>
            <exception cref="T:System.NotImplementedException" />
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings">
            <summary>
            Represents the configuration data for the 
            security providers.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.SectionName">
            <summary>
            The name of the configuration section for the security providers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.DefaultAuthorizationProviderName">
            <summary>
            The instance name of the default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.DefaultSecurityCacheProviderName">
            <summary>
            The instance name of the default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.AuthorizationProviders">
            <summary>
            <para>Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.AuthorizationProviderData"/>.</para>
            </summary>
            <value>
            <para>The authorization providers available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>authorizationProviders</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.SecurityCacheProviders">
            <summary>
            <para>Gets the collection of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecurityCacheProviderData"/>.</para>
            </summary>
            <value>
            <para>The security cache providers available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>securityCacheProviders</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.GetRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.SecuritySettings.GetUpdatedRegistrations(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Configuration.Unity.SecurityBlockExtension">
            <summary>
            Container extension to the policies required to create the Security Application Block's
            objects described in the configuration file.
            </summary>
            <remarks>This function is now done by the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/>.
            This extension is no longer needed and does nothing.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.GuidToken">
            <summary>
            Implementation of <c>IToken</c> for a <c>Guid</c>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.GuidToken.#ctor">
            <summary>
            Creates a GuidToken with a new <c>Guid</c>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.GuidToken.#ctor(System.Guid)">
            <summary>
            Creates a GuidToken with a defined <c>Guid</c>.
            </summary>
            <param name="guid">User-provided <c>Guid</c></param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.GuidToken.Value">
            <summary>
            Returns the ToString representation of the <c>Guid</c>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider">
            <summary>
            Defines the basic functionality of an authorization provider.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider.Authorize(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Evaluates the specified authority against the specified context.
            </summary>
            <param name="principal">Must be an <see cref="T:System.Security.Principal.IPrincipal"/> object.</param>
            <param name="context">Name of the rule to evaluate.</param>
            <returns><strong>True</strong> if the expression evaluates to true,
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationRule">
            <summary>
            Represents an authorization rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationRule.Name">
            <summary>
            Gets the name of the rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationRule.Expression">
            <summary>
            Gets the expression of the rule.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression">
            <summary>
            Represents an expression that contains the 
            name of an <see cref="T:System.Security.Principal.IIdentity"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression"/> class with
            the specified name.
            </summary>
            <param name="wordExpression">The name of an identity.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression"/> class with
            the specified identity name.
            </summary>
            <param name="identityName">The identity
            name that will be used to match the 
            specified identity during evaluation.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression.Word">
            <summary>
            Gets or sets the name of the identity that the
            specified principal will be evaluated against.
            </summary>
            <value>An identity name.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the specified principal against the
            current expression. 
            </summary>
            <param name="principal">The 
            <see cref="T:System.Security.Principal.IPrincipal"/>
            against which the current expression will be evaluated.</param>
            <returns><strong>True</strong> if the specified
            principal's identity matches this expressions identity,
            otherwise <strong>false</strong>.</returns>
            <remarks>The expression evaluates
            to true if the specified principal's identity has
            the same name as the current <see cref="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IdentityExpression.Word"/>
            property. A case-insensitive string comparison
            is performed.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider">
            <summary>
            Defines the logical events that can be instrumented for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider"/> instances.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.AuthorizationCheckPerformedCounterName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.TotalAuthorizationCheckPerformedCounterName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.AuthorizationCheckFailedCounterName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.TotalAuthorizationCheckFailedCounterName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.PerformanceCountersCategoryName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider"/> instance the events apply on.</param>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="applicationInstanceName">The application instance name</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider"/> instance the events apply on.</param>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="nameFormatter">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter"/> that is used to creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.FireAuthorizationCheckPerformed(System.String,System.String)">
            <summary>
            </summary>
            <param name="identity">The name of the identify which authorization has been checked for.</param>
            <param name="ruleName">The name of the authorization rule that has been evaluated.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.FireAuthorizationCheckFailed(System.String,System.String)">
            <summary>
            </summary>
            <param name="identity">The name of the identify which authorization has been checked for.</param>
            <param name="ruleName">The name of the authorization rule that has been evaluated.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.AuthorizationProviderInstrumentationProvider.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument an <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider"/>'s events.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.DefaultSecurityEventLogger">
            <summary>
            The instrumentation gateway for the Security Application Block when no instances of the objects are involved.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.DefaultSecurityEventLogger.EventLogSourceName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.DefaultSecurityEventLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.DefaultSecurityEventLogger"/> class, specifying whether 
            logging to the event log is allowed.
            </summary>
            <param name="eventLoggingEnabled"><code>true</code> if writing to the event log is allowed, <code>false</code> otherwise.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.DefaultSecurityEventLogger.LogConfigurationError(System.String,System.String,System.Exception)">
            <summary>
            Logs the occurrence of a configuration error for the Enterprise Library Security Application Block through the 
            available instrumentation mechanisms.
            </summary>
            <param name="instanceName">The name of the instance this errors applies to.</param>
            <param name="messageTemplate">The format of the message that describes the error, with as parameter ({0}) the <paramref name="instanceName"/>.</param>
            <param name="exception">The exception raised for the configuration error.</param>
            <exception cref="T:System.FormatException"><paramref name="messageTemplate"/> could not be formatted by <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> given the parameter <paramref name="instanceName"/>.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.IAuthorizationProviderInstrumentationProvider">
            <summary>
            Defines the logical events that can be instrumented for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.AuthorizationProvider"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.IAuthorizationProviderInstrumentationProvider.FireAuthorizationCheckFailed(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="identity">The name of the identify which authorization has been checked for.</param>
            <param name="ruleName">The name of the authorization rule that has been evaluated.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.IAuthorizationProviderInstrumentationProvider.FireAuthorizationCheckPerformed(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="identity">The name of the identify which authorization has been checked for.</param>
            <param name="ruleName">The name of the authorization rule that has been evaluated.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.ISecurityCacheProviderInstrumentationProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.ISecurityCacheProviderInstrumentationProvider.FireSecurityCacheReadPerformed(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityEntityType,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            
            </summary>
            <param name="itemType"></param>
            <param name="token"></param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.NullAuthorizationProviderInstrumentationProvider">
            <summary />
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.NullAuthorizationProviderInstrumentationProvider.FireAuthorizationCheckFailed(System.String,System.String)">
            <summary />
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.NullAuthorizationProviderInstrumentationProvider.FireAuthorizationCheckPerformed(System.String,System.String)">
            <summary />
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.NullSecurityCacheProviderInstrumentationProvider">
            <summary />
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.NullSecurityCacheProviderInstrumentationProvider.FireSecurityCacheReadPerformed(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityEntityType,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary />
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider">
            <summary>
            Defines the logical events that can be instrumented for <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/> instances.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider.SecurityCacheReadPerformedCounterName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider.TotalSecurityCacheReadPerformedCounterName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider.PerfomanceCountersCategoryName">
            <summary>
            Made public for testing purposes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/> instance the events apply on.</param>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="applicationInstanceName">The application instance name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/> instance the events apply on.</param>
            <param name="performanceCountersEnabled"><code>true</code> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><code>true</code> if event log entries should be written.</param>
            <param name="nameFormatter">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter"/> that is used to creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider.FireSecurityCacheReadPerformed(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityEntityType,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            </summary>
            <param name="itemType">The type of item that is read from the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/>.</param>
            <param name="token">The token that was is used to read an item from the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument a <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/>'s events.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider">
            <summary>
            Allows end users to implement their own Security Caches.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.SaveIdentity(System.Security.Principal.IIdentity)">
            <summary>
            Caches an authenticated IIdentity object.
            </summary>
            <param name="identity">
            IIdentity object representing an authenticated user.
            </param>
            <returns>Token to identify the cached Identity</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.SaveIdentity(System.Security.Principal.IIdentity,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches an authenticated IIdentity object using an existing token
            enabling the grouping of related items. 
            </summary>
            <param name="identity">
            IIdentity object representing an authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entities.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.SavePrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Caches an authenticated IPrincipal object. 
            </summary>
            <param name="principal">
            IPrincipal object representing an authenticated user and roles.
            </param>
            <returns>Token to identify the cached IPrincipal object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.SavePrincipal(System.Security.Principal.IPrincipal,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches an authenticated IPrincipal object using an existing token
            enabling the grouping of related items. 
            </summary>
            <param name="principal">
            IPrincipal object representing an authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.SaveProfile(System.Object)">
            <summary>
            Caches a profile for an authenticated user. 
            </summary>
            <param name="profile">
            Object representing the profile of authenticated user.
            </param>
            <returns>Token to identify the cached Profile object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.SaveProfile(System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches a profile for an authenticated user using an existing token
            (enabling the grouping of related items). 
            </summary>
            <param name="profile">
            Object representing the profile of authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.ExpireIdentity(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing IIdentity object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.ExpirePrincipal(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing IPrincipal object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.ExpireProfile(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing Profile object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.GetIdentity(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing IIdentity object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached IIdentity object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.GetPrincipal(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing IPrincipal object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached IPrincipal object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider.GetProfile(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing Profile object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached Profile object</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken">
            <summary>
            Allows end users to implement their own tokens.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken.Value">
            <summary>
            Token contents as a string.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.LexicalAnalyzer">
            <summary>
            Represents a lexical analyzer for Boolean expressions.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.LexicalAnalyzer.#ctor(System.String)">
            <summary>
            The expression to analyze.
            </summary>
            <param name="expression">A Boolean expression.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.LexicalAnalyzer.Current">
            <summary>
            Gets the string value of the current token.
            </summary>
            <returns>The value of the current</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.LexicalAnalyzer.PreviousMatch">
            <summary>
            Gets the previous match of the regular expression.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.LexicalAnalyzer.CurrentMatch">
            <summary>
            Gets the current match of the regular expression.
            </summary>
            <value>A <see cref="T:System.Text.RegularExpressions.Match"/></value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.LexicalAnalyzer.MoveNext">
            <summary>
            Gets the type of the next token.
            </summary>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType"/> value.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.NotOperator">
            <summary>
            Represents the logical negation operator 
            is a unary operator that negates its operand. 
            It returns true if and only if its operand is false.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.NotOperator.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression)">
            <summary>
            Intializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.NotOperator"/> class.
            </summary>
            <param name="expression">The operand that this
            operator will negate.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.NotOperator.Expression">
            <summary>
            Gets or sets the expression that will be negated by the
            current operator.
            </summary>
            <value>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression"/> object.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.NotOperator.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the current expression against the specified 
            <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.OrOperator">
            <summary>
            Represents an operator that performs a logical-OR of its
            contained left and right expressions, but only evaluates
            its second expression if the first expression evaluates to true.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.OrOperator.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.OrOperator"/> class with the
            specified expressions.
            </summary>
            <param name="left">The first expression to evaluate.</param>
            <param name="right">The second expression to evaluate.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.OrOperator.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the current expression against the specified 
            <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns>True or false.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Parser">
            <summary>
            Represents a parser for identity role rule expressions.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Parser.Parse(System.String)">
            <summary>
            Parses the the specified expression into a
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression"/>.
            </summary>
            <param name="expression">An expression.</param>
            <returns>A <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.BooleanExpression"/>
            object that is the root of the parse tree.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Parser.MoveNext">
            <devdoc>Get the next token from the lexer.</devdoc>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Parser.AssertTokenType(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType)">
            <devdoc>Asserts that the current token is 
            of the specified type.</devdoc>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> that checks the Security Application Block for authorization
            before permitting the call to proceed to the target.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IAuthorizationProvider,System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler"/> that checks using the given
            information.
            </summary>
            <param name="provider">Authorization provider.</param>
            <param name="operationName">Operation name to use to check authorization rules.</param>
            <param name="order">Order in which the handler will be executed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Performs the operation of the handler.
            </summary>
            <param name="input">Input to the method call.</param>
            <param name="getNext">Delegate used to get the next delegate in the call handler pipeline.</param>
            <returns>Returns value from the target method, or an <see cref="T:System.UnauthorizedAccessException"/>
            if the call fails the authorization check.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler.AuthorizationProvider">
            <summary>
            Gets the authorization provider to use when performing authorizations.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler.OperationName">
            <summary>
            Gets or sets the security operation name to check with.
            </summary>
            <remarks>The operation name can include tokens. See the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> for the list.
            </remarks>
            <value>operation name.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.PolicyInjection.AuthorizationCallHandler.Order">
            <summary>
            Gets or sets the order in which the handler will be executed
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AddAuthorizationRuleData">
            <summary>
              Looks up a localized string similar to Authorization Rule Expression.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AddAuthorizationRuleDataDescription">
            <summary>
              Looks up a localized string similar to Add an authorization rule expression that defines when the rule takes effect..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AddAuthorizationRuleProviderData">
            <summary>
              Looks up a localized string similar to Authorization Rule.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AddAuthorizationRuleProviderDataDescription">
            <summary>
              Looks up a localized string similar to Adds a new Authorization Rule provider..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AddCustomAuthorizationProviderData">
            <summary>
              Looks up a localized string similar to Custom.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AddCustomAuthorizationProviderDataDescription">
            <summary>
              Looks up a localized string similar to Add a custom authorization provider by selecting its type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AuthorizationCheckFailedHelpResource">
            <summary>
              Looks up a localized string similar to Authorization Requests Denied/sec is the rate at which authorization requests where denied..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AuthorizationCheckPerformedHelpResource">
            <summary>
              Looks up a localized string similar to Authorization Requests/sec is the rate at which authorization requests were received..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AuthorizationFailed">
            <summary>
              Looks up a localized string similar to Authorization failed.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AuthorizationProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Authorization.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.AuthorizationRuleNotFoundMsg">
            <summary>
              Looks up a localized string similar to Authorization rule {0} not found in configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.BlockName">
            <summary>
              Looks up a localized string similar to curity Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ErrorAuthorizationConfigurationFailedMessage">
            <summary>
              Looks up a localized string similar to The error occurred retrieving the configuration for authorization provider instance &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ErrorSecurityCacheConfigurationFailedMessage">
            <summary>
              Looks up a localized string similar to The error occurred retrieving the configuration for security cache provider instance &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionAuthenticationProviderNotFound">
            <summary>
              Looks up a localized string similar to The authentication provider named &apos;{0}&apos; could not be found in configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionAuthorizationProviderNotFound">
            <summary>
              Looks up a localized string similar to The authorization provider named &apos;{0}&apos; could not be found in configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionMustBeImplementedBySubclass">
            <summary>
              Looks up a localized string similar to Must be implemented by subclasses..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionParameterMustImplementType">
            <summary>
              Looks up a localized string similar to Parameter must implement type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionProfileProviderNotFound">
            <summary>
              Looks up a localized string similar to The profile provider named &apos;{0}&apos; could not be found in configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionRolesProviderNotFound">
            <summary>
              Looks up a localized string similar to The roles provider named &apos;{0}&apos; could not be found in configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionSecurityCacheProviderNotFound">
            <summary>
              Looks up a localized string similar to The security cache provider named &apos;{0}&apos; could not be found in configuration..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionTypeForCustomAuthProviderMustDeriveFrom">
            <summary>
              Looks up a localized string similar to The Custom Authentication Provider &apos;{0}&apos; with Type &apos;{1}&apos; must derive from IAuthorizationProvider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.ExceptionTypeForCustomCacheProviderMustDeriveFrom">
            <summary>
              Looks up a localized string similar to The Custom Security Cache Provider &apos;{0}&apos; with Type &apos;{1}&apos; must derive from ISecurityCacheProvider.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.IdentityInvalid">
            <summary>
              Looks up a localized string similar to The provided IIdentity object is incomplete or invalid..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.IdentityIsNull">
            <summary>
              Looks up a localized string similar to The provided IIdentity object is null..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.MissingSection">
            <summary>
              Looks up a localized string similar to The &quot;securityConfiguration&quot; section is not available in the supplied configuration source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.NoDefaultAuthorizationProvider">
            <summary>
              Looks up a localized string similar to There is no default authorization provider defined in the &quot;securityConfiguration&quot; section available in the supplied configuration source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.NoDefaultSecurityCacheProvider">
            <summary>
              Looks up a localized string similar to There is no default security cache provider defined in the &quot;securityConfiguration&quot; section available in the supplied configuration source..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.Or">
            <summary>
              Looks up a localized string similar to or.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.SecurityCacheProvidersDisplayName">
            <summary>
              Looks up a localized string similar to Security Cache.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.SecurityCacheReadPerformedHelpResource">
            <summary>
              Looks up a localized string similar to Security Cache Reads/sec is the rate at which security cache reads were requested..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.SecuritySettingsDisplayName">
            <summary>
              Looks up a localized string similar to Security Application Block.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.TotalAuthorizationCheckFailedHelpResource">
            <summary>
              Looks up a localized string similar to Total Authorization Requests Denied is the total number of authorization requests denied..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.TotalAuthorizationCheckPerformedHelpResource">
            <summary>
              Looks up a localized string similar to Total Authorization Requests is the total number of authorization requests received..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.TotalSecurityCacheReadPerformedHelpResource">
            <summary>
              Looks up a localized string similar to Total Security Cache Reads is the total number of security cache reads requested..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Properties.Resources.UnexpectedTokenMessage">
            <summary>
              Looks up a localized string similar to Found token &quot;{1}&quot; when expecting {0} at position {2}..
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.RoleExpression">
            <summary>
            Represents an expression that contains the 
            name of a role.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.RoleExpression.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.RoleExpression"/>
            class with the specified role name.
            </summary>
            <param name="wordExpression">The name of a role.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.RoleExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.RoleExpression"/> class.
            </summary>
            <param name="roleName">The name of the role
            to include in the expression.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.RoleExpression.Word">
            <summary>
            Gets or sets the name of the role that the
            specified principal will be evaluated against.
            </summary>
            <value>A role name.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.RoleExpression.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the current expression against the specified 
            <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns>True if the princal is in this expression's 
            role, otherwise false.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheFactory">
            <summary>
            Static factory class used to get instances of a specified ISecurityCacheProvider
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheFactory.GetSecurityCacheProvider">
            <summary>
            Returns the default ISecurityCacheProvider instance. 
            Guaranteed to return an intialized ISecurityCacheProvider if no exception thrown
            </summary>
            <returns>Default SecurityCache provider instance.</returns>
            <exception cref="T:System.Configuration.ConfigurationException">Unable to create default <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/></exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheFactory.GetSecurityCacheProvider(System.String)">
            <summary>
            Returns the named ISecurityCacheProvider instance. Guaranteed to return an initialized ISecurityCacheProvider if no exception thrown.
            </summary>
            <param name="securityCacheProviderName">Name defined in configuration for the SecurityCache provider to instantiate</param>
            <returns>Named SecurityCache provider instance</returns>
            <exception cref="T:System.ArgumentNullException">providerName is null</exception>
            <exception cref="T:System.ArgumentException">providerName is empty</exception>
            <exception cref="T:System.Configuration.ConfigurationException">Could not find instance specified in providerName</exception>
            <exception cref="T:System.InvalidOperationException">Error processing configuration information defined in application configuration file.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider">
            <summary>
            Abstract implementation of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/> class. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.ISecurityCacheProviderInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider"/> class. 
            </summary>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.SaveIdentity(System.Security.Principal.IIdentity)">
            <summary>
            Caches an authenticated IIdentity object. There is no implicit
            expiration defined for this item.
            </summary>
            <param name="identity">
            IIdentity object representing an authenticated user.
            </param>
            <returns>Token to identify the cached Identity</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.SaveIdentity(System.Security.Principal.IIdentity,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches an authenticated IIdentity object using an existing token
            enabling the grouping of related items. There is no implicit
            expiration defined for this item.
            </summary>
            <param name="identity">
            IIdentity object representing an authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entities.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.SavePrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Caches an authenticated IPrincipal object. There is no implicit
            expiration defined for this item.
            </summary>
            <param name="principal">
            IPrincipal object representing an authenticated user and roles.
            </param>
            <returns>Token to identify the cached IPrincipal object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.SavePrincipal(System.Security.Principal.IPrincipal,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches an authenticated IPrincipal object using an existing token
            enabling the grouping of related items. There is no implicit
            expiration defined for this item.
            </summary>
            <param name="principal">
            IPrincipal object representing an authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.SaveProfile(System.Object)">
            <summary>
            Caches a profile for an authenticated user. There is no implicit
            expiration defined for this item.
            </summary>
            <param name="profile">
            Object representing the profile of authenticated user.
            </param>
            <returns>Token to identify the cached Profile object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.SaveProfile(System.Object,Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Caches a profile for an authenticated user using an existing token
            (enabling the grouping of related items). There is no implicit
            expiration defined for this item.
            </summary>
            <param name="profile">
            Object representing the profile of authenticated user.
            </param>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.ExpireIdentity(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing IIdentity object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.ExpirePrincipal(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing IPrincipal object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.ExpireProfile(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Purges an existing Profile object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.GetIdentity(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing IIdentity object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached IIdentity object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.GetPrincipal(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing IPrincipal object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached IPrincipal object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.GetProfile(Telerik.Microsoft.Practices.EnterpriseLibrary.Security.IToken)">
            <summary>
            Gets an existing Profile object from the cache.
            </summary>
            <param name="token">
            Token identifying an existing cached entity.
            </param>
            <returns>A cached Profile object</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProvider.InstrumentationProvider">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.Instrumentation.SecurityCacheProviderInstrumentationProvider"/> instance that defines the logical events used to instrument this Security Cache instance.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProviderFactory">
            <summary>
            Provides methods for the creation of
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProviderFactory.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProviderFactory"/> class 
            with the default configuration source.</para>
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProviderFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProviderFactory.#ctor(Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityCacheProviderFactory"/> class 
            with the given configuration source.</para>
            </summary>
            <param name="configurationSource">The <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that should be used to create <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.ISecurityCacheProvider"/> instances.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityEntityType">
            <summary>
            The types of entities supported by Security.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityEntityType.Identity">
            <summary>
            See <see cref="T:System.Security.Principal.IIdentity"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityEntityType.Profile">
            <summary>
            Any object representing the profile of a user.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SecurityEntityType.Principal">
            <summary>
            See <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException">
            <summary>
            The exception that is thrown when a syntax error
            is found in an identity role rule expression.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException"/> class 
            with a specified error message and 
            a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException"/> class with the
            specified message and index.
            </summary>
            <param name="message">The syntax error message.</param>
            <param name="index">The position in the expression where the syntax
            error was found.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException"/> class 
            with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds 
            the serialized object data about the 
            exception being thrown. 
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information 
            about the source or destination. 
            </param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException.Index">
            <summary>
            The position in the expression where the syntax
            error was found.
            </summary>
            <value>The zero-based starting position in the original 
            string where syntax error was found.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.SyntaxException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The SerializationInfo 
            that holds the serialized object data 
            about the exception being thrown. 
            </param>
            <param name="context">
            The StreamingContext that contains contextual 
            information about the source or destination. 
            </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType">
            <summary>
            Specifies the type of a token in an expression.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.InvalidCharacter">
            <summary>
            Invalid character
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.NoToken">
            <summary>
            No token found
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.Or">
            <summary>
            Or token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.And">
            <summary>
            And token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.Identity">
            <summary>
            Identity token 
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.Role">
            <summary>
            Role token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.Not">
            <summary>
            Not token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.Word">
            <summary>
            Word token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.Any">
            <summary>
            Any token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.Anonymous">
            <summary>
            Anonymous token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.LeftParenthesis">
            <summary>
            Left Paren token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.RightParenthesis">
            <summary>
            Right paren token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.QuotedString">
            <summary>
            Quoted string token
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.TokenType.EndOfFile">
            <summary>
            EOF token
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.UserNotFoundException">
            <summary>
            Exception thrown when Active Directory is unable to find the given user
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.UserNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.UserNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.UserNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.UserNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.UserNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression">
            <summary>
            Represents a word value such as a role
            name or identity name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression"/> class.
            </summary>
            <param name="word">A string value that is 
            the name of an identity or role.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression.Value">
            <summary>
            The string value of the word.
            </summary>
            <value>The string from the expression.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression.Evaluate(System.Security.Principal.IPrincipal)">
            <summary>
            Evaluates the current expression against the specified 
            <see cref="T:System.Security.Principal.IPrincipal"/>
            by checking if it is in the role that matches 
            the Value property of the current object.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/>
            that the current expression will be evaluated against.</param>
            <returns>True if the specified principal is in the role, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.EnterpriseLibrary.Security.WordExpression.Evaluate(System.Security.Principal.IIdentity)">
            <summary>
            Evaluates the current expression against the specified 
            <see cref="T:System.Security.Principal.IIdentity"/>
            by checking if its name matches 
            the Value property of the current object.
            </summary>
            <param name="identity">The <see cref="T:System.Security.Principal.IIdentity"/>
            that the current expression will be evaluated against.</param>
            <returns>True if the specified identity's name matches the value of the current expression, otherwise false.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface">
            <summary>
            Stores information about a single <see cref="T:System.Type"/> to be an additional interface for an intercepted object and
            configures a container accordingly.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface"/> with a 
            <see cref="T:System.Type"/>.
            </summary>
            <param name="additionalInterface">A descriptor representing the interception behavior to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterface"/> is
            <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="additionalInterface"/> is not an interface.
            </exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the container to use the represented 
            <see cref="T:System.Type"/> as an additional interface for the supplied parameters.
            </summary>
            <param name="serviceType">Interface being registered.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1">
            <summary>
            Stores information about a single <see cref="T:System.Type"/> to be an additional interface for an intercepted object and
            configures a container accordingly.
            </summary>
            <typeparam name="T">The interface.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior">
            <summary>
            An injection member that lets you specify behaviors that should
            apply to all instances of a type in the container regardless
            of what name it's resolved under.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> that will
            supply the given interception behavior to the container.
            </summary>
            <param name="interceptionBehavior">Behavior to apply to this type.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.#ctor(System.Type,System.String)">
            <summary>
             Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> that will
             resolve the given type/name pair to get the behavior.
            </summary>
            <param name="behaviorType">Type of behavior.</param>
            <param name="name">Name for behavior registration.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> that will
            resolve the given type to get the behavior.
            </summary>
            <param name="behaviorType">Type of behavior.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.GetBehaviorsPolicy(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>
            Get the list of behaviors for the current type so that it can be added to.
            </summary>
            <param name="policies">Policy list.</param>
            <param name="implementationType">Implementation type to set behaviors for.</param>
            <param name="name">Name type is registered under.</param>
            <returns>An instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> so you
            can give the behavior type using generic syntax.
            </summary>
            <typeparam name="TBehavior">Type of the behavior object to apply.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1"/> instance
            that use the given type and name to resolve the behavior object.
            </summary>
            <param name="name">Name of the registration.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1"/> instance
            that uses the given type to resolve the behavior object.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionMember"/> that can be passed to the
            <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])"/> method to specify
            which interceptor to use. This member sets up the default
            interceptor for a type - this will be used regardless of which 
            name is used to resolve the type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>
            Construt a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> instance that,
            when applied to a container, will register the given
            interceptor as the default one.
            </summary>
            <param name="interceptor">Interceptor to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> that, when
            applied to a container, will register the given type as
            the default interceptor. 
            </summary>
            <param name="interceptorType">Type of interceptor.</param>
            <param name="name">Name to use to resolve the interceptor.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> that, when
            applied to a container, will register the given type as
            the default interceptor. 
            </summary>
            <param name="interceptorType">Type of interceptor.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface being registered. If no interface,
            this will be null.</param>
            <param name="implementationType">Type of concrete type being registered.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> so that
            you can specify the interceptor type using generics.
            </summary>
            <typeparam name="TInterceptor"></typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1"/>.
            </summary>
            <param name="name">Name to use when resolving interceptor.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1"/>.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception">
            <summary>
            A Unity container extension that allows you to configure
            whether an object should be intercepted and which mechanism should
            be used to do it, and also provides a convenient set of methods for
            configuring injection for <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/> instances.
            </summary>
            <seealso cref="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)"/>
            <seealso cref="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)"/>
            <seealso cref="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)"/>
            <seealso cref="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)"/>
            <seealso cref="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.AddPolicy(System.String)"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="interceptor">Interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept</typeparam>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Interceptor object to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept</typeparam>
            <param name="interceptor">Interceptor object to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            Set the interceptor for a type, regardless of what name is used to resolve the instances.
            </summary>
            <param name="typeToIntercept">Type to intercept</param>
            <param name="interceptor">Interceptor instance.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor``1(Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            Set the interceptor for a type, regardless of what name is used to resolve the instances.
            </summary>
            <typeparam name="TTypeToIntercept">Type to intercept</typeparam>
            <param name="interceptor">Interceptor instance.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept.</typeparam>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept.</typeparam>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure the default interception settings for a type.
            </summary>
            <param name="typeToIntercept">Type the interception is being configured for.</param>
            <param name="interceptor">The interceptor to use by default.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor``1(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure the default interception settings for a type.
            </summary>
            <typeparam name="TTypeToIntercept">Type the interception is being configured for.</typeparam>
            <param name="interceptor">The interceptor to use by default.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interception.AddPolicy(System.String)">
            <summary>
            Starts the definition of a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/>.
            </summary>
            <param name="policyName">The policy name.</param>
            <returns></returns>
            <remarks>This is a convenient way for defining a new policy and the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/>
            instances and <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> instances that are required by a policy.
            <para/>
            This mechanism is just a shortcut for what can be natively expressed by wiring up together objects
            with repeated calls to the <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])"/> method.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior">
            <summary>
            Stores information about a single <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to be used on an intercepted object and
            configures a container accordingly.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>.
            </summary>
            <param name="interceptionBehavior">The interception behavior to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given type/name pair.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
            <param name="name"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given behavior type.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.GetBehaviorsPolicy(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>
            Get the list of behaviors for the current type so that it can be added to.
            </summary>
            <param name="policies">Policy list.</param>
            <param name="implementationType">Implementation type to set behaviors for.</param>
            <param name="name">Name type is registered under.</param>
            <returns>An instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> that lets you
            specify behavior types using generic syntax.
            </summary>
            <typeparam name="TBehavior">Type of behavior to register.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given behavior type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given type/name pair.
            </summary>
            <param name="name">Name to use to resolve the behavior.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase">
            <summary>
            Base class for injection members that allow you to add
            interception behaviors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>.
            </summary>
            <param name="interceptionBehavior">The interception behavior to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given type/name pair.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
            <param name="name"></param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given behavior type.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the container to use the represented 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> for the supplied parameters.
            </summary>
            <param name="serviceType">Interface being registered.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.GetBehaviorsPolicy(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>
            Get the list of behaviors for the current type so that it can be added to.
            </summary>
            <param name="policies">Policy list.</param>
            <param name="implementationType">Implementation type to set behaviors for.</param>
            <param name="name">Name type is registered under.</param>
            <returns>An instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionMember">
            <summary>
            Stores information about a an intercepted object and configures a container accordingly.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor">
            <summary>
            Stores information about the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> to be used to intercept an object and
            configures a container accordingly.
            </summary>
            <seealso cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> class with an interceptor instance.
            </summary>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is
            <see langword="null"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> class with a given
            name and type that will be resolved to provide interception.
            </summary>
            <param name="interceptorType">Type of the interceptor</param>
            <param name="name">name to use to resolve.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> class with
            a given type that will be resolved to provide interception.
            </summary>
            <param name="interceptorType">Type of the interceptor.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the container to use the represented 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> for the supplied parameters.
            </summary>
            <param name="serviceType">Interface being registered.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1">
            <summary>
            Generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> that lets you specify an interceptor
            type using generic syntax.
            </summary>
            <typeparam name="TInterceptor">Type of interceptor</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1.#ctor">
            <summary>
            Initialize an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1"/> that will
            resolve the given interceptor type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1.#ctor(System.String)">
            <summary>
            Initialize an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1"/> that will
            resolve the given interceptor type and name.
            </summary>
            <param name="name">Name that will be used to resolve the interceptor.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy"/> that accumulates a sequence of 
            <see cref="T:System.Type"/> instances representing the additional interfaces for an intercepted object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy.AdditionalInterfaces">
            <summary>
            Gets the <see cref="T:System.Type"/> instances accumulated by this policy.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy">
            <summary>
            Implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/> that returns a
            pre-created interceptor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy"/>.
            </summary>
            <param name="interceptor">Interceptor to store.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy.GetInterceptor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use.
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy">
            <summary>
            Implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy"/> that returns a precreated
            interceptor object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy"/> that
            uses the given <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/>.
            </summary>
            <param name="interceptor">Interceptor to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy.GetInterceptor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use to create type proxy
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy.ProxyType">
            <summary>
            Cache for proxied type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that returns a sequence of <see cref="T:System.Type"/> 
            instances representing the additional interfaces for an intercepted object.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy.AdditionalInterfaces">
            <summary>
            Gets the <see cref="T:System.Type"/> instances accumulated by this policy.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy">
            <summary>
            An interface that determines when to intercept instances
            and which interceptor to use.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy.GetInterceptor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use.
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that returns a sequence of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> 
            instances for an intercepted object.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy.BehaviorKeys">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> that can be used to resolve the
            behaviors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy.GetEffectiveBehaviors(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> object to be used for the given type and
            interceptor.
            </summary>
            <remarks>
            This method will return a sequence of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>s. These behaviors will
            only be included if their <see cref="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.WillExecute"/> properties are true.
            </remarks>
            <param name="context">Context for the current build operation.</param>
            <param name="interceptor">Interceptor that will be used to invoke the behavior.</param>
            <param name="typeToIntercept">Type that interception was requested on.</param>
            <param name="implementationType">Type that implements the interception.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InstanceInterceptionStrategy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> that intercepts objects
            in the build chain by creating a proxy object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InstanceInterceptionStrategy.PostBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy"/> that accumulates a sequence of 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> instances for an intercepted object.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy.BehaviorKeys">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> that can be used to resolve the
            behaviors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy.GetEffectiveBehaviors(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>
            Get the set of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> object to be used for the given type and
            interceptor.
            </summary>
            <remarks>
            This method will return a sequence of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>s. These behaviors will
            only be included if their <see cref="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.WillExecute"/> properties are true.
            </remarks>
            <param name="context">Context for the current build operation.</param>
            <param name="interceptor">Interceptor that will be used to invoke the behavior.</param>
            <param name="typeToIntercept">Type that interception was requested on.</param>
            <param name="implementationType">Type that implements the interception.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy">
            <summary>
            Interface that controls when and how types get intercepted.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy.GetInterceptor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use to create type proxy
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy.ProxyType">
            <summary>
            Cache for proxied type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/> that will
            resolve the interceptor through the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy"/> that
            will resolve the interceptor using the given build key.
            </summary>
            <param name="buildKey">build key to resolve.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy.GetInterceptor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use.
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy"/> that will
            resolve the interceptor through the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy"/> that
            will resolve the interceptor with the given <paramref name="buildKey"/>.
            </summary>
            <param name="buildKey">The build key to use to resolve.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy.GetInterceptor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use to create type proxy
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy.ProxyType">
            <summary>
            Cache for proxied type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> that hooks up type interception. It looks for
            a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy"/> for the current build key, or the current
            build type. If present, it substitutes types so that that proxy class gets
            built up instead. On the way back, it hooks up the appropriate handlers.
             </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <remarks>In this class, PreBuildUp is responsible for figuring out if the
            class is proxiable, and if so, replacing it with a proxy class.</remarks>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy.PostBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <remarks>In this class, PostBuildUp checks to see if the object was proxyable,
            and if it was, wires up the handlers.</remarks>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition">
            <summary>
            Transient class that supports convenience method for specifying interception policies.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.Container">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> that is currently being
            configured.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.Interception">
            <summary>
            The <see cref="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.Interception"/> extension to which the policy was added.
            </summary>
            <remarks>
            Use this property to start adding a new policy.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.String)">
            <summary>
            Adds a reference to matching rule by name.
            </summary>
            <param name="name">The name for the matching rule.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
            <remarks>
            The details of how the rule should be created by the container must be specified using a 
            standard injection specification mechanism.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>
            Makes <paramref name="instance"/> a matching rule in the current policy.
            </summary>
            <param name="instance">The new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> for the policy.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy, using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> using the specified name
            and makes it available as a matching rule in the current policy.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy, using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy, using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> using the specified name
            and makes it available as a matching rule in the current policy.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> using the specified name
            and makes it available as a matching rule in the current policy, 
            using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.String)">
            <summary>
            Adds a reference to call handler by name.
            </summary>
            <param name="name">The name for the call handler.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
            <remarks>
            The details of how the handler should be created by the container must be specified using a 
            standard injection specification mechanism.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler)">
            <summary>
            Makes <paramref name="instance"/> a call handler in the current policy.
            </summary>
            <param name="instance">The new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> for the policy.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy, using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="name">The name for the injection configuration for the call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy, 
            using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="name">The name for the injection configuration for the call handler.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy, using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="name">The name for the injection configuration for the call handler .</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy, 
            using the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="name">The name for the injection configuration for the call handler .</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept">
            <summary>
            High-level API for performing interception on existing and new objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxyWithAdditionalInterfaces``1(``0,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <typeparamref name="T"/> which wraps 
            the supplied <paramref name="target"/>.
            </summary>
            <typeparam name="T">The type to intercept.</typeparam>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the proxy must implement.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxy``1(``0,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior})">
            <summary>
            Returns a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <typeparamref name="T"/> which wraps
            the supplied <paramref name="target"/>.
            </summary>
            <typeparam name="T">Type to intercept.</typeparam>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxyWithAdditionalInterfaces(System.Type,System.Object,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <paramref name="interceptedType"/> which wraps 
            the supplied <paramref name="target"/>.
            </summary>
            <param name="interceptedType">The type to intercept.</param>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the proxy must implement.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <paramref name="interceptedType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptedType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="interceptedType"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxy(System.Type,System.Object,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior})">
            <summary>
            Returns a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <paramref name="interceptedType"/> which wraps 
            the supplied <paramref name="target"/>.
            </summary>
            <param name="interceptedType">The type to intercept.</param>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <paramref name="interceptedType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptedType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="interceptedType"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstanceWithAdditionalInterfaces``1(Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type},System.Object[])">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the proxy must implement.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <typeparamref name="T"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstance``1(Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Object[])">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <typeparamref name="T"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstanceWithAdditionalInterfaces(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type},System.Object[])">
            <summary>
            Creates a new instance of type <paramref name="type"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the instance must implement.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <paramref name="type"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="type"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstance(System.Type,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Object[])">
            <summary>
            Creates a new instance of type <paramref name="type"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <paramref name="type"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="type"/>.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Intercept.GetAllAdditionalInterfaces(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Computes the array with all the additional interfaces for the interception of an object.
            </summary>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the instance must implement.</param>
            <returns>An array with the required interfaces for </returns>
            <exception cref="T:System.ArgumentException">when the interfaces are not valid.</exception>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest">
            <summary>
            A simple data holder class used to store information about the current
            interception operation that's being set up. Useful for creating behaviors
            that need to know this stuff (especially the PIAB behavior).
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest"/> that
            stores the given <paramref name="interceptor"/>,
            <paramref name="typeToIntercept"/>, and <paramref name="implementationType"/>.
            </summary>
            <param name="interceptor"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> that will be used to
            create the intercepting type or proxy.</param>
            <param name="typeToIntercept">Type that interception was requested on.</param>
            <param name="implementationType">Type of the object that will actually be intercepted.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.Interceptor">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> that will be used to
            create the intercepting type or proxy.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.TypeToIntercept">
            <summary>
            Type that interception was requested on.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.ImplementationType">
            <summary>
            Type of the object that will actually be intercepted.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior">
            <summary>
            Interception behaviors implement this interface and are called for each
            invocation of the pipelines that they're included in.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>
            Implement this method to execute your behavior processing.
            </summary>
            <param name="input">Inputs to the current call to the target.</param>
            <param name="getNext">Delegate to execute to get the next delegate in the behavior chain.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.GetRequiredInterfaces">
            <summary>
            Returns the interfaces required by the behavior for the objects it intercepts.
            </summary>
            <returns>The required interfaces.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.WillExecute">
            <summary>
            Returns a flag indicating if this behavior will actually do anything when invoked.
            </summary>
            <remarks>This is used to optimize interception. If the behaviors won't actually
            do anything (for example, PIAB where no policies match) then the interception
            mechanism can be skipped completely.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InvokeInterceptionBehaviorDelegate">
            <summary>
            This delegate type is the type that points to the next
            method to execute in the current pipeline.
            </summary>
            <param name="input">Inputs to the current method call.</param>
            <param name="getNext">Delegate to get the next interceptor in the chain.</param>
            <returns>Return from the next method in the chain.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate">
            <summary>
            This delegate type is passed to each interceptor's Invoke method.
            Call the delegate to get the next delegate to call to continue
            the chain.
            </summary>
            <returns>Next delegate in the interceptor chain to call.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline">
            <summary>
            The InterceptionBehaviorPipeline class encapsulates a list of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>s
            and manages calling them in the proper order with the right inputs.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.#ctor">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with an empty pipeline.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior})">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with the given collection
            of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/>s.
            </summary>
            <param name="interceptionBehaviors">Collection of interception behaviors to add to the pipeline.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.Count">
            <summary>
            Get the number of interceptors in this pipeline.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.InvokeInterceptionBehaviorDelegate)">
            <summary>
            Execute the pipeline with the given input.
            </summary>
            <param name="input">Input to the method call.</param>
            <param name="target">The ultimate target of the call.</param>
            <returns>Return value from the pipeline.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.Add(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to the pipeline.
            </summary>
            <param name="interceptionBehavior">The interception behavior to add.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy">
            <summary>
            This interface is implemented by all proxy objects, type or instance based.
            It allows for adding interception behaviors.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy.AddInterceptionBehavior(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to the proxy.
            </summary>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to add.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor">
            <summary>
            Base interface for type and instance based interceptor classes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">Type that was specified when this interceptor
            was created (typically an interface).</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo"/> objects.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor">
            <summary>
            Interface for interceptors that generate separate proxy
            objects to implement interception on instances.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor.CreateProxy(System.Type,System.Object,System.Type[])">
            <summary>
            Create a proxy object that provides interception for <paramref name="target"/>.
            </summary>
            <param name="t">Type to generate the proxy of.</param>
            <param name="target">Object to create the proxy for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor">
            <summary>
            An instance interceptor that works by generating a
            proxy class on the fly for a single interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">Type that was specified when this interceptor
            was created (typically an interface).</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:System.Reflection.MethodInfo"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor.CreateProxy(System.Type,System.Object,System.Type[])">
            <summary>
            Create a proxy object that provides interception for <paramref name="target"/>.
            </summary>
            <param name="t">Type to generate the proxy of.</param>
            <param name="target">Object to create the proxy for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator">
            <summary>
            A class used to generate proxy classes for doing interception on
            interfaces.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator"/> that
            can construct an intercepting proxy for the given interface.
            </summary>
            <param name="typeToIntercept">Type of the interface to intercept.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator.CreateProxyType">
            <summary>
            Create the type to proxy the requested interface
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceMethodOverride">
            <summary>
            Represents the implementation of an interface method.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterfaceMethodOverride.BuildAdditionalInterfaceNonImplementedException">
            <summary>
            Used to throw an <see cref="T:System.NotImplementedException"/> for non-implemented methods on the
            additional interfaces.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy">
            <summary>
            This class provides the remoting-based interception mechanism. It is
            invoked by a call on the corresponding TransparentProxy
            object. It routes calls through the handlers as appropriate.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.#ctor(System.Object,System.Type,System.Type[])">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy"/> instance that applies
            the given policies to the given target object.
            </summary>
            <param name="target">Target object to intercept calls to.</param>
            <param name="classToProxy">Type to return as the type being proxied.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.Target">
            <summary>
            Returns the target of this intercepted call.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.AddInterceptionBehavior(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Adds a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to the proxy.
            </summary>
            <param name="interceptor">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.CanCastTo(System.Type,System.Object)">
            <summary>
            Checks whether the proxy that represents the specified object type can be cast to the type represented by the <see cref="T:System.Runtime.Remoting.IRemotingTypeInfo"></see> interface.
            </summary>
            
            <returns>
            true if cast will succeed; otherwise, false.
            </returns>
            
            <param name="fromType">The type to cast to. </param>
            <param name="o">The object for which to check casting. </param>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.TypeName">
            <summary>
            Gets or sets the fully qualified type name of the server object in a <see cref="T:System.Runtime.Remoting.ObjRef"></see>.
            </summary>
            
            <value>
            The fully qualified type name of the server object in a <see cref="T:System.Runtime.Remoting.ObjRef"></see>.
            </value>
            
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" /></PermissionSet>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Executes a method call represented by the <paramref name="msg"/>
            parameter. The CLR will call this method when a method is called
            on the TransparentProxy. This method runs the invocation through
            the call handler pipeline and finally sends it down to the
            target object, and then back through the pipeline. 
            </summary>
            <param name="msg">An <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> object that contains the information
            about the method call.</param>
            <returns>An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/> object contains the
            information about the target method's return value.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInputParameterCollection">
            <summary>
            A class that wraps the inputs of a <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> into the
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInputParameterCollection.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object[])">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInputParameterCollection"/> that wraps the
            given method call and arguments.
            </summary>
            <param name="callMessage">The call message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor">
            <summary>
            An instance interceptor that uses remoting proxies to do the
            interception.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">The intercepted type.</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:System.Reflection.MethodInfo"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor.CreateProxy(System.Type,System.Object,System.Type[])">
            <summary>
            Create a proxy object that provides interception for <paramref name="target"/>.
            </summary>
            <param name="t">Type to generate the proxy of.</param>
            <param name="target">Object to create the proxy for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> that wraps the
            remoting-based <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> in the PIAB call
            interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> implementation that wraps
            the given <paramref name="callMessage"/>, with the given ultimate
            target object.
            </summary>
            <param name="callMessage">Remoting call message object.</param>
            <param name="target">Ultimate target of the method call.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
            <value>The input collection.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Telerik#Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
            <value>The arguments collection.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <value>The invocation context dictionary.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
            <value>The target method base.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <remarks>In this implementation we create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/>.</remarks>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Arguments">
            <summary>
            Gets the collection of arguments being passed to the target.
            </summary>
            <remarks>This method exists becuase the underlying remoting call message
            does not let handlers change the arguments.</remarks>
            <value>Array containing the arguments to the target.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn"/> that wraps the
            remoting call and return messages.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object,System.Object[],System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/> object that contains a
            return value.
            </summary>
            <param name="callMessage">The original call message that invoked the method.</param>
            <param name="returnValue">Return value from the method.</param>
            <param name="arguments">Collections of arguments passed to the method (including the new
            values of any out params).</param>
            <param name="invocationContext">Invocation context dictionary passed into the call.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.#ctor(System.Exception,System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/> object that contains an
            exception thrown by the target.
            </summary>
            <param name="ex">Exception that was thrown.</param>
            <param name="callMessage">The original call message that invoked the method.</param>
            <param name="invocationContext">Invocation context dictionary passed into the call.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
            <value>The output parameter collection.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.ReturnValue">
            <summary>
            Return value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
            <value>The return value.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
            <value>The exception, or null if no exception was thrown.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
            <value>The invocation context dictionary.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.ToMethodReturnMessage">
            <summary>
            Constructs a <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> for the remoting
            infrastructure based on the contents of this object.
            </summary>
            <returns>The <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> instance.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyOutputParameterCollection">
            <summary>
            A class that wraps the outputs of a <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> into the
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyOutputParameterCollection.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object[])">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyOutputParameterCollection"/> that wraps the
            given method call and arguments.
            </summary>
            <param name="callMessage">The call message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo">
            <summary>
            A dumb data holder that returns the methodinfo for both an
            interface method and the method that implements that interface
            method.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo"/> which holds
            the given <see cref="T:System.Reflection.MethodInfo"/> objects.
            </summary>
            <param name="interfaceMethodInfo">MethodInfo for the interface method (may be null if no interface).</param>
            <param name="implementationMethodInfo">MethodInfo for implementing method.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.InterfaceMethodInfo">
            <summary>
            The interface method MethodInfo.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.ImplementationMethodInfo">
            <summary>
            The implementing method MethodInfo.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.Equals(System.Object)">
            <summary>
                                Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
                                The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
            <exception cref="T:System.NullReferenceException">
                                The <paramref name="obj" /> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.GetHashCode">
            <summary>
                                Serves as a hash function for a particular type. 
            </summary>
            <returns>
                                A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.op_Equality(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Standard equals operator
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.op_Inequality(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            standard not equal operator.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.ToString">
            <summary>
                                Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                                A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor">
            <summary>
            Interface for interceptor objects that generate
            proxy types.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor.CreateProxyType(System.Type,System.Type[])">
            <summary>
            Create a type to proxy for the given type <paramref name="t"/>.
            </summary>
            <param name="t">Type to proxy.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>New type that can be instantiated instead of the
            original type t, and supports interception.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy">
            <summary>
             A small implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that returns the
             given <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedConstructor"/> object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.SelectedConstructor)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy"/> instance.
            </summary>
            <param name="selectedConstructor">Information about which constructor to select.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy.SelectConstructor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocationMethods">
            <summary>
            MethodInfo objects for the methods we need to generate
            calls to on IMethodInvocation.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator">
            <summary>
            Class that handles generating the dynamic types used for interception.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator.#ctor(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator"/> that will generate a
            wrapper class for the requested <paramref name="typeToIntercept"/>.
            </summary>
            <param name="typeToIntercept">Type to generate the wrapper for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator.GenerateType">
            <summary>
            Create the wrapper class for the given type.
            </summary>
            <returns>Wrapper type.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InterceptingProxyImplementor">
            <summary>
            This class provides the code needed to implement the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/>
            interface on a class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodOverride">
            <summary>
            Represents the implementation of a method override.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodOverride.BuildAbstractMethodInvokedException">
            <summary>
            Used to throw an <see cref="T:System.NotImplementedException"/> for overrides on abstract methods.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodOverrideParameterMapper">
            <summary>
            This class handles parameter type mapping. When we generate
            a generic method, we need to make sure our parameter type
            objects line up with the generic parameters on the generated
            method, not on the one we're overriding. 
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter">
            <summary>
            A utility class that takes a set of <see cref="T:System.Reflection.MethodInfo"/>s
            and pulls out shadowed methods, only returning the ones that
            are actually accessible to be overriden.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.GroupMethodsByName(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Take the list of methods and put them together into lists index by method name.
            </summary>
            <param name="methodsToSort">Methods to sort through.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.RemoveHiddenOverloads(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Given a list of overloads for a method, return only those methods
            that are actually visible. In other words, if there's a "new SomeType" method
            somewhere, return only the new one, not the one from the base class
            that's now hidden.
            </summary>
            <param name="methods">Sequence of methods to process.</param>
            <returns>Sequence of returned methods.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.GroupOverloadedMethods(System.Collections.Generic.IList{System.Reflection.MethodInfo})">
            <summary>
            Take a semi-randomly ordered set of methods on a type and
            sort them into groups by name and by parameter list.
            </summary>
            <param name="sortedMethods">The list of methods.</param>
            <returns>Sequence of lists of methods, grouped by method name.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.SelectMostDerivedOverload(System.Collections.Generic.IList{System.Reflection.MethodInfo})">
            <summary>
            Given a set of hiding overloads, return only the currently visible one.
            </summary>
            <param name="overloads">The set of overloads.</param>
            <returns>The most visible one.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.DeclarationDepth(System.Reflection.MethodInfo)">
            <summary>
            Given a method, return a value indicating how deeply in the
            inheritance hierarchy the method is declared. Current type = 0,
            parent = 1, grandparent = 2, etc.
            </summary>
            <param name="method">Method to check.</param>
            <returns>Declaration depth</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.CompareMethodInfosByParameterLists(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            A <see cref="T:System.Comparison`1"/> implementation that can compare two <see cref="T:System.Reflection.MethodInfo"/>
            based on their parameter lists.
            </summary>
            <param name="left">First <see cref="T:System.Reflection.MethodInfo"/> to compare.</param>
            <param name="right">Second <see cref="T:System.Reflection.MethodInfo"/> to compare.</param>
            <returns>&lt; 0, 0, or &gt; 0 based on which one is "greater" than the other.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.CompareParameterLists(System.Reflection.ParameterInfo[],System.Reflection.ParameterInfo[])">
            <summary>
            Compare two parameter lists.
            </summary>
            <param name="left">First parameter list.</param>
            <param name="right">Second parameter list.</param>
            <returns>&lt; 0, 0, or &gt; 0.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.CompareParameterInfo(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            Compare two <see cref="T:System.Reflection.ParameterInfo"/> objects by type.
            </summary>
            <param name="left">First <see cref="T:System.Reflection.ParameterInfo"/></param>
            <param name="right">First <see cref="T:System.Reflection.ParameterInfo"/></param>
            <returns>&lt; 0, 0, or &gt; 0</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor">
            <summary>
            A type based interceptor that works by generated a new class
            on the fly that derives from the target class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">The intercepted type.</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:System.Reflection.MethodInfo"/> objects.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor.CreateProxyType(System.Type,System.Type[])">
            <summary>
            Create a type to proxy for the given type <paramref name="t"/>.
            </summary>
            <param name="t">Type to proxy.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>New type that can be instantiated instead of the
            original type t, and supports interception.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation">
            <summary>
            Implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> used
            by the virtual method interceptor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.#ctor(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation"/> instance for the
            given target object and method, passing the <paramref name="parameterValues"/>
            to the target method.
            </summary>
            <param name="target">Object that is target of this invocation.</param>
            <param name="targetMethod">Method on <paramref name="target"/> to call.</param>
            <param name="parameterValues">Values for the parameters.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn"/> used by
            the virtual method interception mechanism.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,System.Object,System.Object[])">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn"/> instance that returns
            a value.
            </summary>
            <param name="originalInvocation">The method invocation.</param>
            <param name="returnValue">Return value (should be null if method returns void).</param>
            <param name="arguments">All arguments (including current values) passed to the method.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,System.Exception)">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn"/> instance for when the target method throws an exception.
            </summary>
            <param name="originalInvocation">The method invocation.</param>
            <param name="exception">Exception that was thrown.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.ReturnValue">
            <summary>
            Returns value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey">
            <summary>
            Key for handler pipelines.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.ForMethod(System.Reflection.MethodBase)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> for the supplied method.
            </summary>
            <param name="methodBase">The method for the key.</param>
            <returns>The new key.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.GetHashCode">
            <summary>
            Calculate a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.op_Equality(Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey,Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey)">
            <summary>
            Compare two <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances for equality.
            </summary>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>True if the values of the keys are the same, else false.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.op_Inequality(Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey,Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey)">
            <summary>
            Compare two <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances for inequality.
            </summary>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>false if the values of the keys are the same, else true.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.Equals(Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey)">
            <summary>
            Compare two <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances.
            </summary>
            <param name="other">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesMatchingRule">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> implementation that fails to match
            if the method in question has the ApplyNoPolicies attribute on it.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check if the <paramref name="member"/> matches this rule.
            </summary>
            <remarks>This rule returns true if the member does NOT have the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesAttribute"/>
            on it, or a containing type doesn't have the attribute.</remarks>
            <param name="member">Member to check.</param>
            <returns>True if the rule matches, false if it doesn't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that matches the assembly name of the
            given member.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule"/> with the given
            assembly name (or partial name).
            </summary>
            <param name="assemblyName">Assembly name to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule"/> that matches
            against the given assembly.
            </summary>
            <param name="assembly">Assembly to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Determines if the supplied <paramref name="member"/> matches the rule.
            </summary>
            <remarks>
            This rule matches if the assembly containing the given <paramref name="member"/>
            matches the name given. The rule used for matches lets you include the parts
            of the assembly name in order. You can specify assembly name only, assembly and version,
            assembly, version and culture, or the fully qualified assembly name.
            </remarks>
            <param name="member">Member to check.</param>
            <returns>true if <paramref name="member"/> is in a matching assembly, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicyMatchingRule">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks to see if the
            member (or type containing that member) have any <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/>s.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks to see if <paramref name="member"/> matches the rule.
            </summary>
            <remarks>Returns true if any <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/>s are present on the method
            or the type containing that method.</remarks>
            <param name="member">Member to check.</param>
            <returns>true if member matches, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks to see if
            the member tested has an arbitrary attribute applied.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule"/>.
            </summary>
            <param name="attributeType">Attribute to match.</param>
            <param name="inherited">If true, checks the base class for attributes as well.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks to see if the given <paramref name="member"/> matches the rule.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if it matches, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule">
            <summary>
            This interface is implemented by the matching rule classes.
            A Matching rule is used to see if a particular policy should
            be applied to a class member.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <param name="member">Member to test.</param>
            <returns>true if the rule applies, false if it doesn't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo">
            <summary>
            Class used for storing information about a single name/ignoreCase
            pair. This class is also used as a base class for other classes that
            need this pair plus some other properties.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.#ctor">
            <summary>
            Constructs an empty <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> object with empty
            string and ignoreCase = false.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> object that matches the given
            string. IgnoreCase is false.
            </summary>
            <param name="nameToMatch">The name to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> object that matches the
            given string, setting the ignoreCase flag to the given value.
            </summary>
            <param name="nameToMatch">The name to match.</param>
            <param name="ignoreCase">true to do case insensitive comparison, false to do case sensitive.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.Match">
            <summary>
            Gets or sets the name to match.
            </summary>
            <value>The name to match.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.IgnoreCase">
            <summary>
            Gets or sets whether to do case sensitive comparisons of Match.
            </summary>
            <value>If false, case sensitive comparison. If true, case insensitive comparisons.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingRuleSet">
            <summary>
            A <cref see="T:MatchingRuleSet"/> is a matching rule that
            is a collection of other matching rules. All the contained
            rules much match for the set to match.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingRuleSet.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests the given member against the ruleset. The member matches
            if all contained rules in the ruleset match against it.
            </summary>
            <remarks>If the ruleset is empty, then Matches passes since no rules failed.</remarks>
            <param name="member">MemberInfo to test.</param>
            <returns>true if all contained rules match, false if any fail.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule">
            <summary>
            A matching rule that matches when the given member name is
            the same as the one supplied in the constructor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member name. Wildcards are allowed.
            </summary>
            <param name="nameToMatch">Name to match against. Comparison is case sensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member name. Wildcards are allowed.
            </summary>
            <param name="nameToMatch">Name to match against.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member names. Wildcards are allowed.
            </summary>
            <param name="namesToMatch">collections of names to match. If any of these patterns match, the rule matches. Comparisons are case sensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member names. Wildcards are allowed.
            </summary>
            <param name="namesToMatch">Collections of names to match. If any of these patterns match, the rule matches. </param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches
            one of the given member names. Wildcards are allowed.
            </summary>
            <param name="matches">List of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> objects containing
            the pattern to match and case sensitivity flag.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check if the given <paramref name="member"/> matches one of this
            object's matching patterns.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if matches, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule">
            <summary>
            Match methods with the given names and method signature.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches methods
            with the given name, with parameter types matching the given list.
            </summary>
            <param name="methodName">Method name to match. Wildcards are allowed.</param>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches methods
            with the given name, with parameter types matching the given list.
            </summary>
            <remarks>Name comparisons are case sensitive.</remarks>
            <param name="methodName">Method name to match. Wildcards are allowed.</param>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches any method
            with parameter types matching the given list.
            </summary>
            <remarks>Name comparisons are case sensitive.</remarks>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches any method
            with parameter types matching the given list.
            </summary>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given method matches the name and signature.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if match, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that matches members in a given namespace. You can
            specify either a single namespace (e.g. <c>System.Data</c>) or a namespace root
            (e.g. <c>System.Data.*</c> to match types in that namespace or below.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/> that matches the given
            namespace.
            </summary>
            <param name="namespaceName">namespace name to match. Comparison is case sensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/> that matches the given
            namespace.
            </summary>
            <param name="namespaceName">namespace name to match.</param>
            <param name="ignoreCase">If false, comparison is case sensitive. If true, comparison is case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/> that matches any of
            the given namespace names.
            </summary>
            <param name="matches">Collection of namespace names to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given <paramref name="member"/> is in a namespace
            matched by any of our given namespace names.
            </summary>
            <param name="member">member to check.</param>
            <returns>True if member is contained in a matching namespace, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo">
            <summary>
            A helper class that encapsulates the name to match, case sensitivity flag,
            and the wildcard rules for matching namespaces.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo"/> that matches the
            given namespace name.
            </summary>
            <param name="match">Namespace name to match.</param>
            <param name="ignoreCase">If false, comparison is case sensitive. If true, comparison is case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo.Matches(System.Type)">
            <summary>
            Check if the given type <paramref name="t"/> is in a matching namespace.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if type is in a matching namespace, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that matches methods that have any parameters
            of the given types.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo})">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule"/> that matches if any of
            the method parameters match ones in the given collection.
            </summary>
            <param name="matches">Collection of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> that
            describes the types to match.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule.ParameterMatches">
            <summary>
            The list of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> describing the parameter types to match.
            </summary>
            <value>The collection of matches.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check the given member to see if it has any matching parameters.
            </summary>
            <param name="member">Member to match.</param>
            <returns>true if member matches, false if it doesn't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind">
            <summary>
            Describes the type of parameter to match.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.Input">
            <summary>
            Input parameter
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.Output">
            <summary>
            Output parameter
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.InputOrOutput">
            <summary>
            Input or output parameter
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.ReturnValue">
            <summary>
            Method return value
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo">
            <summary>
            A class that stores information about a single type to match.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor">
            <summary>
            Creates a new uninitialized <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> matching the given kind of parameter.
            </summary>
            <param name="kind"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> matching the given parameter
            type and kind.
            </summary>
            <param name="nameToMatch">Parameter <see cref="T:System.Type"/> name to match.</param>
            <param name="kind"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor(System.String,System.Boolean,Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> matching the given parameter
            type and kind.
            </summary>
            <param name="nameToMatch">Parameter <see cref="T:System.Type"/> name to match.</param>
            <param name="ignoreCase">If false, compare type names using case-sensitive comparison.
            If true, compare type names using case-insensitive comparison.</param>
            <param name="kind"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.Kind">
            <summary>
            What kind of parameter to match.
            </summary>
            <value><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> indicating which kind of parameters to match.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> implementation that matches properties
            by name. You can match the getter, setter, or both.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches the
            getter or setter of the given property.
            </summary>
            <param name="propertyName">Name of the property. Name comparison is case sensitive. Wildcards are allowed.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches the
            given method of the given property.
            </summary>
            <param name="propertyName">Name of the property. Name comparison is case sensitive. Wildcards are allowed.</param>
            <param name="option">Match the getter, setter, or both.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches the
            given method of the given property.
            </summary>
            <param name="propertyName">Name of the property to match. Wildcards are allowed.</param>
            <param name="option">Match the getter, setter, or both.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, name comparison is case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo})">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches any of the
            given properties.
            </summary>
            <param name="matches">Collection of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> defining which
            properties to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks if the given member matches the rule.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if it matches, false if it does not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption">
            <summary>
            Specifies which methods of a property should be matches by
            the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/>.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption.Get">
            <summary>
            Match the property getter method.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption.Set">
            <summary>
            Match the property setter method.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption.GetOrSet">
            <summary>
            Match either the getter or setter method.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo">
            <summary>
            Information about a property match.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> that matches the get or set methods
            of the given property name, and does a case-sensitive comparison.
            </summary>
            <param name="match">Property name to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> that matches the given methods of
            the given property name, doing a case-sensitive comparison.
            </summary>
            <param name="match">Property name to match.</param>
            <param name="option"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/> specifying which methods of the property to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption,System.Boolean)">
            <summary>
            Construt a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> that matches the given methods of
            the given property name.
            </summary>
            <param name="match">Property name to match.</param>
            <param name="option"><see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/> specifying which methods of the property to match.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, name comparison is case insensitive.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.Option">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/> to use when doing name comparisons on this property.
            </summary>
            <value>Specifies which methods of the property to match.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks to see if a member has a specified
            type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/> that matches
            members with the given return type.
            </summary>
            <param name="returnType">Type to look for.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/> that matches
            the given return type by name.
            </summary>
            <remarks>See the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> class for details on how
            type name matches are done.</remarks>
            <param name="returnTypeName">Type name to match. Name comparisons are case sensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/> that matches
            the given return type by name.
            </summary>
            <remarks>See the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> class for details on how
            type name matches are done.</remarks>
            <param name="returnTypeName">Type name to match.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, comparison
            is case insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given member has a matching return type.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if return types match, false if they don't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttribute">
            <summary>
            A simple attribute used to "tag" classes, methods, or properties with a
            string that can later be matched via the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttribute"/> with the given string.
            </summary>
            <param name="tag">The tag string.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttribute.Tag">
            <summary>
            The string tag for this attribute.
            </summary>
            <value>the tag.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks a member for the presence
            of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttribute"/> on the method, property, or class, and
            that the given string matches.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>, looking for
            the given string. The comparison is case sensitive.
            </summary>
            <param name="tagToMatch">tag string to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>, looking for
            the given string. The comparison is case sensitive if <paramref name="ignoreCase"/> is
            false, case insensitive if <paramref name="ignoreCase"/> is true.
            </summary>
            <param name="tagToMatch">tag string to match.</param>
            <param name="ignoreCase">if false, case-senstive comparison. If true, case-insensitive comparison.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check the given member for the presence of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TagAttribute"/> and
            match the strings.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if tag strings match, false if they don't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule">
            <summary>
            A matching rule that matches when the member is declared
            in the given type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.Type)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that matches the
            given type.
            </summary>
            <param name="type">The type to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that matches types
            with the given name.
            </summary>
            <remarks>Comparisons are case sensitive.</remarks>
            <param name="typeName">Type name to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that matches types
            with the given name, using the given case sensitivity.
            </summary>
            <param name="typeName">Type name to match.</param>
            <param name="ignoreCase">if false, do case-sensitive comparison. If true, do case-insensitive.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that will match
            any of the type names given in the collection of match information.
            </summary>
            <param name="matches">The match information to match.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks if the given member matches any of this object's matches.
            </summary>
            <param name="member">Member to match.</param>
            <returns>True if match, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.Matches(System.Type)">
            <summary>
            Checks if the given type matches any of this object's matches.
            </summary>
            <remarks>Matches may be on the namespace-qualified type name or just the type name.</remarks>
            <param name="t">Type to check.</param>
            <returns>True if it matches, false if it doesn't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline">
            <summary>
            The HandlerPipeline class encapsulates a list of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/>s
            and manages calling them in the proper order with the right inputs.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.#ctor">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with an empty pipeline.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler})">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with the given collection
            of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/>s.
            </summary>
            <param name="handlers">Collection of handlers to add to the pipeline.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.Count">
            <summary>
            Get the number of handlers in this pipeline.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.InvokeHandlerDelegate)">
            <summary>
            Execute the pipeline with the given input.
            </summary>
            <param name="input">Input to the method call.</param>
            <param name="target">The ultimate target of the call.</param>
            <returns>Return value from the pipeline.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler">
            <summary>
            Handlers implement this interface and are called for each
            invocation of the pipelines that they're included in.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Implement this method to execute your handler processing.
            </summary>
            <param name="input">Inputs to the current call to the target.</param>
            <param name="getNext">Delegate to execute to get the next delegate in the handler
            chain.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler.Order">
            <summary>
            Order in which the handler will be executed
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InvokeHandlerDelegate">
            <summary>
            This delegate type is the type that points to the next
            method to execute in the current pipeline.
            </summary>
            <param name="input">Inputs to the current method call.</param>
            <param name="getNext">Delegate to get the next handler in the chain.</param>
            <returns>Return from the next method in the chain.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate">
            <summary>
            This delegate type is passed to each handler's Invoke method.
            Call the delegate to get the next delegate to call to continue
            the chain.
            </summary>
            <returns>Next delegate in the handler chain to call.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation">
            <summary>
            This interface is used to represent the call to a method.
            An implementation of IMethodInvocation is passed to the
            call handlers so that they may manipulate the call
            (typically by changing the parameters) before the final target
            gets called.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn">
            <summary>
            This interface is used to represent the return value from a method.
            An implementation of IMethodReturn is returned by call handlers, and
            each handler can manipulate the parameters, return value, or add an
            exception on the way out.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.ReturnValue">
            <summary>
            Returns value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection">
            <summary>
            This interface represents a list of either input or output
            parameters. It implements a fixed size list, plus a couple
            of other utility methods.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">parameter name.</param>
            <returns>value of the named parameter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.ParameterName(System.Int32)">
            <summary>
            Gets the name of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the name for.</param>
            <returns>Name of the requested parameter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            Gets the ParameterInfo for a particular parameter by index.
            </summary>
            <param name="index">Index for this parameter.</param>
            <returns>ParameterInfo object describing the parameter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.GetParameterInfo(System.String)">
            <summary>
            Gets the ParameterInfo for a particular parameter by name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>ParameterInfo object for the named parameter.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection"/> that wraps a provided array
            containing the argument values.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo">
            <summary>
            An internal struct that maps the index in the arguments collection to the
            corresponding <see cref="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.ParameterInfo"/> about that argument.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.#ctor(System.Int32,System.Reflection.ParameterInfo)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo"/> object linking the
            given index and <see cref="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.ParameterInfo"/> object.
            </summary>
            <param name="index">Index into arguments array (zero-based).</param>
            <param name="parameterInfo"><see cref="F:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.ParameterInfo"/> for the argument at <paramref name="index"/>.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.#ctor(System.Object[],System.Reflection.ParameterInfo[],System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection"/> that wraps the
            given array of arguments.
            </summary>
            <param name="arguments">Complete collection of arguments.</param>
            <param name="argumentInfo">Type information about about each parameter.</param>
            <param name="isArgumentPartOfCollection">A <see cref="T:System.Predicate`1"/> that indicates
            whether a particular parameter is part of the collection. Used to filter out only input
            parameters, for example.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">parameter name.</param>
            <value>value of the named parameter.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Item(System.Int32)">
            <summary>
            Gets the value of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the value for.</param>
            <value>Value of the requested parameter.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            Gets the ParameterInfo for a particular parameter by index.
            </summary>
            <param name="index">Index for this parameter.</param>
            <returns>ParameterInfo object describing the parameter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.GetParameterInfo(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> for the given named parameter.
            </summary>
            <param name="parameterName">Name of parameter.</param>
            <returns><see cref="T:System.Reflection.ParameterInfo"/> for the requested parameter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ParameterName(System.Int32)">
            <summary>
            Gets the name of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the name for.</param>
            <returns>Name of the requested parameter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Add(System.Object)">
            <summary>
            Adds to the collection. This is a read only collection, so this method
            always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Nothing, always throws.</returns>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Contains(System.Object)">
            <summary>
            Checks to see if the collection contains the given object.
            </summary>
            <remarks>Tests for the object using object.Equals.</remarks>
            <param name="value">Object to find.</param>
            <returns>true if object is in collection, false if it is not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Clear">
            <summary>
            Remove all items in the collection. This collection is fixed-size, so this
            method always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">This is always thrown.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of the given object, or -1 if not found.
            </summary>
            <param name="value">Object to find.</param>
            <returns>zero-based index of found object, or -1 if not found.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="value">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Remove(System.Object)">
            <summary>
            Removes the given item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the given item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IsReadOnly">
            <summary>
            Is this collection read only?
            </summary>
            <value>No, it is not read only, the contents can change.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IsFixedSize">
            <summary>
            Is this collection fixed size?
            </summary>
            <value>Yes, it is.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of this collection to the given array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">index to start copying from.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Count">
            <summary>
            Total number of items in the collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.SyncRoot">
            <summary>
            Gets a synchronized version of this collection. WARNING: Not implemented completely,
            DO NOT USE THIS METHOD.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IsSynchronized">
            <summary>
            Is the object synchronized for thread safety?
            </summary>
            <value>No, it isn't.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.GetEnumerator">
            <summary>
            Gets an enumerator object to support the foreach construct.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PipelineManager">
            <summary>
            A collection of <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> objects, indexed
            by <see cref="T:System.Reflection.MethodBase"/>. Returns an empty pipeline if a
            MethodBase is requested that isn't in the dictionary.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PipelineManager.GetPipeline(System.Reflection.MethodBase)">
            <summary>
            Retrieve the pipeline assocated with the requested <paramref name="method"/>.
            </summary>
            <param name="method">The method for which the pipeline is being requested.</param>
            <returns>The handler pipeline for the given method. If no pipeline has
            been set, returns a new empty pipeline.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PipelineManager.SetPipeline(System.Reflection.MethodBase,Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline)">
            <summary>
            Set a new pipeline for a method.
            </summary>
            <param name="method">The method on which the pipeline should be set.</param>
            <param name="pipeline">The new pipeline.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PipelineManager.InitializePipeline(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InterceptionExtension.ICallHandler})">
            <summary>
            Get the pipeline for the given method, creating it if necessary.
            </summary>
            <param name="method">Method to retrieve the pipeline for.</param>
            <param name="handlers">Handlers to initialize the pipeline with</param>
            <returns>True if the pipeline has any handlers in it, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesAttribute">
            <summary>
            Attribute used to indicate that no interception should be applied to
            the attribute target.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy"/> class that reads and constructs handlers
            based on <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/> on the target.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy.DoesMatch(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Derived classes implement this method to calculate if the policy
            will provide any handler to the specified member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if policy applies to this member, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy.DoGetHandlersFor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method to supply the list of handlers for
            this specific member.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Enumerable collection of handlers for this method.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute">
            <summary>
            Base class for handler attributes used in the attribute-driven
            interception policy.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute.CreateHandler(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>A new call handler object.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute.Order">
            <summary>
            Gets or sets the order in which the handler will be executed.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy">
            <summary>
            Base class for Policies that specifies which handlers apply to which methods of an object.
            </summary>
            <remarks>
            <para>This base class always enforces the 
            <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesMatchingRule"/> before
            passing the checks onto derived classes. This way, derived classes do not need to
            worry about implementing this check.</para>
            <para>It also means that derived classes cannot override this rule. This is considered a feature.</para></remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.#ctor">
            <summary>
            Creates a new empty Policy.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.#ctor(System.String)">
            <summary>
            Creates a new empty policy with the given name.
            </summary>
            <param name="name">Name of the policy.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.Name">
            <summary>
            Gets the name of this policy.
            </summary>
            <value>The name of the policy.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.Matches(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Checks if the rules in this policy match the given member info.
            </summary>
            <param name="member">MemberInfo to check against.</param>
            <returns>true if ruleset matches, false if it does not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.GetHandlersFor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Returns ordered collection of handlers in order that apply to the given member.
            </summary>
            <param name="member">Member that may or may not be assigned handlers by this policy.</param>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Collection of handlers (possibly empty) that apply to this member.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.GetMethodSet(System.Reflection.MethodBase)">
            <summary>
            Given a method on an object, return the set of MethodBases for that method,
            plus any inteface methods that the member implements.
            </summary>
            <param name="member">Member to get Method Set for.</param>
            <returns>The set of methods</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.DoesMatch(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Derived classes implement this method to calculate if the policy
            will provide any handler to the specified member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if policy applies to this member, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.DoGetHandlersFor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method to supply the list of handlers for
            this specific member.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Enumerable collection of handlers for this method.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet">
            <summary>
            A collection of Policy objects. The policies within a PolicySet combine using
            an "or" operation.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy[])">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet"/> containing the given policies.
            </summary>
            <param name="policies">Policies to put into the policy set.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet.GetPoliciesFor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Gets the policies that apply to the given member.
            </summary>
            <param name="member">Member to get policies for.</param>
            <returns>Collection of policies that apply to this member.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet.GetPoliciesNotFor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Gets the policies in the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet"/> that do not
            apply to the given member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>Collection of policies that do not apply to <paramref name="member"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet.GetHandlersFor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Gets the handlers that apply to the given member based on all policies in the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicySet"/>.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Collection of call handlers for <paramref name="member"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy">
            <summary>
            A policy is a combination of a matching rule set and a set of handlers.
            If the policy applies to a member, then the handlers will be enabled for
            that member.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule[],System.String[])">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/> object with a set of matching rules
            and the names to use when resolving handlers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.#ctor(System.String,Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule[],System.String[])">
            <summary>
            Creates a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/> object with a name, a set of matching rules
            and the names to use when resolving handlers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.DoesMatch(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Checks if the rules in this policy match the given member info.
            </summary>
            <param name="member">MemberInfo to check against.</param>
            <returns>true if ruleset matches, false if it does not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.DoGetHandlersFor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Return ordered collection of handlers in order that apply to the given member.
            </summary>
            <param name="member">Member that may or may not be assigned handlers by this policy.</param>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Collection of handlers (possibly empty) that apply to this member.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior">
            <summary>
            Interceptor that performs policy injection.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.PipelineManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior"/> with a pipeline manager.
            </summary>
            <param name="pipelineManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PipelineManager"/> for the new instance.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.#ctor(Telerik.Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest,Telerik.Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy[],Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior"/> with the given information
            about what's being intercepted and the current set of injection policies.
            </summary>
            <param name="interceptionRequest">Information about what will be injected.</param>
            <param name="policies">Current injection policies.</param>
            <param name="container">Unity container that can be used to resolve call handlers.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.Invoke(Telerik.Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Telerik.Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>
            Applies the policy injection handlers configured for the invoked method.
            </summary>
            <param name="input">Inputs to the current call to the target.</param>
            <param name="getNext">Delegate to execute to get the next delegate in the handler
            chain.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.GetRequiredInterfaces">
            <summary>
            Returns the interfaces required by the behavior for the objects it intercepts.
            </summary>
            <returns>An empty array of interfaces.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.WillExecute">
            <summary>
            Returns a flag indicating if this behavior will actually do anything when invoked.
            </summary>
            <remarks>This is used to optimize interception. If the behaviors won't actually
            do anything (for example, PIAB where no policies match) then the interception
            mechanism can be skipped completely.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAbstractMethodNotImplemented">
            <summary>
              Looks up a localized string similar to Intercepted abstract method was invoked..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAdditionalInterfaceNotImplemented">
            <summary>
              Looks up a localized string similar to Additional interfaces do not have an implementation..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAdditionalInterfacesInvalid">
            <summary>
              Looks up a localized string similar to The additional interfaces supplied are invalid: {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAttributeNoSubclassOfAttribute">
            <summary>
              Looks up a localized string similar to Type must be a subclass of System.Attribute..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionCannotCreateInstance">
            <summary>
              Looks up a localized string similar to Could not create instance of type {0} with no constructor arguments..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionContainsNullElement">
            <summary>
              Looks up a localized string similar to Collection contains a null element..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionNullInterfacesCollection">
            <summary>
              Looks up a localized string similar to The collection of interfaces is null..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionRequiredInterfacesInvalid">
            <summary>
              Looks up a localized string similar to The required interfaces for behavior {1} are invalid: {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionTypeIsNotInterface">
            <summary>
              Looks up a localized string similar to The type {0} is not an interface..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionTypeIsNull">
            <summary>
              Looks up a localized string similar to Null type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionTypeIsOpenGeneric">
            <summary>
              Looks up a localized string similar to The type {0} is an open generic..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.InterceptionNotSupported">
            <summary>
              Looks up a localized string similar to The type {0} is not interceptable..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.InterfaceMethodNotImplemented">
            <summary>
              Looks up a localized string similar to Could not find the implementation of interface method {0}.{1} in type {2}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.NullBehavior">
            <summary>
              Looks up a localized string similar to Null is not permitted as an interception behavior..
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob">
            <summary>
            A &quot;glob&quot; is a string matching pattern. It is similar to the
            matches available in the file system (*.cs, for example). The Glob
            class implements this string matching.
            </summary>
            <remarks>Glob supports the following metacharacters:
                * - match zero or more characters
                ? - match any one character
            [abc] - match one character if it's in the characters inside the brackets.
            All other characters in the glob are literals.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob"/> instance that matches the given pattern.
            </summary>
            <remarks>
            The pattern match is case sensitive by default.
            </remarks>
            <param name="pattern">Pattern to use. See <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob"/> summary for
            details of the pattern.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob"/> instance that matches the given pattern.
            </summary>
            <param name="pattern">The pattern to use. See <see cref="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob"/> summary for
            details of the patterns supported.</param>
            <param name="caseSensitive">If true, perform a case sensitive match. 
            If false, perform a case insensitive comparison.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.Glob.IsMatch(System.String)">
            <summary>
            Checks to see if the given string matches the pattern.
            </summary>
            <param name="s">String to check.</param>
            <returns>True if it matches, false if it doesn't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper">
            <summary>
            A collection of utility functions to encapsulate details of
            reflection and finding attributes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetPropertyFromMethod(System.Reflection.MethodBase)">
            <summary>
            Given a MethodBase for a property's get or set method,
            return the corresponding property info.
            </summary>
            <param name="method">MethodBase for the property's get or set method.</param>
            <returns>PropertyInfo for the property, or null if method is not part of a property.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetPropertyFromMethod(System.Reflection.MethodInfo)">
            <summary>
            Given a MethodInfo for a property's get or set method,
            return the corresponding property info.
            </summary>
            <param name="method">MethodBase for the property's get or set method.</param>
            <returns>PropertyInfo for the property, or null if method is not part of a property.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Given a particular MemberInfo, return the custom attributes of the
            given type on that member.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="member">The member to look at.</param>
            <param name="inherits">True to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetAllAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Given a particular MemberInfo, find all the attributes that apply to this
            member. Specifically, it returns the attributes on the type, then (if it's a
            property accessor) on the property, then on the member itself.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="member">The member to look at.</param>
            <param name="inherits">true to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.DependencyAttribute">
            <summary>
            This attribute is used to mark properties and parameters as targets for injection.
            </summary>
            <remarks>
            For properties, this attribute is necessary for injection to happen. For parameters,
            it's not needed unless you want to specify additional information to control how
            the parameter is resolved.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyAttribute.#ctor">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyAttribute"/> with no name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyAttribute.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyAttribute"/> with the given name.
            </summary>
            <param name="name">Name to use when resolving this dependency.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.DependencyAttribute.Name">
            <summary>
            The name specified in the constructor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyAttribute.CreateResolver(System.Type)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            will be used to get the value for the member this attribute is
            applied to.
            </summary>
            <param name="typeToResolve">Type of parameter or property that
            this attribute is decoration.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.DependencyResolutionAttribute">
            <summary>
            Base class for attributes that can be placed on parameters
            or properties to specify how to resolve the value for
            that parameter or property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyResolutionAttribute.CreateResolver(System.Type)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            will be used to get the value for the member this attribute is
            applied to.
            </summary>
            <param name="typeToResolve">Type of parameter or property that
            this attribute is decoration.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionConstructorAttribute">
            <summary>
            This attribute is used to indicate which constructor to choose when
            the container attempts to build a type.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionMethodAttribute">
            <summary>
            This attribute is used to mark methods that should be called when
            the container is building an object.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.OptionalDependencyAttribute">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyResolutionAttribute"/> used to mark a dependency
            as optional - the container will try to resolve it, and return null
            if the resolution fails rather than throw.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalDependencyAttribute.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalDependencyAttribute"/> object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalDependencyAttribute.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalDependencyAttribute"/> object that
            specifies a named dependency.
            </summary>
            <param name="name">Name of the dependency.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.OptionalDependencyAttribute.Name">
            <summary>
            Name of the dependency.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalDependencyAttribute.CreateResolver(System.Type)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            will be used to get the value for the member this attribute is
            applied to.
            </summary>
            <param name="typeToResolve">Type of parameter or property that
            this attribute is decoration.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.CompositeResolverOverride">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> that composites other
            ResolverOverride objects. The GetResolver operation then
            returns the resolver from the first child override that
            matches the current context and request.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.CompositeResolverOverride.Add(Telerik.Microsoft.Practices.Unity.ResolverOverride)">
            <summary>
            Add a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> to the collection
            that is checked.
            </summary>
            <param name="newOverride">item to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.CompositeResolverOverride.AddRange(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.ResolverOverride})">
            <summary>
            Add a setof <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>s to the collection.
            </summary>
            <param name="newOverrides">items to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.CompositeResolverOverride.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.CompositeResolverOverride.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.CompositeResolverOverride.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ContainerRegistration">
            <summary>
            Class that returns information about the types registered in a container.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ContainerRegistration.RegisteredType">
            <summary>
            The type that was passed to the <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])"/> method
            as the "from" type, or the only type if type mapping wasn't done.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ContainerRegistration.MappedToType">
            <summary>
            The type that this registration is mapped to. If no type mapping was done, the
            <see cref="P:Telerik.Microsoft.Practices.Unity.ContainerRegistration.RegisteredType"/> property and this one will have the same value.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ContainerRegistration.Name">
            <summary>
            Name the type was registered under. Null for default registration.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ContainerRegistration.LifetimeManagerType">
            <summary>
            The registered lifetime manager instance.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ContainerRegistration.LifetimeManager">
            <summary>
            The lifetime manager for this registration.
            </summary>
            <remarks>
            This property will be null if this registration is for an open generic.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.DependencyOverride">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> class that overrides
            the value injected whenever there is a dependency of the
            given type, regardless of where it appears in the object graph.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyOverride.#ctor(System.Type,System.Object)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyOverride"/> to override
            the given type with the given value.
            </summary>
            <param name="typeToConstruct">Type of the dependency.</param>
            <param name="dependencyValue">Value to use.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyOverride.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.DependencyOverride`1">
            <summary>
            A convenience version of <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyOverride"/> that lets you
            specify the dependency type using generic syntax.
            </summary>
            <typeparam name="T">Type of the dependency to override.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyOverride`1.#ctor(System.Object)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyOverride`1"/> object that will
            override the given dependency, and pass the given value.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.DependencyOverrides">
            <summary>
            A convenience form of <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyOverride"/> that lets you
            specify multiple parameter overrides in one shot rather than having
            to construct multiple objects.
            </summary>
            <remarks>
            This class isn't really a collection, it just implements IEnumerable
            so that we get use of the nice C# collection initializer syntax.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.DependencyOverrides.MakeOverride(System.Type,System.Object)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ChildContainerCreatedEventArgs">
            <summary>
            Event argument class for the <see cref="E:Telerik.Microsoft.Practices.Unity.ExtensionContext.ChildContainerCreated"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ChildContainerCreatedEventArgs.#ctor(Telerik.Microsoft.Practices.Unity.ExtensionContext)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.ChildContainerCreatedEventArgs"/> object with the
            given child container object.
            </summary>
            <param name="childContext">An <see cref="T:Telerik.Microsoft.Practices.Unity.ExtensionContext"/> for the newly created child
            container.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ChildContainerCreatedEventArgs.ChildContainer">
            <summary>
            The newly created child container.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ChildContainerCreatedEventArgs.ChildContext">
            <summary>
            An extension context for the created child container.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ExtensionContext">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.ExtensionContext"/> class provides the means for extension objects
            to manipulate the internal state of the <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/>.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ExtensionContext.Container">
            <summary>
            The container that this context is associated with.
            </summary>
            <value>The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> object.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ExtensionContext.Strategies">
            <summary>
            The strategies this container uses.
            </summary>
            <value>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> that the container uses to build objects.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ExtensionContext.BuildPlanStrategies">
            <summary>
            The strategies this container uses to construct build plans.
            </summary>
            <value>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> that this container uses when creating
            build plans.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ExtensionContext.Policies">
            <summary>
            The policies this container uses.
            </summary>
            <remarks>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> the that container uses to build objects.</remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ExtensionContext.Lifetime">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> that this container uses.
            </summary>
            <value>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> is used to manage <see cref="T:System.IDisposable"/> objects that the container is managing.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ExtensionContext.RegisterNamedType(System.Type,System.String)">
            <summary>
            Store a type/name pair for later resolution.
            </summary>
            <remarks>
            <para>
            When users register type mappings (or other things) with a named key, this method
            allows you to register that name with the container so that when the <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.ResolveAll(System.Type,Telerik.Microsoft.Practices.Unity.ResolverOverride[])"/>
            method is called, that name is included in the list that is returned.
            </para></remarks>
            <param name="t"><see cref="T:System.Type"/> to register.</param>
            <param name="name">Name assocated with that type.</param>
        </member>
        <member name="E:Telerik.Microsoft.Practices.Unity.ExtensionContext.Registering">
            <summary>
            This event is raised when the <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])"/> method,
            or one of its overloads, is called.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.Unity.ExtensionContext.RegisteringInstance">
            <summary>
            This event is raised when the <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterInstance(System.Type,System.String,System.Object,Telerik.Microsoft.Practices.Unity.LifetimeManager)"/> method,
            or one of its overloads, is called.
            </summary>
        </member>
        <member name="E:Telerik.Microsoft.Practices.Unity.ExtensionContext.ChildContainerCreated">
            <summary>
            This event is raised when the <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.CreateChildContainer"/> method is called, providing 
            the newly created child container to extensions to act on as they see fit.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.IUnityContainerExtensionConfigurator">
            <summary>
            Base interface for all extension configuration interfaces.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.IUnityContainerExtensionConfigurator.Container">
            <summary>
            Retrieve the container instance that we are currently configuring.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.NamedEventArgs">
            <summary>
            An EventArgs class that holds a string Name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.NamedEventArgs.#ctor">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.NamedEventArgs"/> with a null name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.NamedEventArgs.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.NamedEventArgs"/> with the given name.
            </summary>
            <param name="name">Name to store.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.NamedEventArgs.Name">
            <summary>
            The name.
            </summary>
            <value>Name used for this event arg object.</value>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.RegisterEventArgs">
            <summary>
            Event argument class for the <see cref="E:Telerik.Microsoft.Practices.Unity.ExtensionContext.Registering"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.RegisterEventArgs.#ctor(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.RegisterEventArgs"/>.
            </summary>
            <param name="typeFrom">Type to map from.</param>
            <param name="typeTo">Type to map to.</param>
            <param name="name">Name for the registration.</param>
            <param name="lifetimeManager"><see cref="P:Telerik.Microsoft.Practices.Unity.RegisterEventArgs.LifetimeManager"/> to manage instances.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.RegisterEventArgs.TypeFrom">
            <summary>
            Type to map from.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.RegisterEventArgs.TypeTo">
            <summary>
            Type to map to.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.RegisterEventArgs.LifetimeManager">
            <summary>
            <see cref="P:Telerik.Microsoft.Practices.Unity.RegisterEventArgs.LifetimeManager"/> to manage instances.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs">
            <summary>
            Event argument class for the <see cref="E:Telerik.Microsoft.Practices.Unity.ExtensionContext.RegisteringInstance"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs.#ctor">
            <summary>
            Create a default <see cref="T:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs.#ctor(System.Type,System.Object,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs"/> instance initialized with the given arguments.
            </summary>
            <param name="registeredType">Type of instance being registered.</param>
            <param name="instance">The instance object itself.</param>
            <param name="name">Name to register under, null if default registration.</param>
            <param name="lifetimeManager"><see cref="P:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs.LifetimeManager"/> object that handles how
            the instance will be owned.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs.RegisteredType">
            <summary>
            Type of instance being registered.
            </summary>
            <value>
            Type of instance being registered.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs.Instance">
            <summary>
            Instance object being registered.
            </summary>
            <value>Instance object being registered</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.RegisterInstanceEventArgs.LifetimeManager">
            <summary>
            <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls ownership of
            this instance.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtension">
            <summary>
            Base class for all <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> extension objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtension.InitializeExtension(Telerik.Microsoft.Practices.Unity.ExtensionContext)">
            <summary>
            The container calls this method when the extension is added.
            </summary>
            <param name="context">A <see cref="T:Telerik.Microsoft.Practices.Unity.ExtensionContext"/> instance that gives the
            extension access to the internals of the container.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.UnityContainerExtension.Container">
            <summary>
            The container this extension has been added to.
            </summary>
            <value>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> that this extension has been added to.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.UnityContainerExtension.Context">
            <summary>
            The <see cref="T:Telerik.Microsoft.Practices.Unity.ExtensionContext"/> object used to manipulate
            the inner state of the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtension.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
            <remarks>
            When overridden in a derived class, this method will modify the given
            <see cref="T:Telerik.Microsoft.Practices.Unity.ExtensionContext"/> by adding strategies, policies, etc. to
            install it's functions into the container.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtension.Remove">
            <summary>
            Removes the extension's functions from the container.
            </summary>
            <remarks>
            <para>
            This method is called when extensions are being removed from the container. It can be
            used to do things like disconnect event handlers or clean up member state. You do not
            need to remove strategies or policies here; the container will do that automatically.
            </para>
            <para>
            The default implementation of this method does nothing.</para>
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.GenericParameter">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> that lets you specify that
            an instance of a generic type parameter should be resolved.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameter.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameter.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="resolutionKey">name to use when looking up in the container.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameter.DoGetResolverPolicy(System.Type,System.String)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToResolve">The actual type to resolve.</param>
            <param name="resolutionKey">The resolution key.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.GenericParameterBase">
            <summary>
            Base class for <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> subclasses that let you specify that
            an instance of a generic type parameter should be resolved.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameterBase.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameterBase.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="resolutionKey">name to use when looking up in the container.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.GenericParameterBase.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameterBase.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameterBase.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericParameterBase.DoGetResolverPolicy(System.Type,System.String)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToResolve">The actual type to resolve.</param>
            <param name="resolutionKey">The resolution key.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.GenericResolvedArrayParameter">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> that lets you specify that
            an array containing the registered instances of a generic type parameter 
            should be resolved.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericResolvedArrayParameter.#ctor(System.String,System.Object[])">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.GenericResolvedArrayParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.GenericResolvedArrayParameter.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericResolvedArrayParameter.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
            <remarks>A type is considered compatible if it is an array type of rank one
            and its element type is a generic type parameter with a name matching this generic
            parameter name configured for the receiver.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.GenericResolvedArrayParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectedMembers">
            <summary>
            A Unity container extension that allows you to configure
            which constructors, properties, and methods get injected
            via an API rather than through attributes.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectedMembers.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
            <remarks>
            When overridden in a derived class, this method will modify the given
            <see cref="T:Telerik.Microsoft.Practices.Unity.ExtensionContext"/> by adding strategies, policies, etc. to
            install it's functions into the container.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor``1(Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type.
            </summary>
            <typeparam name="TTypeToInject">Type the injection is being configured for.</typeparam>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor``1(System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type/name pair.
            </summary>
            <typeparam name="TTypeToInject">Type the injection is being configured for.</typeparam>
            <param name="name">Name of registration</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor(System.Type,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type.
            </summary>
            <param name="typeToInject">Type to configure.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor(System.Type,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type/name pair.
            </summary>
            <param name="typeToInject">Type to configure.</param>
            <param name="name">Name of registration.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type/name pair.
            </summary>
            <param name="serviceType">Type of interface/base class being registered (may be null).</param>
            <param name="implementationType">Type of actual implementation class being registered.</param>
            <param name="name">Name of registration.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionConstructor">
            <summary>
            A class that holds the collection of information
            for a constructor, so that the container can
            be configured to call this constructor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionConstructor.#ctor(System.Object[])">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionConstructor"/> that looks
            for a constructor with the given set of parameters.
            </summary>
            <param name="parameterValues">The values for the parameters, that will
            be converted to <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionConstructor.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Interface registered, ignored in this implementation.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionFactory">
            <summary>
            A class that lets you specify a factory method the container
            will use to create the object.
            </summary>
            <remarks>This is a significantly easier way to do the same
            thing the old static factory extension was used for.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionFactory.#ctor(System.Func{Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionFactory"/> with
            the given factory function.
            </summary>
            <param name="factoryFunc">Factory function.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionFactory.#ctor(System.Func{Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionFactory"/> with
            the given factory function.
            </summary>
            <param name="factoryFunc">Factory function.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionFactory.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface being registered. If no interface,
            this will be null. This parameter is ignored in this implementation.</param>
            <param name="implementationType">Type of concrete type being registered.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionMember">
            <summary>
            Base class for objects that can be used to configure what
            class members get injected by the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionMember.AddPolicies(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="typeToCreate">Type to register.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionMember.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface being registered. If no interface,
            this will be null.</param>
            <param name="implementationType">Type of concrete type being registered.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionMethod">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionMember"/> that configures the
            container to call a method as part of buildup.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionMethod.#ctor(System.String,System.Object[])">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionMethod"/> instance which will configure
            the container to call the given methods with the given parameters.
            </summary>
            <param name="methodName">Name of the method to call.</param>
            <param name="methodParameters">Parameter values for the method.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionMethod.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface registered, ignored in this implementation.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionMethod.MethodNameMatches(System.Reflection.MemberInfo,System.String)">
            <summary>
            A small function to handle name matching. You can override this
            to do things like case insensitive comparisons.
            </summary>
            <param name="targetMethod">MethodInfo for the method you're checking.</param>
            <param name="nameToMatch">Name of the method you're looking for.</param>
            <returns>True if a match, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionParameter">
            <summary>
            A class that holds on to the given value and provides
            the required <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>
            when the container is configured.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameter.#ctor(System.Object)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameter"/> that stores
            the given value, using the runtime type of that value as the
            type of the parameter.
            </summary>
            <param name="parameterValue">Value to be injected for this parameter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameter.#ctor(System.Type,System.Object)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameter"/> that stores
            the given value, associated with the given type.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <param name="parameterValue">Value of the parameter</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionParameter`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameter"/> that makes it a
            little easier to specify the type of the parameter.
            </summary>
            <typeparam name="TParameter">Type of parameter.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameter`1.#ctor(`0)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameter`1"/>.
            </summary>
            <param name="parameterValue">Value for the parameter.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue">
            <summary>
            Base type for objects that are used to configure parameters for
            constructor or method injection, or for getting the value to
            be injected into a property.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.InjectionParameterValue.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameterValue.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameterValue.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameterValue.ToParameters(System.Object[])">
            <summary>
            Convert the given set of arbitrary values to a sequence of InjectionParameterValue
            objects. The rules are: If it's already an InjectionParameterValue, return it. If
            it's a Type, return a ResolvedParameter object for that type. Otherwise return
            an InjectionParameter object for that value.
            </summary>
            <param name="values">The values to build the sequence from.</param>
            <returns>The resulting converted sequence.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionParameterValue.ToParameter(System.Object)">
            <summary>
            Convert an arbitrary value to an InjectionParameterValue object. The rules are: 
            If it's already an InjectionParameterValue, return it. If it's a Type, return a
            ResolvedParameter object for that type. Otherwise return an InjectionParameter
            object for that value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The resulting <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.InjectionProperty">
            <summary>
            This class stores information about which properties to inject,
            and will configure the container accordingly.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionProperty.#ctor(System.String)">
            <summary>
            Configure the container to inject the given property name,
            resolving the value via the container.
            </summary>
            <param name="propertyName">Name of the property to inject.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionProperty.#ctor(System.String,System.Object)">
            <summary>
            Configure the container to inject the given property name,
            using the value supplied. This value is converted to an
            <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> object using the
            rules defined by the <see cref="M:Telerik.Microsoft.Practices.Unity.InjectionParameterValue.ToParameters(System.Object[])"/>
            method.
            </summary>
            <param name="propertyName">Name of property to inject.</param>
            <param name="propertyValue">Value for property.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.InjectionProperty.AddPolicies(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Interface being registered, ignored in this implemenation.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.OptionalGenericParameter">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> that lets you specify that
            an instance of a generic type parameter should be resolved, providing the <see langword="null"/>
            value if resolving fails.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalGenericParameter.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalGenericParameter.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="resolutionKey">name to use when looking up in the container.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalGenericParameter.DoGetResolverPolicy(System.Type,System.String)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToResolve">The actual type to resolve.</param>
            <param name="resolutionKey">The resolution key.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.OptionalParameter">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> that can be passed to
            <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])"/> to configure a
            parameter or property as an optional dependency.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalParameter.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalParameter"/> object that
            specifies the given <paramref name="type"/>.
            </summary>
            <param name="type">Type of the dependency.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalParameter.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalParameter"/> object that
            specifies the given <paramref name="type"/> and <paramref name="name"/>.
            </summary>
            <param name="type">Type of the dependency.</param>
            <param name="name">Name for the dependency.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.OptionalParameter`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalParameter"></see> that lets you
            specify the type of the dependency using generics syntax.
            </summary>
            <typeparam name="T">Type of the dependency.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalParameter`1.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalParameter`1"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalParameter`1.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalParameter`1"/> with the given
            <paramref name="name"/>.
            </summary>
            <param name="name">Name of the dependency.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter">
            <summary>
            A class that stores a type, and generates a 
            resolver object that resolves all the named instances or the
            type registered in a container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter.#ctor(System.Type,System.Object[])">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter"/> that
            resolves to the given element type and collection of element values.
            </summary>
            <param name="elementType">The type of elements to resolve.</param>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter"/> that
            resolves to the given array and element types and collection of element values.
            </summary>
            <param name="arrayParameterType">The type for the array of elements to resolve.</param>
            <param name="elementType">The type of elements to resolve.</param>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter"/> for convenience
            when creating them by hand.
            </summary>
            <typeparam name="TElement">Type of the elements for the array of the parameter.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter`1.#ctor(System.Object[])">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayParameter`1"/> that
            resolves to the given element generic type with the given element values.
            </summary>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ResolvedParameter">
            <summary>
            A class that stores a name and type, and generates a 
            resolver object that resolves the parameter via the
            container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedParameter.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedParameter"/> that
            resolves to the given type.
            </summary>
            <param name="parameterType">Type of this parameter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedParameter.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedParameter"/> that
            resolves the given type and name.
            </summary>
            <param name="parameterType">Type of this parameter.</param>
            <param name="name">Name to use when resolving parameter.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ResolvedParameter`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedParameter"/> for convenience
            when creating them by hand.
            </summary>
            <typeparam name="TParameter">Type of the parameter</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedParameter`1.#ctor">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedParameter`1"/> for the given
            generic type and the default name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedParameter`1.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedParameter`1"/> for the given
            generic type and name.
            </summary>
            <param name="name">Name to use to resolve this parameter.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.TypedInjectionValue">
            <summary>
            A base class for implementing <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> classes
            that deal in explicit types.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TypedInjectionValue.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.TypedInjectionValue"/> that exposes
            information about the given <paramref name="parameterType"/>.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.TypedInjectionValue.ParameterType">
            <summary>
            The type of parameter this object represents.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.TypedInjectionValue.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TypedInjectionValue.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.IUnityContainer">
            <summary>
            Interface defining the behavior of the Unity dependency injection container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RegisterInstance(System.Type,System.String,System.Object,Telerik.Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            </remarks>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="name">Name for registration.</param>
            <param name="lifetime">
            <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.Resolve(System.Type,System.String,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the requested type with the given name from the container.
            </summary>
            <param name="t"><see cref="T:System.Type"/> of object to get from the container.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="resolverOverrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.ResolveAll(System.Type,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Return instances of all registered types requested.
            </summary>
            <remarks>
            <para>
            This method is useful if you've registered multiple types with the same
            <see cref="T:System.Type"/> but different names.
            </para>
            <para>
            Be aware that this method does NOT return an instance for the default (unnamed) registration.
            </para>
            </remarks>
            <param name="t">The type requested.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>Set of objects of type <paramref name="t"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.BuildUp(System.Type,System.Object,System.String,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para></remarks>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">name to use when looking up the typemappings and other configurations.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <paramref name="t"/>).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.Teardown(System.Object)">
            <summary>
            Run an existing object through the container, and clean it up.
            </summary>
            <param name="o">The object to tear down.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.AddExtension(Telerik.Microsoft.Practices.Unity.UnityContainerExtension)">
            <summary>
            Add an extension object to the container.
            </summary>
            <param name="extension"><see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtension"/> to add.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.Configure(System.Type)">
            <summary>
            Resolve access to a configuration interface exposed by an extension.
            </summary>
            <remarks>Extensions can expose configuration interfaces as well as adding
            strategies and policies to the container. This method walks the list of
            added extensions and returns the first one that implements the requested type.
            </remarks>
            <param name="configurationInterface"><see cref="T:System.Type"/> of configuration interface required.</param>
            <returns>The requested extension's configuration interface, or null if not found.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.RemoveAllExtensions">
            <summary>
            Remove all installed extensions from this container.
            </summary>
            <remarks>
            <para>
            This method removes all extensions from the container, including the default ones
            that implement the out-of-the-box behavior. After this method, if you want to use
            the container again you will need to either readd the default extensions or replace
            them with your own.
            </para>
            <para>
            The registered instances and singletons that have already been set up in this container
            do not get removed.
            </para>
            </remarks>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.IUnityContainer.Parent">
            <summary>
            The parent of this container.
            </summary>
            <value>The parent container, or null if this container doesn't have one.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.CreateChildContainer">
            <summary>
            Create a child container.
            </summary>
            <remarks>
            A child container shares the parent's configuration, but can be configured with different
            settings or lifetime.</remarks>
            <returns>The new child container.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.IUnityContainer.Registrations">
            <summary>
            Get a sequence of <see cref="T:Telerik.Microsoft.Practices.Unity.ContainerRegistration"/> that describe the current state
            of the container.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that holds onto the instance given to it.
            When the <see cref="T:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager"/> is disposed,
            the instance is disposed with it.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager.SynchronizedGetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager.SynchronizedSetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager.Dispose(System.Boolean)">
            <summary>
            Standard Dispose pattern implementation. Not needed, but it keeps FxCop happy.
            </summary>
            <param name="disposing">Always true, since we don't have a finalizer.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ExternallyControlledLifetimeManager">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that holds a weak reference to
            it's managed instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ExternallyControlledLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ExternallyControlledLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ExternallyControlledLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.HierarchicalLifetimeManager">
            <summary>
            A special lifetime manager which works like <see cref="T:Telerik.Microsoft.Practices.Unity.ContainerControlledLifetimeManager"/>,
            except that in the presence of child containers, each child gets it's own instance
            of the object, instead of sharing one in the common parent.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.LifetimeManager">
            <summary>
            Base class for Lifetime managers - classes that control how
            and when instances are created by the Unity container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.LifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.LifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.LifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.LifetimeManagerFactory">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy"/> that
            creates instances of the type of the given Lifetime Manager
            by resolving them through the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.LifetimeManagerFactory.#ctor(Telerik.Microsoft.Practices.Unity.ExtensionContext,System.Type)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManagerFactory"/> that will
            return instances of the given type, creating them by
            resolving through the container.
            </summary>
            <param name="containerContext">Container to resolve with.</param>
            <param name="lifetimeType">Type of LifetimeManager to create.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.LifetimeManagerFactory.CreateLifetimePolicy">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.LifetimeManagerFactory.LifetimeType">
            <summary>
            The type of Lifetime manager that will be created by this factory.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager">
            <summary>
            This is a custom lifetime manager that acts like <see cref="T:Telerik.Microsoft.Practices.Unity.TransientLifetimeManager"/>,
            but also provides a signal to the default build plan, marking the type so that
            instances are reused across the build up object graph.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager"/> object that does not
            itself manage an instance.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager.#ctor(System.Object)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager"/> object that stores the
            give value. This value will be returned by <see cref="M:Telerik.Microsoft.Practices.Unity.LifetimeManager.GetValue"/>
            but is not stored in the lifetime manager, nor is the value disposed.
            This Lifetime manager is intended only for internal use, which is why the
            normal <see cref="M:Telerik.Microsoft.Practices.Unity.LifetimeManager.SetValue(System.Object)"/> method is not used here.
            </summary>
            <param name="value">Value to store.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later. In this class,
            this is a noop, since it has special hooks down in the guts.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerResolveLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store. Noop in this class.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.PerThreadLifetimeManager">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that holds the instances given to it, 
            keeping one instance per thread.
            </summary>
            <remarks>
            <para>
            This LifetimeManager does not dispose the instances it holds.
            </para>
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerThreadLifetimeManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.PerThreadLifetimeManager"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerThreadLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy for the 
            current thread.
            </summary>
            <returns>the object desired, or <see langword="null"/> if no such object is currently 
            stored for the current thread.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerThreadLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later when requested
            in the current thread.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PerThreadLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
            <remarks>Not implemented for this lifetime manager.</remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager">
            <summary>
            Base class for Lifetime managers which need to synchronize calls to
            <see cref="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/>.
            </summary>
            <remarks>
            <para>
            The purpose of this class is to provide a basic implementation of the lifetime manager synchronization pattern.
            </para>
            <para>
            Calls to the <see cref="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/> method of a <see cref="T:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager"/> 
            instance acquire a lock, and if the instance has not been initialized with a value yet the lock will only be released 
            when such an initialization takes place by calling the <see cref="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.SetValue(System.Object)"/> method or if 
            the build request which resulted in the call to the GetValue method fails.
            </para>
            </remarks>
            <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
            <remarks>Calls to this method acquire a lock which is released only if a non-null value
            has been set for the lifetime manager.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.SynchronizedGetValue">
            <summary>
            Performs the actual retrieval of a value from the backing store associated 
            with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
            <remarks>This method is invoked by <see cref="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/>
            after it has acquired its lock.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
            <remarks>Setting a value will attempt to release the lock acquired by 
            <see cref="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/>.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.SynchronizedSetValue(System.Object)">
            <summary>
            Performs the actual storage of the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
            <remarks>This method is invoked by <see cref="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.SetValue(System.Object)"/>
            before releasing its lock.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.SynchronizedLifetimeManager.Recover">
            <summary>
            A method that does whatever is needed to clean up
            as part of cleaning up after an exception.
            </summary>
            <remarks>
            Don't do anything that could throw in this method,
            it will cause later recover operations to get skipped
            and play real havoc with the stack trace.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.TransientLifetimeManager">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> implementation that does nothing,
            thus ensuring that instances are created new every time.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TransientLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TransientLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TransientLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ArrayResolutionStrategy">
            <summary>
            This strategy implements the logic that will call container.ResolveAll
            when an array parameter is detected.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ArrayResolutionStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Do the PreBuildUp stage of construction. This is where the actual work is performed.
            </summary>
            <param name="context">Current build context.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityConstructorSelectorPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that is
            aware of the build keys used by the Unity container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityConstructorSelectorPolicy.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <remarks>
            This implementation looks for the Unity <see cref="T:Telerik.Microsoft.Practices.Unity.DependencyAttribute"/> on the
            parameter and uses it to create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy"/>
            for this parameter.</remarks>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityMethodSelectorPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/> that is aware
            of the build keys used by the Unity container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityMethodSelectorPolicy.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityPropertySelectorPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/> that is aware of
            the build keys used by the unity container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityPropertySelectorPolicy.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> implementation that returns
            the value set in the constructor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy.#ctor(System.Object)">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy"/>
            which will return the given value when resolved.
            </summary>
            <param name="dependencyValue">The value to return.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy.Resolve(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that stores a
            type and name, and at resolution time puts them together into a
            <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.#ctor(System.Type,System.String)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy"/>
            with the given type and name.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name (may be null).</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Resolve the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Type">
            <summary>
            The type that this resolver resolves.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Name">
            <summary>
            The name that this resolver resolves.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that selects
            the given constructor and creates the appropriate resolvers to call it with
            the specified parameters.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy.#ctor(System.Reflection.ConstructorInfo,Telerik.Microsoft.Practices.Unity.InjectionParameterValue[])">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy"/> that
            will return the given constructor, being passed the given injection values
            as parameters.
            </summary>
            <param name="ctor">The constructor to call.</param>
            <param name="parameterValues">Set of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> objects
            that describes how to obtain the values for the constructor parameters.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy.SelectConstructor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMemberSelectorHelper">
            <summary>
            Helper class for implementing selector policies that need to
            set up dependency resolver policies.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMemberSelectorHelper.AddParameterResolvers(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InjectionParameterValue},Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters)">
            <summary>
            Add dependency resolvers to the parameter set.
            </summary>
            <param name="typeToBuild">Type that's currently being built (used to resolve open generics).</param>
            <param name="policies">PolicyList to add the resolvers to.</param>
            <param name="parameterValues">Objects supplying the dependency resolvers.</param>
            <param name="result">Result object to store the keys in.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMethodsSelectorPolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/> implementation that calls the specific
            methods with the given parameters.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMethodsSelectorPolicy.AddMethodAndParameters(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InjectionParameterValue})">
            <summary>
            Add the given method and parameter collection to the list of methods
            that will be returned when the selector's <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>
            method is called.
            </summary>
            <param name="method">Method to call.</param>
            <param name="parameters">sequence of <see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> objects
            that describe how to create the method parameter values.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMethodsSelectorPolicy.SelectMethods(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy">
            <summary>
            An implemnetation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/> which returns
            the set of specific properties that the selector was configured with.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy.AddPropertyAndValue(System.Reflection.PropertyInfo,Telerik.Microsoft.Practices.Unity.InjectionParameterValue)">
            <summary>
            Add a property that will be par of the set returned when the 
            <see cref="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy.SelectProperties(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)"/> is called.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value"><see cref="T:Telerik.Microsoft.Practices.Unity.InjectionParameterValue"/> object describing
            how to create the value to inject.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy.SelectProperties(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage">
            <summary>
            The build stages we use in the Unity container
            strategy pipeline.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Setup">
            <summary>
            First stage. By default, nothing happens here.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.TypeMapping">
            <summary>
            Second stage. Type mapping occurs here.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Lifetime">
            <summary>
            Third stage. lifetime managers are checked here,
            and if they're available the rest of the pipeline is skipped.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.PreCreation">
            <summary>
            Fourth stage. Reflection over constructors, properties, etc. is
            performed here.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Creation">
            <summary>
            Fifth stage. Instance creation happens here.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Initialization">
            <summary>
            Sixth stage. Property sets and method injection happens here.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.PostInitialization">
            <summary>
            Seventh and final stage. By default, nothing happens here.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.HierarchicalLifetimeStrategy">
            <summary>
            A strategy that handles Hierarchical lifetimes across a set of parent/child
            containers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.HierarchicalLifetimeStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that will attempt to
            resolve a value, and return null if it cannot rather than throwing.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy"/> object
            that will attempt to resolve the given name and type from the container.
            </summary>
            <param name="type">Type to resolve. Must be a reference type.</param>
            <param name="name">Name to resolve with.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy"/> object
            that will attempt to resolve the given type from the container.
            </summary>
            <param name="type">Type to resolve. Must be a reference type.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.DependencyType">
            <summary>
            Type this resolver will resolve.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.Name">
            <summary>
            Name this resolver will resolve.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.Resolve(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that resolves to
            to an array populated with the values that result from resolving other instances
            of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy.#ctor(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy[])">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy"/>
            with the given type and a collection of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>
            instances to use when populating the result.
            </summary>
            <param name="elementType">The type.</param>
            <param name="elementPolicies">The resolver policies to use when populating an array.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy.Resolve(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Resolve the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>An array pupulated with the results of resolving the resolver policies.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.OverrideCollection`3">
            <summary>
            Base helper class for creating collections of <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> objects
            for use in passing a bunch of them to the resolve call. This base class provides
            the mechanics needed to allow you to use the C# collection initializer syntax.
            </summary>
            <typeparam name="TOverride">Concrete type of the <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> this class collects.</typeparam>
            <typeparam name="TKey">Key used to create the underlying override object.</typeparam>
            <typeparam name="TValue">Value that the override returns.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)">
            <summary>
            Add a new override to the collection with the given key and value.
            </summary>
            <param name="key">Key - for example, a parameter or property name.</param>
            <param name="value">Value - the value to be returned by the override.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.MakeOverride(`1,`2)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ParameterOverride">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> class that lets you
            override a named parameter passed to a constructor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ParameterOverride.#ctor(System.String,System.Object)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.Unity.ParameterOverride"/> object that will
            override the given named constructor parameter, and pass the given
            value.
            </summary>
            <param name="parameterName">Name of the constructor parameter.</param>
            <param name="parameterValue">Value to pass for the constructor.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ParameterOverride.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ParameterOverrides">
            <summary>
            A convenience form of <see cref="T:Telerik.Microsoft.Practices.Unity.ParameterOverride"/> that lets you
            specify multiple parameter overrides in one shot rather than having
            to construct multiple objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ParameterOverrides.MakeOverride(System.String,System.Object)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.AmbiguousInjectionConstructor">
            <summary>
              Looks up a localized string similar to The type {0} has multiple constructors of length {1}. Unable to disambiguate..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ArgumentMustNotBeEmpty">
            <summary>
              Looks up a localized string similar to The provided string argument must not be empty..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.BuildFailedException">
            <summary>
              Looks up a localized string similar to The current build operation (build key {2}) failed: {3} (Strategy type {0}, index {1}).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotConstructInterface">
            <summary>
              Looks up a localized string similar to The current type, {0}, is an interface and cannot be constructed. Are you missing a type mapping?.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotExtractTypeFromBuildKey">
            <summary>
              Looks up a localized string similar to Cannot extract type from build key {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotInjectGenericMethod">
            <summary>
              Looks up a localized string similar to The method {0}.{1}({2}) is an open generic method. Open generic methods cannot be injected..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotInjectIndexer">
            <summary>
              Looks up a localized string similar to The property {0} on type {1} is an indexer. Indexed properties cannot be injected..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotInjectMethodWithOutParam">
            <summary>
              Looks up a localized string similar to The method {1} on type {0} has an out parameter. Injection cannot be performed..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotInjectMethodWithOutParams">
            <summary>
              Looks up a localized string similar to The method {0}.{1}({2}) has at least one out parameter. Methods with out parameters cannot be injected..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotInjectMethodWithRefParams">
            <summary>
              Looks up a localized string similar to The method {0}.{1}({2}) has at least one ref parameter.Methods with ref parameters cannot be injected..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotInjectOpenGenericMethod">
            <summary>
              Looks up a localized string similar to The method {1} on type {0} is marked for injection, but it is an open generic method. Injection cannot be performed..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotInjectStaticMethod">
            <summary>
              Looks up a localized string similar to The method {0}.{1}({2}) is static. Static methods cannot be injected..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.CannotResolveOpenGenericType">
            <summary>
              Looks up a localized string similar to The type {0} is an open generic type. An open generic type cannot be resolved..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ConstructorArgumentResolveOperation">
            <summary>
              Looks up a localized string similar to Resolving parameter &quot;{0}&quot; of constructor {1}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ConstructorParameterResolutionFailed">
            <summary>
              Looks up a localized string similar to The parameter {0} could not be resolved when attempting to call constructor {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ExceptionNullParameterValue">
            <summary>
              Looks up a localized string similar to Parameter type inference does not work for null values. Indicate the parameter type explicitly using a properly configured instance of the InjectionParameter or InjectionParameter&lt;T&gt; classes..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.InvokingConstructorOperation">
            <summary>
              Looks up a localized string similar to Calling constructor {0}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.InvokingMethodOperation">
            <summary>
              Looks up a localized string similar to Calling method {0}.{1}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.KeyAlreadyPresent">
            <summary>
              Looks up a localized string similar to An item with the given key is already present in the dictionary..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.LifetimeManagerInUse">
            <summary>
              Looks up a localized string similar to The lifetime manager is already registered. Lifetime managers cannot be reused, please create a new one..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.MarkerBuildPlanInvoked">
            <summary>
              Looks up a localized string similar to The override marker build plan policy has been invoked. This should never happen, looks like a bug in the container..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.MethodArgumentResolveOperation">
            <summary>
              Looks up a localized string similar to Resolving parameter &quot;{0}&quot; of method {1}.{2}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.MethodParameterResolutionFailed">
            <summary>
              Looks up a localized string similar to The value for parameter &quot;{1}&quot; of method {0} could not be resolved. .
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.MissingDependency">
            <summary>
              Looks up a localized string similar to Could not resolve dependency for build key {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.MultipleInjectionConstructors">
            <summary>
              Looks up a localized string similar to The type {0} has multiple constructors marked with the InjectionConstructor attribute. Unable to disambiguate..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.MustHaveOpenGenericType">
            <summary>
              Looks up a localized string similar to The supplied type {0} must be an open generic type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.MustHaveSameNumberOfGenericArguments">
            <summary>
              Looks up a localized string similar to The supplied type {0} does not have the same number of generic arguments as the target type {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NoConstructorFound">
            <summary>
              Looks up a localized string similar to The type {0} does not have an accessible constructor..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NoMatchingGenericArgument">
            <summary>
              Looks up a localized string similar to The type {0} does not have a generic argument named &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NoOperationExceptionReason">
            <summary>
              Looks up a localized string similar to while resolving.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NoSuchConstructor">
            <summary>
              Looks up a localized string similar to The type {0} does not have a constructor that takes the parameters ({1})..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NoSuchMethod">
            <summary>
              Looks up a localized string similar to The type {0} does not have a public method named {1} that takes the parameters ({2})..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NoSuchProperty">
            <summary>
              Looks up a localized string similar to The type {0} does not contain an instance property named {1}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NotAGenericType">
            <summary>
              Looks up a localized string similar to The type {0} is not a generic type, and you are attempting to inject a generic parameter named &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.NotAnArrayTypeWithRankOne">
            <summary>
              Looks up a localized string similar to The type {0} is not an array type with rank 1, and you are attempting to use a [DependencyArray] attribute on a parameter or property with this type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.OptionalDependenciesMustBeReferenceTypes">
            <summary>
              Looks up a localized string similar to Optional dependencies must be reference types. The type {0} is a value type..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.PropertyNotSettable">
            <summary>
              Looks up a localized string similar to The property {0} on type {1} is not settable..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.PropertyTypeMismatch">
            <summary>
              Looks up a localized string similar to The property {0} on type {1} is of type {2}, and cannot be injected with a value of type {3}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.PropertyValueResolutionFailed">
            <summary>
              Looks up a localized string similar to The value for the property &quot;{0}&quot; could not be resolved..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ProvidedStringArgMustNotBeEmpty">
            <summary>
              Looks up a localized string similar to The provided string argument must not be empty..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ResolutionFailed">
             <summary>
               Looks up a localized string similar to Resolution of the dependency failed, type = &quot;{0}&quot;, name = &quot;{1}&quot;.
            Exception occurred while: {2}.
            Exception is: {3} - {4}
            -----------------------------------------------
            At the time of the exception, the container was:
            .
             </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ResolutionTraceDetail">
            <summary>
              Looks up a localized string similar to Resolving {0},{1}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ResolutionWithMappingTraceDetail">
            <summary>
              Looks up a localized string similar to Resolving {0},{1} (mapped from {2}, {3}).
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.ResolvingPropertyValueOperation">
            <summary>
              Looks up a localized string similar to Resolving value for property {0}.{1}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.SelectedConstructorHasRefParameters">
            <summary>
              Looks up a localized string similar to The constructor {1} selected for type {0} has ref or out parameters. Such parameters are not supported for constructor injection..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.SettingPropertyOperation">
            <summary>
              Looks up a localized string similar to Setting value for property {0}.{1}.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.TypeIsNotConstructable">
            <summary>
              Looks up a localized string similar to The type {0} cannot be constructed. You must configure the container to supply this value..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.TypesAreNotAssignable">
            <summary>
              Looks up a localized string similar to The type {1} cannot be assigned to variables of type {0}..
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Properties.Resources.UnknownType">
            <summary>
              Looks up a localized string similar to &lt;unknown&gt;.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.PropertyOverride">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> that lets you override
            the value for a specified property.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PropertyOverride.#ctor(System.String,System.Object)">
            <summary>
             Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.PropertyOverride"/>.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">Value to use for the property.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PropertyOverride.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.PropertyOverrides">
            <summary>
            A convenience form of <see cref="T:Telerik.Microsoft.Practices.Unity.PropertyOverride"/> that lets you
            specify multiple property overrides in one shot rather than having
            to construct multiple objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.PropertyOverrides.MakeOverride(System.String,System.Object)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Telerik.Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ResolutionFailedException">
            <summary>
            The exception thrown by the Unity container when
            an attempt to resolve a dependency fails.
            </summary>
            <summary>
            The exception thrown by the Unity container when
            an attempt to resolve a dependency fails.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolutionFailedException.#ctor(System.Type,System.String,System.Exception,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.ResolutionFailedException"/> that records
            the exception for the given type and name.
            </summary>
            <param name="typeRequested">Type requested from the container.</param>
            <param name="nameRequested">Name requested from the container.</param>
            <param name="innerException">The actual exception that caused the failure of the build.</param>
            <param name="context">The build context representing the failed operation.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ResolutionFailedException.TypeRequested">
            <summary>
            The type that was being requested from the container at the time of failure.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.ResolutionFailedException.NameRequested">
            <summary>
            The name that was being requested from the container at the time of failure.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolutionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor to create a <see cref="T:Telerik.Microsoft.Practices.Unity.ResolutionFailedException"/> from serialized state.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolutionFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize this object into the given context.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.ResolverOverride">
            <summary>
            Base class for all override objects passed in the
            <see cref="M:Telerik.Microsoft.Practices.Unity.IUnityContainer.Resolve(System.Type,System.String,Telerik.Microsoft.Practices.Unity.ResolverOverride[])"/> method.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolverOverride.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolverOverride.OnType``1">
            <summary>
            Wrap this resolver in one that verifies the type of the object being built.
            This allows you to narrow any override down to a specific type easily.
            </summary>
            <typeparam name="T">Type to constrain the override to.</typeparam>
            <returns>The new override.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.ResolverOverride.OnType(System.Type)">
            <summary>
            Wrap this resolver in one that verifies the type of the object being built.
            This allows you to narrow any override down to a specific type easily.
            </summary>
            <param name="typeToOverride">Type to constrain the override to.</param>
            <returns>The new override.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.StaticFactory.IStaticFactoryConfiguration">
            <summary>
            Interface defining the configuration interface exposed by the
            Static Factory extension.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.StaticFactory.IStaticFactoryConfiguration.RegisterFactory``1(System.Func{Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.StaticFactory.IStaticFactoryConfiguration.RegisterFactory``1(System.String,System.Func{Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/> and <paramref name="name"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="name">The name that will be used when requesting to resolve this type.</param>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtension"/> that lets you register a
            delegate with the container to create an object, rather than calling
            the object's constructor.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension.Initialize">
            <summary>
            Initialize this extension. This particular extension requires no
            initialization work.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension.RegisterFactory``1(System.String,System.Func{Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/> and <paramref name="name"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="name">The name that will be used when requesting to resolve this type.</param>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension.RegisterFactory``1(System.Func{Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.TypeBasedOverride">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> that
            acts as a decorator over another <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>.
            This checks to see if the current type being built is the
            right one before checking the inner <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TypeBasedOverride.#ctor(System.Type,Telerik.Microsoft.Practices.Unity.ResolverOverride)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.TypeBasedOverride"/>
            </summary>
            <param name="targetType">Type to check for.</param>
            <param name="innerOverride">Inner override to check after type matches.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TypeBasedOverride.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.TypeBasedOverride`1">
            <summary>
            A convenience version of <see cref="T:Telerik.Microsoft.Practices.Unity.TypeBasedOverride"/> that lets you
            specify the type to construct via generics syntax.
            </summary>
            <typeparam name="T">Type to check for.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.TypeBasedOverride`1.#ctor(Telerik.Microsoft.Practices.Unity.ResolverOverride)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.Unity.TypeBasedOverride`1"/>.
            </summary>
            <param name="innerOverride">Inner override to check after type matches.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.UnityContainer">
            <summary>
            A simple, extensible dependency injection container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.#ctor">
            <summary>
            Create a default <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.#ctor(Telerik.Microsoft.Practices.Unity.UnityContainer)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> with the given parent container.
            </summary>
            <param name="parent">The parent <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/>. The current object
            will apply its own settings first, and then check the parent for additional ones.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.RegisterType(System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            RegisterType a type mapping with the container, where the created instances will use
            the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.RegisterInstance(System.Type,System.String,System.Object,Telerik.Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            RegisterType an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            </remarks>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="name">Name for registration.</param>
            <param name="lifetime">
            <para>If true, the container will take over the lifetime of the instance,
            calling Dispose on it (if it's <see cref="T:System.IDisposable"/>) when the container is Disposed.</para>
            <para>
             If false, container will not maintain a strong reference to <paramref name="instance"/>. User is reponsible
            for disposing instance, and for keeping the instance from being garbage collected.</para></param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.Resolve(System.Type,System.String,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Get an instance of the requested type with the given name from the container.
            </summary>
            <param name="t"><see cref="T:System.Type"/> of object to get from the container.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="resolverOverrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.ResolveAll(System.Type,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Return instances of all registered types requested.
            </summary>
            <remarks>
            <para>
            This method is useful if you've registered multiple types with the same
            <see cref="T:System.Type"/> but different names.
            </para>
            <para>
            Be aware that this method does NOT return an instance for the default (unnamed) registration.
            </para>
            </remarks>
            <param name="t">The type requested.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>Set of objects of type <paramref name="t"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.BuildUp(System.Type,System.Object,System.String,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para></remarks>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">name to use when looking up the typemappings and other configurations.</param>
            <param name="resolverOverrides">Any overrides for the buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <paramref name="t"/>).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.Teardown(System.Object)">
            <summary>
            Run an existing object through the container, and clean it up.
            </summary>
            <param name="o">The object to tear down.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.UnityContainer.ExtensionContextImpl">
            <summary>
            Implementation of the ExtensionContext that is actually used
            by the UnityContainer implementation.
            </summary>
            <remarks>
            This is a nested class so that it can access state in the
            container that would otherwise be inaccessible.
            </remarks>
        </member>
        <member name="E:Telerik.Microsoft.Practices.Unity.UnityContainer.ExtensionContextImpl.RegisteringInstance">
            <summary>
            This event is raised when the <see cref="M:Telerik.Microsoft.Practices.Unity.UnityContainer.RegisterInstance(System.Type,System.String,System.Object,Telerik.Microsoft.Practices.Unity.LifetimeManager)"/> method,
            or one of its overloads, is called.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.AddExtension(Telerik.Microsoft.Practices.Unity.UnityContainerExtension)">
            <summary>
            Add an extension object to the container.
            </summary>
            <param name="extension"><see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtension"/> to add.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.Configure(System.Type)">
            <summary>
            Get access to a configuration interface exposed by an extension.
            </summary>
            <remarks>Extensions can expose configuration interfaces as well as adding
            strategies and policies to the container. This method walks the list of
            added extensions and returns the first one that implements the requested type.
            </remarks>
            <param name="configurationInterface"><see cref="T:System.Type"/> of configuration interface required.</param>
            <returns>The requested extension's configuration interface, or null if not found.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.RemoveAllExtensions">
            <summary>
            Remove all installed extensions from this container.
            </summary>
            <remarks>
            <para>
            This method removes all extensions from the container, including the default ones
            that implement the out-of-the-box behavior. After this method, if you want to use
            the container again you will need to either readd the default extensions or replace
            them with your own.
            </para>
            <para>
            The registered instances and singletons that have already been set up in this container
            do not get removed.
            </para>
            </remarks>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.CreateChildContainer">
            <summary>
            Create a child container.
            </summary>
            <remarks>
            A child container shares the parent's configuration, but can be configured with different
            settings or lifetime.</remarks>
            <returns>The new child container.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.UnityContainer.Parent">
            <summary>
            The parent of this container.
            </summary>
            <value>The parent container, or null if this container doesn't have one.</value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.Dispose">
            <summary>
            Dispose this container instance.
            </summary>
            <remarks>
            Disposing the container also disposes any child containers,
            and disposes any instances whose lifetimes are managed
            by the container.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.Dispose(System.Boolean)">
            <summary>
            Dispose this container instance.
            </summary>
            <remarks>
            This class doesn't have a finalizer, so <paramref name="disposing"/> will always be true.</remarks>
            <param name="disposing">True if being called from the IDisposable.Dispose
            method, false if being called from a finalizer.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.UnityContainer.Registrations">
            <summary>
            Get a sequence of <see cref="T:Telerik.Microsoft.Practices.Unity.ContainerRegistration"/> that describe the current state
            of the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainer.ClearExistingBuildPlan(System.Type,System.String)">
            <summary>
            Remove policies associated with building this type. This removes the
            compiled build plan so that it can be rebuilt with the new settings
            the next time this type is resolved.
            </summary>
            <param name="typeToInject">Type of object to clear the plan for.</param>
            <param name="name">Name the object is being registered with.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions">
            <summary>
            Extension class that adds a set of convenience overloads to the
            <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type with specific members to be injected.
            </summary>
            <typeparam name="T">Type this registration is for.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            <para>
            This method is used to tell the container that when asked for type <typeparamref name="TFrom"/>,
            actually return an instance of type <typeparamref name="TTo"/>. This is very useful for
            getting instances of interfaces.
            </para>
            <para>
            This overload registers a default mapping and transient lifetime.
            </para>
            </remarks>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            This method is used to tell the container that when asked for type <typeparamref name="TFrom"/>,
            actually return an instance of type <typeparamref name="TTo"/>. This is very useful for
            getting instances of interfaces.
            </remarks>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name of this mapping.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> for the given type with the container.
            No type mapping is performed for this type.
            </summary>
            <typeparam name="T">The type to apply the <paramref name="lifetimeManager"/> to.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> for the given type with the container.
            No type mapping is performed for this type.
            </summary>
            <typeparam name="T">The type to configure injection on.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name that will be used to request the type.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <typeparam name="T">The type to apply the <paramref name="lifetimeManager"/> to.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name that will be used to request the type.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type with specific members to be injected.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">Type this registration is for.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            <para>
            This method is used to tell the container that when asked for type <paramref name="from"/>,
            actually return an instance of type <paramref name="to"/>. This is very useful for
            getting instances of interfaces.
            </para>
            <para>
            This overload registers a default mapping.
            </para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            This method is used to tell the container that when asked for type <paramref name="from"/>,
            actually return an instance of type <paramref name="to"/>. This is very useful for
            getting instances of interfaces.
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">The <see cref="T:System.Type"/> to apply the <paramref name="lifetimeManager"/> to.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">The <see cref="T:System.Type"/> to configure in the container.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,Telerik.Microsoft.Practices.Unity.LifetimeManager,Telerik.Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">The <see cref="T:System.Type"/> to apply the <paramref name="lifetimeManager"/> to.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,``0)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration and has the container take over the lifetime of the instance.</para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="container">Container to configure.</param>
            <param name="instance">Object to returned.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,``0,Telerik.Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration (name = null).
            </para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="container">Container to configure.</param>
            <param name="instance">Object to returned.</param>
            <param name="lifetimeManager">
            <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String,``0)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload automatically has the container take ownership of the <paramref name="instance"/>.</para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="instance">Object to returned.</param>
            <param name="container">Container to configure.</param>
            <param name="name">Name for registration.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String,``0,Telerik.Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="instance">Object to returned.</param>
            <param name="container">Container to configure.</param>
            <param name="name">Name for registration.</param>
            <param name="lifetimeManager">
            <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Object)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration and has the container take over the lifetime of the instance.</para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Object,Telerik.Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration (name = null).
            </para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="lifetimeManager">
            <see cref="T:Telerik.Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,System.Object)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload automatically has the container take ownership of the <paramref name="instance"/>.</para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="name">Name for registration.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.Resolve``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the default requested type from the container.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of object to get from the container.</typeparam>
            <param name="container">Container to resolve from.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.Resolve``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the requested type with the given name from the container.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of object to get from the container.</typeparam>
            <param name="container">Container to resolve from.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the default requested type from the container.
            </summary>
            <param name="container">Container to resolve from.</param>
            <param name="t"><see cref="T:System.Type"/> of object to get from the container.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.ResolveAll``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Return instances of all registered types requested.
            </summary>
            <remarks>
            <para>
            This method is useful if you've registered multiple types with the same
            <see cref="T:System.Type"/> but different names.
            </para>
            <para>
            Be aware that this method does NOT return an instance for the default (unnamed) registration.
            </para>
            </remarks>
            <typeparam name="T">The type requested.</typeparam>
            <param name="container">Container to resolve from.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>Set of objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.BuildUp``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,``0,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para>
            <para>
            This overload uses the default registrations.
            </para>
            </remarks>
            <typeparam name="T"><see cref="T:System.Type"/> of object to perform injection on.</typeparam>
            <param name="container">Container to resolve through.</param>
            <param name="existing">Instance to build up.</param>
            <param name="resolverOverrides">Any overrides for the buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.BuildUp``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,``0,System.String,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para></remarks>
            <typeparam name="T"><see cref="T:System.Type"/> of object to perform injection on.</typeparam>
            <param name="container">Conatiner to resolve through.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">name to use when looking up the typemappings and other configurations.</param>
            <param name="resolverOverrides">Any overrides for the Buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.BuildUp(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Object,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para>
            <para>
            This overload uses the default registrations.
            </para>
            </remarks>
            <param name="container">Container to resolve through.</param>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="resolverOverrides">Any overrides for the Buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <paramref name="t"/>).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.AddNewExtension``1(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates a new extension object and adds it to the container.
            </summary>
            <typeparam name="TExtension">Type of <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainerExtension"/> to add. The extension type
            will be resolved from within the supplied <paramref name="container"/>.</typeparam>
            <param name="container">Container to add the extension to.</param>
            <returns>The <see cref="T:Telerik.Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.Configure``1(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Resolve access to a configuration interface exposed by an extension.
            </summary>
            <remarks>Extensions can expose configuration interfaces as well as adding
            strategies and policies to the container. This method walks the list of
            added extensions and returns the first one that implements the requested type.
            </remarks>
            <typeparam name="TConfigurator">The configuration interface required.</typeparam>
            <param name="container">Container to configure.</param>
            <returns>The requested extension's configuration interface, or null if not found.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
             Check if a particular type has been registered with the container with
             the default name.
            </summary>
            <param name="container">Container to inspect.</param>
            <param name="typeToCheck">Type to check registration for.</param>
            <returns>True if this type has been registered, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String)">
            <summary>
            Check if a particular type/name pair has been registered with the container.
            </summary>
            <param name="container">Container to inspect.</param>
            <param name="typeToCheck">Type to check registration for.</param>
            <param name="nameToCheck">Name to check registration for.</param>
            <returns>True if this type/name pair has been registered, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered``1(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Check if a particular type has been registered with the container with the default name.
            </summary>
            <typeparam name="T">Type to check registration for.</typeparam>
            <param name="container">Container to inspect.</param>
            <returns>True if this type has been registered, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered``1(Telerik.Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Check if a particular type/name pair has been registered with the container.
            </summary>
            <typeparam name="T">Type to check registration for.</typeparam>
            <param name="container">Container to inspect.</param>
            <param name="nameToCheck">Name to check registration for.</param>
            <returns>True if this type/name pair has been registered, false if not.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.UnityDefaultBehaviorExtension">
            <summary>
            This extension supplies the default behavior of the UnityContainer API
            by handling the context events and setting policies.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityDefaultBehaviorExtension.Initialize">
            <summary>
            Install the default container behavior into the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityDefaultBehaviorExtension.Remove">
            <summary>
            Remove the default behavior from the container.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.UnityDefaultStrategiesExtension">
            <summary>
            This extension installs the default strategies and policies into the container
            to implement the standard behavior of the Unity container.
            </summary>
            <summary>
            This extension installs the default strategies and policies into the container
            to implement the standard behavior of the Unity container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityDefaultStrategiesExtension.Initialize">
            <summary>
            Add the default ObjectBuilder strategies &amp; policies to the container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityDefaultStrategiesExtension.SetDynamicBuilderMethodCreatorPolicy">
            <summary>
            Add the correct <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy"/> to the policy
            set. This version adds the appropriate policy for running on the desktop CLR.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.UnityServiceLocator">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that wraps a Unity container.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityServiceLocator.#ctor(Telerik.Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.Unity.UnityServiceLocator"/> class for a container.
            </summary>
            <param name="container">The <see cref="T:Telerik.Microsoft.Practices.Unity.IUnityContainer"/> to wrap with the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            interface implementation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityServiceLocator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
                        the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param><param name="key">Name of registered service you want. May be null.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.UnityServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
                        resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.Guard">
            <summary>
            A static helper class that includes various parameter checking routines.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the given argument is null.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if tested value if null.</exception>
            <param name="argumentValue">Argument value to test.</param>
            <param name="argumentName">Name of the argument being tested.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the tested string argument is null or the empty string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if string value is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the string is empty</exception>
            <param name="argumentValue">Argument value to check.</param>
            <param name="argumentName">Name of argument being checked.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.Guard.TypeIsAssignable(System.Type,System.Type,System.String)">
            <summary>
            Verifies that an argument type is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy).
            </summary>
            <param name="assignmentTargetType">The argument type that will be assigned to.</param>
            <param name="assignmentValueType">The type of the value being assigned.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.Guard.InstanceIsAssignable(System.Type,System.Object,System.String)">
            <summary>
            Verifies that an argument instance is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy, or instance can be 
            assigned through a runtime wrapper, as is the case for COM Objects).
            </summary>
            <param name="assignmentTargetType">The argument type that will be assigned to.</param>
            <param name="assignmentInstance">The instance that will be assigned.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.MethodReflectionHelper">
            <summary>
            Helper class to wrap common reflection stuff dealing with
            methods.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.MethodReflectionHelper.#ctor(System.Reflection.MethodBase)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.Utility.MethodReflectionHelper"/> instance that
            lets us do more reflection stuff on that method.
            </summary>
            <param name="method">The method to reflect on.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.MethodReflectionHelper.MethodHasOpenGenericParameters">
            <summary>
            Returns true if any of the parameters of this method
            are open generics.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.MethodReflectionHelper.ParameterTypes">
            <summary>
            Return the <see cref="T:System.Type"/> of each parameter for this
            method.
            </summary>
            <returns>Sequence of <see cref="T:System.Type"/> objects, one for
            each parameter in order.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.MethodReflectionHelper.GetClosedParameterTypes(System.Type[])">
            <summary>
            Given our set of generic type arguments, 
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns>An array with closed parameter types. </returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.Pair`2">
            <summary>
            A helper class that encapsulates two different
            data items together into a a single item.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.Pair`2.#ctor(`0,`1)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.Utility.Pair`2"/> containing
            the two values give.
            </summary>
            <param name="first">First value</param>
            <param name="second">Second value</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.Pair`2.First">
            <summary>
            The first value of the pair.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.Pair`2.Second">
            <summary>
            The second value of the pair.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.Pair">
            <summary>
            Container for a Pair helper method.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.Pair.Make``2(``0,``1)">
            <summary>
            A helper factory method that lets users take advantage of type inference.
            </summary>
            <typeparam name="TFirstParameter">Type of first value.</typeparam>
            <typeparam name="TSecondParameter">Type of second value.</typeparam>
            <param name="first">First value.</param>
            <param name="second">Second value.</param>
            <returns>A new <see cref="T:Telerik.Microsoft.Practices.Unity.Utility.Pair`2"/> instance.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.ParameterMatcher">
            <summary>
            A utility class that handles the logic of matching parameter
            lists, so we can find the right constructor and method overloads.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ParameterMatcher.#ctor(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.InjectionParameterValue})">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.Utility.ParameterMatcher"/> that will attempt to
            match the given parameter types.
            </summary>
            <param name="parametersToMatch">Target parameters to match against.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ParameterMatcher.Matches(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Tests to see if the given set of types matches the ones
            we're looking for.
            </summary>
            <param name="candidate">parameter list to look for.</param>
            <returns>true if they match, false if they don't.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ParameterMatcher.Matches(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Tests to see if the given set of types matches the ones we're looking for.
            </summary>
            <param name="candidate">Candidate method signature to look for.</param>
            <returns>True if they match, false if they don't.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.ParameterReflectionHelper">
            <summary>
            Another reflection helper class that has extra methods
            for dealing with ParameterInfos.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ParameterReflectionHelper.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.Unity.Utility.ParameterReflectionHelper"/> that
            lets you query information about the given ParameterInfo object.
            </summary>
            <param name="parameter">Parameter to query.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper">
            <summary>
            A small helper class to encapsulate details of the
            reflection API, particularly around generics.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper"/> instance that
            lets you look at information about the given type.
            </summary>
            <param name="typeToReflect">Type to do reflection on.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.Type">
            <summary>
            The <see cref="P:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.Type"/> object we're reflecting over.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.IsGenericType">
            <summary>
            Is this type generic?
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.IsOpenGeneric">
            <summary>
            Is this type an open generic (no type parameter specified)
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.IsArray">
            <summary>
            Is this type an array type?
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.IsGenericArray">
            <summary>
            Is this type an array of generic elements?
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.ArrayElementType">
            <summary>
            The type of the elements in this type (if it's an array).
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.MethodHasOpenGenericParameters(System.Reflection.MethodBase)">
            <summary>
            Test the given <see cref="T:System.Reflection.MethodBase"/> object, looking at
            the parameters. Determine if any of the parameters are
            open generic types that need type attributes filled in.
            </summary>
            <param name="method">The method to check.</param>
            <returns>True if any of the parameters are open generics. False if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.GetClosedParameterType(System.Type[])">
            <summary>
            If this type is an open generic, use the
            given <paramref name="genericArguments"/> array to
            determine what the required closed type is and return that.
            </summary>
            <remarks>If the parameter is not an open type, just
            return this parameter's type.</remarks>
            <param name="genericArguments">Type arguments to substitute in for
            the open type parameters.</param>
            <returns>Corresponding closed type of this parameter.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.ReflectionHelper.GetNamedGenericParameter(System.String)">
            <summary>
            Given a generic argument name, return the corresponding type for this
            closed type. For example, if the current type is SomeType&lt;User&gt;, and the
            corresponding definition was SomeType&lt;TSomething&gt;, calling this method
            and passing "TSomething" will return typeof(User).
            </summary>
            <param name="parameterName">Name of the generic parameter.</param>
            <returns>Type of the corresponding generic parameter, or null if there
            is no matching name.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.Unity.Utility.StaticReflection">
            <summary>
            A set of helper methods to pick through lambdas and pull out
            <see cref="T:System.Reflection.MethodInfo"/> from them.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.StaticReflection.GetMethodInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object from an expression of the form
            () => SomeClass.SomeMethod()
            </summary>
            <param name="expression">Expression describing the method to call.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.StaticReflection.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object from an expression of the form
            x => x.SomeMethod()
            </summary>
            <typeparam name="T">The type where the method is defined.</typeparam>
            <param name="expression">Expression describing the method to call.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.StaticReflection.GetPropertyGetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object for the get method from an expression of the form
            x => x.SomeProperty
            </summary>
            <typeparam name="T">The type where the method is defined.</typeparam>
            <typeparam name="TProperty">The type for the property.</typeparam>
            <param name="expression">Expression describing the property for which the get method is to be extracted.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.StaticReflection.GetPropertySetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object for the set method from an expression of the form
            x => x.SomeProperty
            </summary>
            <typeparam name="T">The type where the method is defined.</typeparam>
            <typeparam name="TProperty">The type for the property.</typeparam>
            <param name="expression">Expression describing the property for which the set method is to be extracted.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.Unity.Utility.StaticReflection.GetConstructorInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.ConstructorInfo"/> object from an expression of the form () => new SomeType()
            </summary>
            <typeparam name="T">The type where the constructor is defined.</typeparam>
            <param name="expression">Expression invoking the desired constructor.</param>
            <returns>Corresponding <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext">
            <summary>
            Represents the context in which a build-up or tear-down operation runs.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain,Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext"/> class with a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>, 
            <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/>, <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> and the 
            build key used to start this build operation. 
            </summary>
            <param name="chain">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this context.</param>
            <param name="lifetime">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this context.</param>
            <param name="policies">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to use for this context.</param>
            <param name="originalBuildKey">Build key to start building.</param>
            <param name="existing">The existing object to build up.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain,Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Object)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext"/> using the explicitly provided
            values.
            </summary>
            <param name="chain">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this context.</param>
            <param name="lifetime">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this context.</param>
            <param name="persistentPolicies">The set of persistent policies to use for this context.</param>
            <param name="transientPolicies">The set of transient policies to use for this context. It is
            the caller's responsibility to ensure that the transient and persistent policies are properly
            combined.</param>
            <param name="buildKey">Build key for this context.</param>
            <param name="existing">Existing object to build up.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.Strategies">
            <summary>
            Gets the head of the strategy chain.
            </summary>
            <returns>
            The strategy that's first in the chain; returns null if there are no
            strategies in the chain.
            </returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.BuildKey">
            <summary>
            Get the current build key for the current build operation.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.Existing">
            <summary>
            The current object being built up or torn down.
            </summary>
            <value>
            The current object being manipulated by the build operation. May
            be null if the object hasn't been created yet.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.Lifetime">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </summary>
            <value>
            The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.OriginalBuildKey">
            <summary>
            Gets the original build key for the build operation.
            </summary>
            <value>
            The original build key for the build operation.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.PersistentPolicies">
            <summary>
            The set of policies that were passed into this context.
            </summary>
            <remarks>This returns the policies passed into the context.
            Policies added here will remain after buildup completes.</remarks>
            <value>The persistent policies for the current context.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.Policies">
            <summary>
            Gets the policies for the current context. 
            </summary>
            <remarks>
            Any modifications will be transient (meaning, they will be forgotten when 
            the outer BuildUp for this context is finished executing).
            </remarks>
            <value>
            The policies for the current context.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.RecoveryStack">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> objects
            that need to execute in event of an exception.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.BuildComplete">
            <summary>
            Flag indicating if the build operation should continue.
            </summary>
            <value>true means that building should not call any more
            strategies, false means continue to the next strategy.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.CurrentOperation">
            <summary>
            An object representing what is currently being done in the
            build chain. Used to report back errors if there's a failure.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.ChildContext">
            <summary>
            The build context used to resolve a dependency during the build operation represented by this context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.AddResolverOverrides(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.ResolverOverride})">
            <summary>
            Add a new set of resolver override objects to the current build operation.
            </summary>
            <param name="newOverrides"><see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> objects to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.GetOverriddenResolver(System.Type)">
            <summary>
            Get a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object for the given <paramref name="dependencyType"/>
            or null if that dependency hasn't been overridden.
            </summary>
            <param name="dependencyType">Type of the dependency.</param>
            <returns>Resolver to use, or null if no override matches for the current operation.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            A convenience method to do a new buildup operation on an existing context.
            </summary>
            <param name="newBuildKey">Key to use to build up.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Action{Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext})">
            <summary>
            A convenience method to do a new buildup operation on an existing context. This
            overload allows you to specify extra policies which will be in effect for the duration
            of the build.
            </summary>
            <param name="newBuildKey">Key defining what to build up.</param>
            <param name="childCustomizationBlock">A delegate that takes a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>. This
            is invoked with the new child context before the build up process starts. This gives callers
            the opportunity to customize the context for the build process.</param>
            <returns>Created object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException">
            <summary>
            Represents that a dependency could not be resolved.
            </summary>
            <summary>
            Represents that a dependency could not be resolved.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with no extra information.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the given message.
            </summary>
            <param name="message">Some random message.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the given
            message and inner exception.
            </summary>
            <param name="message">Some random message</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the build key of the object begin built.
            </summary>
            <param name="buildKey">The build key of the object begin built.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException">
            <summary>
            The exception thrown when injection is attempted on a method
            that is an open generic or has out or ref params.
            </summary>
            <summary>
            The exception thrown when injection is attempted on a method
            that is an open generic or has out or ref params.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with no
            message.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with the given message
            </summary>
            <param name="message">Message to return.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with the given message
            and inner exception.
            </summary>
            <param name="message">Message to return.</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext">
            <summary>
            Represents the context in which a build-up or tear-down operation runs.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.Strategies">
            <summary>
            Gets the head of the strategy chain.
            </summary>
            <returns>
            The strategy that's first in the chain; returns null if there are no
            strategies in the chain.
            </returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.Lifetime">
            <summary>
            Gets the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </summary>
            <value>
            The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.OriginalBuildKey">
            <summary>
            Gets the original build key for the build operation.
            </summary>
            <value>
            The original build key for the build operation.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.BuildKey">
            <summary>
            Get the current build key for the current build operation.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.PersistentPolicies">
            <summary>
            The set of policies that were passed into this context.
            </summary>
            <remarks>This returns the policies passed into the context.
            Policies added here will remain after buildup completes.</remarks>
            <value>The persistent policies for the current context.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.Policies">
            <summary>
            Gets the policies for the current context. 
            </summary>
            <remarks>Any policies added to this object are transient
            and will be erased at the end of the buildup.</remarks>
            <value>
            The policies for the current context.
            </value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.RecoveryStack">
            <summary>
            Gets the collection of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> objects
            that need to execute in event of an exception.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.Existing">
            <summary>
            The current object being built up or torn down.
            </summary>
            <value>
            The current object being manipulated by the build operation. May
            be null if the object hasn't been created yet.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.BuildComplete">
            <summary>
            Flag indicating if the build operation should continue.
            </summary>
            <value>true means that building should not call any more
            strategies, false means continue to the next strategy.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.CurrentOperation">
            <summary>
            An object representing what is currently being done in the
            build chain. Used to report back errors if there's a failure.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.ChildContext">
            <summary>
            The build context used to resolve a dependency during the build operation represented by this context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.AddResolverOverrides(System.Collections.Generic.IEnumerable{Telerik.Microsoft.Practices.Unity.ResolverOverride})">
            <summary>
            Add a new set of resolver override objects to the current build operation.
            </summary>
            <param name="newOverrides"><see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/> objects to add.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.GetOverriddenResolver(System.Type)">
            <summary>
            Get a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object for the given <paramref name="dependencyType"/>
            or null if that dependency hasn't been overridden.
            </summary>
            <param name="dependencyType">Type of the dependency.</param>
            <returns>Resolver to use, or null if no override matches for the current operation.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.NewBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            A convenience method to do a new buildup operation on an existing context.
            </summary>
            <param name="newBuildKey">Key to use to build up.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.NewBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Action{Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext})">
            <summary>
            A convenience method to do a new buildup operation on an existing context. This
            overload allows you to specify extra policies which will be in effect for the duration
            of the build.
            </summary>
            <param name="newBuildKey">Key defining what to build up.</param>
            <param name="childCustomizationBlock">A delegate that takes a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>. This
            is invoked with the new child context before the build up process starts. This gives callers
            the opportunity to customize the context for the build process.</param>
            <returns>Created object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions">
            <summary>
            Extension methods to provide convenience overloads over the
            <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> interface.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions.NewBuildUp``1(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Start a recursive build up operation to retrieve the default
            value for the given <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TResult">Type of object to build.</typeparam>
            <param name="context">Parent context.</param>
            <returns>Resulting object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions.NewBuildUp``1(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String)">
            <summary>
            Start a recursive build up operation to retrieve the named
            implementation for the given <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TResult">Type to resolve.</typeparam>
            <param name="context">Parent context.</param>
            <param name="name">Name to resolve with.</param>
            <returns>The resulting object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions.AddResolverOverrides(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Add a set of <see cref="T:Telerik.Microsoft.Practices.Unity.ResolverOverride"/>s to the context, specified as a 
            variable argument list.
            </summary>
            <param name="context">Context to add overrides to.</param>
            <param name="overrides">The overrides.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRecoveryStack">
            <summary>
            Data structure that stores the set of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/>
            objects and executes them when requested.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IRecoveryStack.Add(Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery)">
            <summary>
            Add a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> object to this
            list.
            </summary>
            <param name="recovery">Object to add.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.IRecoveryStack.Count">
            <summary>
            Return the number of recovery objects currently in the stack.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IRecoveryStack.ExecuteRecovery">
            <summary>
            Execute the <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover"/> method
            of everything in the recovery list. Recoveries will execute
            in the opposite order of add - it's a stack.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery">
            <summary>
            This interface provides a hook for the builder context to
            implement error recovery when a builder strategy throws
            an exception. Since we can't get try/finally blocks onto
            the call stack for later stages in the chain, we instead
            add these objects to the context. If there's an exception,
            all the current IRequiresRecovery instances will have
            their Recover methods called.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover">
            <summary>
            A method that does whatever is needed to clean up
            as part of cleaning up after an exception.
            </summary>
            <remarks>
            Don't do anything that could throw in this method,
            it will cause later recover operations to get skipped
            and play real havoc with the stack trace.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer">
            <summary>
            Represents a lifetime container.
            </summary>
            <remarks>
            A lifetime container tracks the lifetime of an object, and implements
            IDisposable. When the container is disposed, any objects in the
            container which implement IDisposable are also disposed.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Count">
            <summary>
            Gets the number of references in the lifetime container
            </summary>
            <value>
            The number of references in the lifetime container
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Add(System.Object)">
            <summary>
            Adds an object to the lifetime container.
            </summary>
            <param name="item">The item to be added to the lifetime container.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Contains(System.Object)">
            <summary>
            Determine if a given object is in the lifetime container.
            </summary>
            <param name="item">
            The item to locate in the lifetime container.
            </param>
            <returns>
            Returns true if the object is contained in the lifetime
            container; returns false otherwise.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Remove(System.Object)">
            <summary>
            Removes an item from the lifetime container. The item is
            not disposed.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer">
            <summary>
            Represents a lifetime container.
            </summary>
            <remarks>
            A lifetime container tracks the lifetime of an object, and implements
            IDisposable. When the container is disposed, any objects in the
            container which implement IDisposable are also disposed.
            </remarks>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Count">
            <summary>
            Gets the number of references in the lifetime container
            </summary>
            <value>
            The number of references in the lifetime container
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Add(System.Object)">
            <summary>
            Adds an object to the lifetime container.
            </summary>
            <param name="item">The item to be added to the lifetime container.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Contains(System.Object)">
            <summary>
            Determine if a given object is in the lifetime container.
            </summary>
            <param name="item">
            The item to locate in the lifetime container.
            </param>
            <returns>
            Returns true if the object is contained in the lifetime
            container; returns false otherwise.
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer"/>. 
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources used by the DbDataReader and optionally releases the unmanaged resources. 
            </summary>
            <param name="disposing">
            true to release managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lifetime container.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the life time container. 
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lifetime container.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the life time container. 
            </returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Remove(System.Object)">
            <summary>
            Removes an item from the lifetime container. The item is
            not disposed.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy">
            <summary>
            Represents a builder policy interface. Since there are no fixed requirements
            for policies, it acts as a marker interface from which to derive all other
            policy interfaces.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList">
            <summary>
            A custom collection over <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList.Clear(System.Type,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <param name="policyInterface">The type of policy to remove.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList.ClearAll">
            <summary>
            Removes all policies from the list.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList.ClearDefault(System.Type)">
            <summary>
            Removes a default policy.
            </summary>
            <param name="policyInterface">The type the policy was registered as.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList.Get(System.Type,System.Object,System.Boolean,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList.GetNoDefault(System.Type,System.Object,System.Boolean,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies to.</param>
            <param name="localOnly">True if the search should be in the local policy list only; otherwise false to search up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList.Set(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <param name="policyInterface">The <see cref="T:System.Type"/> of the policy.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList.SetDefault(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <param name="policyInterface">The interface to register the policy under.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList">
            <summary>
            A custom collection wrapper over <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> objects.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Initialize a new instance of a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList"/> class with another policy list.
            </summary>
            <param name="innerPolicyList">An inner policy list to search.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.Count">
            <summary>
            Gets the number of items in the locator.
            </summary>
            <value>
            The number of items in the locator.
            </value>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.Clear(System.Type,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <param name="policyInterface">The type of policy to remove.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.ClearAll">
            <summary>
            Removes all policies from the list.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.ClearDefault(System.Type)">
            <summary>
            Removes a default policy.
            </summary>
            <param name="policyInterface">The type the policy was registered as.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.Get(System.Type,System.Object,System.Boolean,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.GetNoDefault(System.Type,System.Object,System.Boolean,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies to.</param>
            <param name="localOnly">True if the search should be in the local policy list only; otherwise false to search up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.Set(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <param name="policyInterface">The <see cref="T:System.Type"/> of the policy.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyList.SetDefault(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <param name="policyInterface">The interface to register the policy under.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions">
            <summary>
            Extension methods on <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to provide convenience
            overloads (generic versions, mostly).
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Clear``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to remove the policy from.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.ClearDefault``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Removes a default policy.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to remove the policy from.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.GetNoDefault``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.GetNoDefault``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Get the non default policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.GetNoDefault(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Set``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,``0,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add the policy to.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.SetDefault``1(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,``0)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <typeparam name="TPolicyInterface">The interface to register the policy under.</typeparam>
            <param name="policies"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add the policy to.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.RecoveryStack">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRecoveryStack"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.RecoveryStack.Add(Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery)">
            <summary>
            Add a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> object to this
            list.
            </summary>
            <param name="recovery">Object to add.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.RecoveryStack.Count">
            <summary>
            Return the number of recovery objects currently in the stack.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.RecoveryStack.ExecuteRecovery">
            <summary>
            Execute the <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover"/> method
            of everything in the recovery list. Recoveries will execute
            in the opposite order of add - it's a stack.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy">
            <summary>
            Implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> which will notify an object about
            the completion of a BuildUp operation, or start of a TearDown operation.
            </summary>
            <remarks>
            This strategy checks the object that is passing through the builder chain to see if it
            implements IBuilderAware and if it does, it will call <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnBuiltUp(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)"/>
            and <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnTearingDown"/>. This strategy is meant to be used from the
            <see cref="F:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStage.PostInitialization"/> stage.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy.PreTearDown(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderAware">
            <summary>
            Implemented on a class when it wants to receive notifications
            about the build process.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnBuiltUp(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Called by the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy"/> when the object is being built up.
            </summary>
            <param name="buildKey">The key of the object that was just built up.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnTearingDown">
            <summary>
            Called by the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy"/> when the object is being torn down.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStage">
            <summary>
            Enumeration to represent the object builder stages.
            </summary>
            <remarks>
            The order of the values in the enumeration is the order in which the stages are run.
            </remarks>
        </member>
        <member name="F:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStage.PreCreation">
            <summary>
            Strategies in this stage run before creation. Typical work done in this stage might
            include strategies that use reflection to set policies into the context that other
            strategies would later use.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStage.Creation">
            <summary>
            Strategies in this stage create objects. Typically you will only have a single policy-driven
            creation strategy in this stage.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStage.Initialization">
            <summary>
            Strategies in this stage work on created objects. Typical work done in this stage might
            include setter injection and method calls.
            </summary>
        </member>
        <member name="F:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStage.PostInitialization">
            <summary>
            Strategies in this stage work on objects that are already initialized. Typical work done in
            this stage might include looking to see if the object implements some notification interface
            to discover when its initialization stage has been completed.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy">
            <summary>
            Represents a strategy in the chain of responsibility.
            Strategies are required to support both BuildUp and TearDown.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PostBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PreTearDown(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PostTearDown(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PostTearDown method is called when the chain has finished the PreTearDown
            phase and executes in reverse order from the PreTearDown calls.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy">
            <summary>
            Represents a builder policy for mapping build keys.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy"/> with the new build key.
            </summary>
            <param name="newBuildKey">The new build key.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy.Map(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <param name="context">Current build context. Used for contextual information
            if writing a more sophisticated mapping, unused in this implementation.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuildKeyMappingStrategy">
            <summary>
            Represents a strategy for mapping build keys in the build up operation.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuildKeyMappingStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.  Looks for the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy"/>
            and if found maps the build key for the current operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy"/> that can map
            generic types.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy"/> instance
            that will map generic types.
            </summary>
            <param name="destinationKey">Build key to map to. This must be or contain an open generic type.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy.Map(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <param name="context">Current build context. Used for contextual information
            if writing a more sophisticated mapping.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy">
            <summary>
            Represents a builder policy for mapping build keys.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy.Map(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <param name="context">Current build context. Used for contextual information
            if writing a more sophisticated mapping. This parameter can be null
            (called when getting container registrations).</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuildOperation">
            <summary>
            Base class for the current operation stored in the build context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuildOperation.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuildOperation"/>.
            </summary>
            <param name="typeBeingConstructed">Type currently being built.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.BuildOperation.TypeBeingConstructed">
            <summary>
             The type that's currently being built.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that will look for a build plan
            in the current context. If it exists, it invokes it, otherwise
            it creates one and stores it for later, and invokes it.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that chooses
            constructors based on these criteria: first, pick a constructor marked with the
            <typeparamref name="TInjectionConstructorMarkerAttribute"/> attribute. If there
            isn't one, then choose the constructor with the longest parameter list. If that is ambiguous,
            then throw.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the constructor to choose is ambiguous.</exception>
            <typeparam name="TInjectionConstructorMarkerAttribute">Attribute used to mark the constructor to call.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicy`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.SelectConstructor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.ConstructorLengthComparer.Compare(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that, when implemented,
            will determine which constructor to call from the build plan.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy.SelectConstructor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedConstructor">
            <summary>
            Objects of this type are the return value from <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy.SelectConstructor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>.
            It encapsulates the desired <see cref="T:System.Reflection.ConstructorInfo"/> with the string keys
            needed to look up the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for each
            parameter.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedConstructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedConstructor"/> instance which
            contains the given constructor.
            </summary>
            <param name="constructor">The constructor to wrap.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedConstructor.Constructor">
            <summary>
            The constructor this object wraps.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters">
            <summary>
            Base class for return of selector policies that need
            to keep track of a set of parameter keys.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters.AddParameterKey(System.String)">
            <summary>
            Add a new parameter key to this object. Keys are assumed
            to be in the order of the parameters to the constructor.
            </summary>
            <param name="newKey">Key for the next parameter to look up.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters.GetParameterKeys">
            <summary>
            The set of keys for the constructor parameters.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1">
            <summary>
            Base class for return values from selector policies that
            return a memberinfo of some sort plus a list of parameter
            keys to look up the parameter resolvers.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1.#ctor(`0)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1"/>, storing
            the given member info.
            </summary>
            <param name="memberInfo">Member info to store.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1.MemberInfo">
            <summary>
            The member info stored.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.AnonymousHostedDynamicBuilderMethodCreatorPolicy">
            <summary>
            Create a <see cref="T:System.Reflection.Emit.DynamicMethod"/> object used to host the
            dynamically generated build plan. This class creates the
            dynamic method in the anonymous hosting assembly provided by
            the Silverlight runtime.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.AnonymousHostedDynamicBuilderMethodCreatorPolicy.CreateBuilderMethod(System.Type,System.String)">
            <summary>
            Create a builder method for the given type, using the given name.
            </summary>
            <param name="typeToBuild">Type that will be built by the generated method.</param>
            <param name="methodName">Name to give to the method.</param>
            <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod"/> object with the proper signature to use
            as part of a build plan.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation">
            <summary>
            This class records the information about which constructor argument is currently
            being resolved, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation"/> class.
            </summary>
            <param name="typeBeingConstructed">The type that is being constructed.</param>
            <param name="constructorSignature">A string representing the constructor being called.</param>
            <param name="parameterName">Parameter being resolved.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.ToString">
            <summary>
            Generate the string describing what parameter was being resolved.
            </summary>
            <returns>The description string.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.ConstructorSignature">
            <summary>
            String describing the constructor being set up.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.ParameterName">
            <summary>
            Parameter that's being resolved.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that emits IL to call constructors
            as part of creating a build plan.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <remarks>Existing object is an instance of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext"/>.</remarks>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to throw an exception if
            a dependency cannot be resolved.
            </summary>
            <param name="context">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> currently being
            used for the build of this object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObjectWithInvalidConstructor(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String)">
            <summary>
            A helper method used by the generated IL to throw an exception if
            a dependency cannot be resolved because of an invalid constructor.
            </summary>
            <param name="context">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> currently being
            used for the build of this object.</param>
            <param name="signature">The signature of the invalid constructor.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForAttemptingToConstructInterface(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to throw an exception if
            no existing object is present, but the user is attempting to build
            an interface (usually due to the lack of a type mapping).
            </summary>
            <param name="context">The <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> currently being
            used for the build of this object.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.SetCurrentOperationToResolvingParameter(System.String,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.SetCurrentOperationToInvokingConstructor(System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.SetPerBuildSingleton(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to set up a PerResolveLifetimeManager lifetime manager
            if the current object is such.
            </summary>
            <param name="context">Current build context.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation">
            <summary>
            A class that records that a constructor is about to be call, and is 
            responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation.ConstructorSignature">
            <summary>
            Constructor we're trying to call.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation.ToString">
            <summary>
            Generate the description string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DefaultDynamicBuilderMethodCreatorPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy"/> that will
            check for full trust and if we're building a class or an interface. If in full
            trust, attach to the class or module of the interface respectively. If in partial
            trust, attach to the OB2 module instead.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DefaultDynamicBuilderMethodCreatorPolicy.CreateBuilderMethod(System.Type,System.String)">
            <summary>
            Create a builder method for the given type, using the given name.
            </summary>
            <param name="typeToBuild">Type that will be built by the generated method.</param>
            <param name="methodName">Name to give to the method.</param>
            <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod"/> object with the proper signature to use
            as part of a build plan.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext">
            <summary>
            This object tracks the current state of the build plan generation,
            accumulates the IL, provides the preamble &amp; postamble for the dynamic
            method, and tracks things like local variables in the generated IL
            so that they can be reused across IL generation strategies.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.#ctor(System.Type,Telerik.Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext"/> that is initialized
            to handle creation of a dynamic method to build the given type.
            </summary>
            <param name="typeToBuild">Type that we're trying to create a build plan for.</param>
            <param name="builderMethodCreator">An <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy"/> object that actually
            creates our <see cref="T:System.Reflection.Emit.DynamicMethod"/> object.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.IL">
            <summary>
            The underlying <see cref="T:System.Reflection.Emit.ILGenerator"/> that can be used to
            emit IL into the generated dynamic method.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.TypeToBuild">
            <summary>
            The type we're currently creating the method to build.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetBuildMethod">
            <summary>
            Completes generation of the dynamic method and returns the
            generated dynamic method delegate.
            </summary>
            <returns>The created <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanMethod"/></returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadContext">
            <summary>
            Emit the IL to put the build context on top of the IL stack.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadBuildKey">
            <summary>
            Emit the IL to put the current build key on top of the IL stack.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadExisting">
            <summary>
            Emit the IL to put the current "existing" object on the top of the IL stack.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitStoreExisting">
            <summary>
            Emit the IL to make the top of the IL stack our current "existing" object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadTypeOnStack(System.Type)">
            <summary>
            Emit the IL to load the given <see cref="T:System.Type"/> object onto the top of the IL stack.
            </summary>
            <param name="t">Type to load on the stack.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitResolveDependency(System.Type,System.String)">
            <summary>
            Emit the IL needed to look up an <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> and
            call it to get a value.
            </summary>
            <param name="dependencyType">Type of the dependency to resolve.</param>
            <param name="key">Key to look up the policy by.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitClearCurrentOperation">
            <summary>
            Emit the IL needed to clear the <see cref="P:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext.CurrentOperation"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitCastOrUnbox(System.Type)">
            <summary>
            Emit the IL needed to either cast the top of the stack to the target type
            or unbox it, if it's a value type.
            </summary>
            <param name="targetType">Type to convert the top of the stack to.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.DoClearCurrentOperation(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to clear the current operation in the build context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetResolver(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type,System.String)">
            <summary>
            Helper method used by generated IL to look up a dependency resolver based on the given key.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of the dependency being resolved.</param>
            <param name="resolverKey">Key the resolver was stored under.</param>
            <returns>The found dependency resolver.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetPropertyGetter``2(System.String)">
            <summary>
            A reflection helper method to make it easier to grab a property getter
            <see cref="T:System.Reflection.MethodInfo"/> for the given property.
            </summary>
            <typeparam name="TImplementer">Type that implements the property we want.</typeparam>
            <typeparam name="TProperty">Type of the property.</typeparam>
            <param name="name">Name of the property.</param>
            <returns>The property getter's <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetMethodInfo``1(System.String,System.Type[])">
            <summary>
            A reflection helper method that makes it easier to grab a <see cref="T:System.Reflection.MethodInfo"/>
            for a method.
            </summary>
            <typeparam name="TImplementer">Type that implements the method we want.</typeparam>
            <param name="name">Name of the method.</param>
            <param name="argumentTypes">Types of arguments to the method.</param>
            <returns>The method's <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanMethod">
            <summary>
            A delegate type that defines the signature of the
            dynamic method created by the build plans.
            </summary>
            <param name="context"><see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> used to build up the object.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy"/> that runs the
            given delegate to execute the plan.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy"/> implementation
            that constructs a build plan via dynamic IL emission.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain)">
            <summary>
            Construct a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy"/> that
            uses the given strategy chain to construct the build plan.
            </summary>
            <param name="strategies">The strategy chain.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy.CreatePlan(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Construct a build plan.
            </summary>
            <param name="context">The current build context.</param>
            <param name="buildKey">The current build key.</param>
            <returns>The created build plan.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy">
            <summary>
            This interface defines a policy that manages creation of the dynamic methods
            used by the ObjectBuilder code generation. This way, we can replace the details
            of how the dynamic method is created to handle differences in CLR (like Silverlight
            vs desktop) or security policies.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy.CreateBuilderMethod(System.Type,System.String)">
            <summary>
            Create a builder method for the given type, using the given name.
            </summary>
            <param name="typeToBuild">Type that will be built by the generated method.</param>
            <param name="methodName">Name to give to the method.</param>
            <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod"/> object with the proper signature to use
            as part of a build plan.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that generates IL to call
            chosen methods (as specified by the current <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/>)
            as part of object build up.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy.SetCurrentOperationToResolvingParameter(System.String,System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy.SetCurrentOperationToInvokingMethod(System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation">
            <summary>
            A class that records that a constructor is about to be call, and is 
            responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation.MethodSignature">
            <summary>
            Method we're trying to call.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation.ToString">
            <summary>
            Generate the description string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation">
            <summary>
            This class records the information about which constructor argument is currently
            being resolved, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation"/> class.
            </summary>
            <param name="typeBeingConstructed">The type that is being constructed.</param>
            <param name="methodSignature">A string representing the method being called.</param>
            <param name="parameterName">Parameter being resolved.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.ToString">
            <summary>
            Generate the string describing what parameter was being resolved.
            </summary>
            <returns>The description string.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.MethodSignature">
            <summary>
            String describing the method being set up.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.ParameterName">
            <summary>
            Parameter that's being resolved.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that generates IL to resolve properties
            on an object being built.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy.SetCurrentOperationToResolvingPropertyValue(System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy.SetCurrentOperationToSettingProperty(System.String,Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation">
            <summary>
            A base class that holds the information shared by all operations
            performed by the container while setting properties.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation.PropertyName">
            <summary>
            The property value currently being resolved.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString">
            <summary>
            Generate the description of this operation.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation.GetDescriptionFormat">
            <summary>
            Get a format string used to create the description. Called by
            the base <see cref='M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString'/> method.
            </summary>
            <returns>The format string.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.ResolvingPropertyValueOperation">
            <summary>
            This class records the information about which property value is currently
            being resolved, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ResolvingPropertyValueOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ResolvingPropertyValueOperation.GetDescriptionFormat">
            <summary>
            Get a format string used to create the description. Called by
            the base <see cref='M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString'/> method.
            </summary>
            <returns>The format string.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation">
            <summary>
            This class records the information about which property value is currently
            being set, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation"/> class.
            </summary>
            <param name="typeBeingConstructed">Type property is on.</param>
            <param name="propertyName">Name of property being set.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation.GetDescriptionFormat">
            <summary>
            Get a format string used to create the description. Called by
            the base <see cref='M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString'/> method.
            </summary>
            <returns>The format string.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DeferredResolveBuildPlanPolicy">
            <summary>
            Build plan for <see cref="T:System.Func`1"/> that will
            return a func that will resolve the requested type
            through this container later.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.FactoryDelegateBuildPlanPolicy.BuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Creates an instance of this build plan's type, or fills
            in the existing type if passed in.
            </summary>
            <param name="context">Context used to build up the object.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that can create and return an <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy"/>
            for the given build key.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy.CreatePlan(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Create a build plan using the given context and build key.
            </summary>
            <param name="context">Current build context.</param>
            <param name="buildKey">Current build key.</param>
            <returns>The build plan.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy">
            <summary>
            A build plan is an object that, when invoked, will create a new object
            or fill in a given existing one. It encapsulates all the information
            gathered by the strategies to construct a particular object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy.BuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Creates an instance of this build plan's type, or fills
            in the existing type if passed in.
            </summary>
            <param name="context">Context used to build up the object.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that will examine the given
            types and return a sequence of <see cref="T:System.Reflection.MethodInfo"/> objects
            that should be called as part of building the object.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/> that selects
            methods by looking for the given <typeparamref name="TMarkerAttribute"/>
            attribute on those methods.
            </summary>
            <typeparam name="TMarkerAttribute">Type of attribute used to mark methods
            to inject.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicy`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
            <typeparam name="TMarkerAttribute">Attribute that marks methods that should
            be called.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1.SelectMethods(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMethod">
            <summary>
            Objects of this type are the return value from <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>.
            It encapsulates the desired <see cref="T:System.Reflection.MethodInfo"/> with the string keys
            needed to look up the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for each
            parameter.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMethod"/> instance which
            contains the given method.
            </summary>
            <param name="method">The method</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedMethod.Method">
            <summary>
            The constructor this object wraps.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.OverriddenBuildPlanMarkerPolicy.BuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Creates an instance of this build plan's type, or fills
            in the existing type if passed in.
            </summary>
            <param name="context">Context used to build up the object.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that returns a sequence
            of properties that should be injected for the given type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy.SelectProperties(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1.SelectProperties(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref='T:Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList'/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.PropertySelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/> that looks
            for properties marked with the <typeparamref name="TResolutionAttribute"/>
            attribute that are also settable and not indexers.
            </summary>
            <typeparam name="TResolutionAttribute"></typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.PropertySelectorPolicy`1.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedProperty">
            <summary>
            Objects of this type are returned from
            <see cref="M:Telerik.Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy.SelectProperties(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext,Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>.
            This class combines the <see cref="T:System.Reflection.PropertyInfo"/> about
            the property with the string key used to look up the resolver
            for this property's value.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedProperty.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create an instance of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedProperty"/>
            with the given <see cref="T:System.Reflection.PropertyInfo"/> and key.
            </summary>
            <param name="property">The property.</param>
            <param name="key">Key to use to look up the resolver.</param>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedProperty.Property">
            <summary>
            PropertyInfo for this property.
            </summary>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.SelectedProperty.Key">
            <summary>
            Key to look up this property's resolver.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy">
            <summary>
            Implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.AddResolverKey(System.Object)">
            <summary>
            Add a new resolver to track by key.
            </summary>
            <param name="key">Key that was used to add the resolver to the policy set.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.RemoveResolvers(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Remove the currently tracked resolvers from the given policy list.
            </summary>
            <param name="policies">Policy list to remove the resolvers from.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.GetTracker(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Get an instance that implements <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy"/>,
            either the current one in the policy set or creating a new one if it doesn't
            exist.
            </summary>
            <param name="policies">Policy list to look up from.</param>
            <param name="buildKey">Build key to track.</param>
            <returns>The resolver tracker.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.TrackKey(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Object)">
            <summary>
            Add a key to be tracked to the current tracker.
            </summary>
            <param name="policies">Policy list containing the resolvers and trackers.</param>
            <param name="buildKey">Build key for the resolvers being tracked.</param>
            <param name="resolverKey">Key for the resolver.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.RemoveResolvers(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Remove the resolvers for the given build key.
            </summary>
            <param name="policies">Policy list containing the build key.</param>
            <param name="buildKey">Build key.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            calls back into the build chain to build up the dependency, passing
            a type given at compile time as its build key.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy.#ctor(System.Type)">
            <summary>
            Create a new instance storing the given type.
            </summary>
            <param name="typeToBuild">Type to resolve.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy.Resolve(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that is used at build plan execution time
            to resolve a dependent value.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy.Resolve(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy">
            <summary>
            A builder policy that lets you keep track of the current
            resolvers and will remove them from the given policy set.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy.AddResolverKey(System.Object)">
            <summary>
            Add a new resolver to track by key.
            </summary>
            <param name="key">Key that was used to add the resolver to the policy set.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy.RemoveResolvers(Telerik.Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Remove the currently tracked resolvers from the given policy list.
            </summary>
            <param name="policies">Policy list to remove the resolvers from.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy">
            <summary>
            Represents a strategy in the chain of responsibility.
            Strategies are required to support both BuildUp and TearDown. Although you
            can implement this interface directly, you may also choose to use
            <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> as the base class for your strategies, as
            this class provides useful helper methods and makes support BuildUp and TearDown
            optional.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PostBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreTearDown(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PostTearDown(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PostTearDown method is called when the chain has finished the PreTearDown
            phase and executes in reverse order from the PreTearDown calls.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain">
            <summary>
            This interface defines a standard method to convert any 
            <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> regardless
            of the stage enum into a regular, flat strategy chain.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain.MakeStrategyChain">
            <summary>
            Convert this <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> into
            a flat <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>.
            </summary>
            <returns>The flattened <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain">
            <summary>
            Represents a chain of responsibility for builder strategies.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain.Reverse">
            <summary>
            Reverse the order of the strategy chain.
            </summary>
            <returns>The reversed strategy chain.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain.ExecuteBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the Buildup methods on the strategies.
            </summary>
            <param name="context">Context for the build process.</param>
            <returns>The build up object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.IStrategyChain.ExecuteTearDown(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the TearDown methods on the strategies.
            </summary>
            <param name="context">Context for the teardown process.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy">
            <summary>
            A builder policy used to create lifetime policy instances.
            Used by the LifetimeStrategy when instantiating open
            generic types.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy.CreateLifetimePolicy">
            <summary>
            Create a new instance of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy.LifetimeType">
            <summary>
            The type of Lifetime manager that will be created by this factory.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that controls how instances are
            persisted and recovered from an external store. Used to implement
            things like singletons and per-http-request lifetime.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object to store.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.RemoveValue">
            <summary>
            Remove the value this lifetime policy is managing from backing store.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeStrategy">
            <summary>
            An <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> implementation that uses
            a <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/> to figure out if an object
            has already been created and to update or remove that
            object from some backing store.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeStrategy.PreBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.LifetimeStrategy.PostBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy">
            <summary>
            A <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/> that stores objects in the locator and
            lifetime container provided by the context.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.SingletonLifetimePolicy.Recover">
            <summary>
            A method that does whatever is needed to clean up
            as part of cleaning up after an exception.
            </summary>
            <remarks>
            Don't do anything that could throw in this method,
            it will cause later recover operations to get skipped
            and play real havok with the stack trace.
            </remarks>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy">
            <summary>
            An implementation of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/> that does nothing,
            ensuring that a new object gets created every time.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.TransientLifetimePolicy.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1">
            <summary>
            Represents a chain of responsibility for builder strategies partitioned by stages.
            </summary>
            <typeparam name="TStageEnum">The stage enumeration to partition the strategies.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.#ctor(Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain{`0})">
            <summary>
            Initialize a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> class with an inner strategy chain to use when building.
            </summary>
            <param name="innerChain">The inner strategy chain to use first when finding strategies in the build operation.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.Add(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy,`0)">
            <summary>
            Adds a strategy to the chain at a particular stage.
            </summary>
            <param name="strategy">The strategy to add to the chain.</param>
            <param name="stage">The stage to add the strategy.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.AddNew``1(`0)">
            <summary>
            Add a new strategy for the <paramref name="stage"/>.
            </summary>
            <typeparam name="TStrategy">The <see cref="T:System.Type"/> of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/></typeparam>
            <param name="stage">The stage to add the strategy.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.Clear">
            <summary>
            Clear the current strategy chain list.
            </summary>
            <remarks>
            This will not clear the inner strategy chain if this instane was created with one.
            </remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.MakeStrategyChain">
            <summary>
            Makes a strategy chain based on this instance.
            </summary>
            <returns>A new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain"/>.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain">
            <summary>
            Represents a chain of responsibility for builder strategies.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.#ctor">
            <summary>
            Initialzie a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initialzie a new instance of the <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain"/> class with a colleciton of strategies.
            </summary>
            <param name="strategies">A collection of strategies to initialize the chain.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.Add(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderStrategy)">
            <summary>
            Adds a strategy to the chain.
            </summary>
            <param name="strategy">The strategy to add to the chain.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds strategies to the chain.
            </summary>
            <param name="strategyEnumerable">The strategies to add to the chain.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.Reverse">
            <summary>
            Reverse the order of the strategy chain.
            </summary>
            <returns>The reversed strategy chain.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context to build up.
            </summary>
            <param name="context">Context for the build processes.</param>
            <returns>The build up object</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteTearDown(Telerik.Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the TearDown methods on the strategies.
            </summary>
            <param name="context">Context for the teardown process.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.System#Collections#Generic#IEnumerable{Telerik#Microsoft#Practices#ObjectBuilder2#IBuilderStrategy}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.StrategyChain.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.EnumerableExtensions">
            <summary>
            The almost inevitable collection of extra helper methods on
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> to augment the rich set of what
            Linq already gives us.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute the provided <paramref name="action"/> on every item in <paramref name="sequence"/>.
            </summary>
            <typeparam name="TItem">Type of the items stored in <paramref name="sequence"/></typeparam>
            <param name="sequence">Sequence of items to process.</param>
            <param name="action">Code to run over each item.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.EnumerableExtensions.JoinStrings``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Create a single string from a sequenc of items, separated by the provided <paramref name="separator"/>,
            and with the conversion to string done by the given <paramref name="converter"/>.
            </summary>
            <remarks>This method does basically the same thing as <see cref="M:System.String.Join(System.String,System.String[])"/>,
            but will work on any sequence of items, not just arrays.</remarks>
            <typeparam name="TItem">Type of items in the sequence.</typeparam>
            <param name="sequence">Sequence of items to convert.</param>
            <param name="separator">Separator to place between the items in the string.</param>
            <param name="converter">The conversion function to change TItem -&gt; string.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.EnumerableExtensions.JoinStrings``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Create a single string from a sequenc of items, separated by the provided <paramref name="separator"/>,
            and with the conversion to string done by the item's <see cref='M:System.Object.ToString'/> method.
            </summary>
            <remarks>This method does basically the same thing as <see cref="M:System.String.Join(System.String,System.String[])"/>,
            but will work on any sequence of items, not just arrays.</remarks>
            <typeparam name="TItem">Type of items in the sequence.</typeparam>
            <param name="sequence">Sequence of items to convert.</param>
            <param name="separator">Separator to place between the items in the string.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey">
            <summary>
            Build key used to combine a type object with a string name. Used by
            ObjectBuilder to indicate exactly what is being built.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.#ctor(System.Type,System.String)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance with the given
            type and name.
            </summary>
            <param name="type"><see cref="P:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> to build.</param>
            <param name="name">Key to use to look up type mappings and singletons.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance for the default
            buildup of the given type.
            </summary>
            <param name="type"><see cref="P:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> to build.</param>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Make``1">
            <summary>
            This helper method creates a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance. It is
            initialized for the default key for the given type.
            </summary>
            <typeparam name="T">Type to build.</typeparam>
            <returns>A new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Make``1(System.String)">
            <summary>
            This helper method creates a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance for
            the given type and key.
            </summary>
            <typeparam name="T">Type to build</typeparam>
            <param name="name">Key to use to look up type mappings and singletons.</param>
            <returns>A new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance initialized with the given type and name.</returns>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type">
            <summary>
            Return the <see cref="P:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> stored in this build key.
            </summary>
            <value>The type to build.</value>
        </member>
        <member name="P:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Name">
            <summary>
            Returns the name stored in this build key.
            </summary>
            <remarks>The name to use when building.</remarks>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances.
            </summary>
            <remarks>Two <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. Also, comparing
            against a different type will also return false.</remarks>
            <param name="obj">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.GetHashCode">
            <summary>
            Calculate a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.op_Equality(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances for equality.
            </summary>
            <remarks>Two <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>True if the values of the keys are the same, else false.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.op_Inequality(Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances for inequality.
            </summary>
            <remarks>Two <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. If either field differs
            the keys are not equal.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>false if the values of the keys are the same, else true.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.ToString">
            <summary>
            Formats the build key as a string (primarily for debugging).
            </summary>
            <returns>A readable string representation of the build key.</returns>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1">
            <summary>
            A generic version of <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> so that
            you can new up a key using generic syntax.
            </summary>
            <typeparam name="T">Type for the key.</typeparam>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1.#ctor">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1"/> that
            specifies the given type.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Telerik.Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1"/> that
            specifies the given type and name.
            </summary>
            <param name="name">Name for the key.</param>
        </member>
        <member name="T:Telerik.Microsoft.Practices.ObjectBuilder2.Sequence">
            <summary>
            A series of helper methods to deal with sequences -
            objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.Sequence.Collect``1(``0[])">
            <summary>
            A function that turns an arbitrary parameter list into an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Type of arguments.</typeparam>
            <param name="arguments">The items to put into the collection.</param>
            <returns>An array that contains the values of the <paramref name="arguments"/>.</returns>
        </member>
        <member name="M:Telerik.Microsoft.Practices.ObjectBuilder2.Sequence.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Given two sequences, return a new sequence containing the corresponding values
            from each one.
            </summary>
            <typeparam name="TFirstSequenceElement">Type of first sequence.</typeparam>
            <typeparam name="TSecondSequenceElement">Type of second sequence.</typeparam>
            <param name="sequence1">First sequence of items.</param>
            <param name="sequence2">Second sequence of items.</param>
            <returns>New sequence of pairs. This sequence ends when the shorter of sequence1 and sequence2 does.</returns>
        </member>
        <member name="T:NCrontab.CrontabField">
            <summary>
            Represents a single crontab field.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Parse(NCrontab.CrontabFieldKind,System.String)">
            <summary>
            Parses a crontab field expression given its kind.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Minutes(System.String)">
            <summary>
            Parses a crontab field expression representing minutes.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Hours(System.String)">
            <summary>
            Parses a crontab field expression representing hours.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Days(System.String)">
            <summary>
            Parses a crontab field expression representing days in any given month.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Months(System.String)">
            <summary>
            Parses a crontab field expression representing months.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.DaysOfWeek(System.String)">
            <summary>
            Parses a crontab field expression representing days of a week.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.GetFirst">
            <summary>
            Gets the first value of the field or -1.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Next(System.Int32)">
            <summary>
            Gets the next value of the field that occurs after the given 
            start value or -1 if there is no next value available.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Contains(System.Int32)">
            <summary>
            Determines if the given value occurs in the field.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabField.Accumulate(System.Int32,System.Int32,System.Int32,NCrontab.ExceptionHandler)">
            <summary>
            Accumulates the given range (start to end) and interval of values
            into the current set of the field.
            </summary>
            <remarks>
            To set the entire range of values representable by the field,
            set <param name="start" /> and <param name="end" /> to -1 and
            <param name="interval" /> to 1.
            </remarks>
        </member>
        <member name="T:NCrontab.CrontabSchedule">
            <summary>
            Represents a schedule initialized from the crontab expression.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabSchedule.GetNextOccurrences(System.DateTime,System.DateTime)">
            <summary>
            Enumerates all the occurrences of this schedule starting with a
            base time and up to an end time limit. This method uses deferred
            execution such that the occurrences are only calculated as they 
            are enumerated.
            </summary>
            <remarks>
            This method does not return the value of <paramref name="baseTime"/>
            itself if it falls on the schedule. For example, if <paramref name="baseTime" />
            is midnight and the schedule was created from the expression <c>* * * * *</c> 
            (meaning every minute) then the next occurrence of the schedule 
            will be at one minute past midnight and not midnight itself.
            The method returns the <em>next</em> occurrence <em>after</em> 
            <paramref name="baseTime"/>. Also, <param name="endTime" /> is
            exclusive.
            </remarks>
        </member>
        <member name="M:NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)">
            <summary>
            Gets the next occurrence of this schedule starting with a base time.
            </summary>
        </member>
        <member name="M:NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime,System.DateTime)">
            <summary>
            Gets the next occurrence of this schedule starting with a base 
            time and up to an end time limit.
            </summary>
            <remarks>
            This method does not return the value of <paramref name="baseTime"/>
            itself if it falls on the schedule. For example, if <paramref name="baseTime" />
            is midnight and the schedule was created from the expression <c>* * * * *</c> 
            (meaning every minute) then the next occurrence of the schedule 
            will be at one minute past midnight and not midnight itself.
            The method returns the <em>next</em> occurrence <em>after</em> 
            <paramref name="baseTime"/>. Also, <param name="endTime" /> is
            exclusive.
            </remarks>
        </member>
        <member name="M:NCrontab.CrontabSchedule.ToString">
            <summary>
            Returns a string in crontab expression (expanded) that represents 
            this schedule.
            </summary>
        </member>
        <member name="T:NCrontab.ExceptionHandler">
            <summary>
            Represents the method that will handle an <see cref="T:System.Exception"/> object.
            </summary>
        </member>
        <member name="T:NCrontab.ExceptionProvider">
            <summary>
            Represents the method that will generate an <see cref="T:System.Exception"/> object.
            </summary>
        </member>
        <member name="T:NCrontab.ErrorHandling">
            <summary>
            Defines error handling strategies.
            </summary>
        </member>
        <member name="F:NCrontab.ErrorHandling.Throw">
            <summary>
            A stock <see cref="T:NCrontab.ExceptionHandler"/> that throws.
            </summary>
        </member>
        <member name="T:NCrontab.ValueOrError`1">
            <summary>
            A generic type that either represents a value or an error condition.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.#ctor(`0)">
            <summary>
            Initializes the object with a defined value.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.#ctor(System.Exception)">
            <summary>
            Initializes the object with an error.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.#ctor(NCrontab.ExceptionProvider)">
            <summary>
            Initializes the object with a handler that will provide
            the error result when needed.
            </summary>
        </member>
        <member name="P:NCrontab.ValueOrError`1.HasValue">
            <summary>
            Determines if object holds a defined value or not.
            </summary>
        </member>
        <member name="P:NCrontab.ValueOrError`1.Value">
            <summary>
            Gets the value otherwise throws an error if undefined.
            </summary>
        </member>
        <member name="P:NCrontab.ValueOrError`1.IsError">
            <summary>
            Determines if object identifies an error condition or not.
            </summary>
        </member>
        <member name="P:NCrontab.ValueOrError`1.Error">
            <summary>
            Gets the <see cref="T:System.Exception"/> object if this object
            represents an error condition otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:NCrontab.ValueOrError`1.ErrorProvider">
            <summary>
            Gets the <see cref="T:NCrontab.ExceptionProvider"/> object if this 
            object represents an error condition otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.TryGetValue(`0)">
            <summary>
            Attempts to get the defined value or another in case
            of an error.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.op_Implicit(`0)~NCrontab.ValueOrError{`0}">
            <summary>
            Implicitly converts a <typeparamref name="T"/> value to
            an object of this type.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.op_Implicit(System.Exception)~NCrontab.ValueOrError{`0}">
            <summary>
            Implicitly converts an <see cref="T:System.Exception"/> object to
            an object of this type that represents the error condition.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.op_Implicit(NCrontab.ExceptionProvider)~NCrontab.ValueOrError{`0}">
            <summary>
            Implicitly converts an <see cref="T:NCrontab.ExceptionProvider"/> object to
            an object of this type that represents the error condition.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.op_Explicit(NCrontab.ValueOrError{`0})~`0">
            <summary>
            Explicits converts this object to a <typeparamref name="T"/> value.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.op_Explicit(NCrontab.ValueOrError{`0})~System.Exception">
            <summary>
            Explicits converts this object to an <see cref="T:System.Exception"/> object
            if it represents an error condition. The conversion yields <c>null</c>
            if this object does not represent an error condition.
            </summary>
        </member>
        <member name="M:NCrontab.ValueOrError`1.op_Explicit(NCrontab.ValueOrError{`0})~NCrontab.ExceptionProvider">
            <summary>
            Explicits converts this object to an <see cref="T:NCrontab.ExceptionProvider"/> object
            if it represents an error condition. The conversion yields <c>null</c>
            if this object does not represent an error condition.
            </summary>
        </member>
    </members>
</doc>
